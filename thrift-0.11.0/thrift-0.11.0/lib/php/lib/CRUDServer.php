<?php
/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface CRUDServerIf {
  /**
   * @param string $idAsiento
   * @return string
   */
  public function getAsiento($idAsiento);
  /**
   * @return string
   */
  public function getAllAsiento();
  /**
   * @param string $id
   * @param string $estado
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateEstadoAsiento($id, $estado, $usuario_modificacion);
  /**
   * @param string $numero
   * @param string $fila
   * @param string $lateral
   * @param string $estado
   * @param string $idAsiento
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateAsiento($numero, $fila, $lateral, $estado, $idAsiento, $usuario_modificacion);
  /**
   * @param string $numero
   * @param string $fila
   * @param string $lateral
   * @param string $estado
   * @param string $usuarioCreacion
   * @return string
   */
  public function insertAsiento($numero, $fila, $lateral, $estado, $usuarioCreacion);
  /**
   * @param string $idBanco
   * @return string
   */
  public function getBanco($idBanco);
  /**
   * @param string $tipo
   * @return string
   */
  public function getAllBanco($tipo);
  /**
   * @param string $id
   * @param string $estado
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateEstadoBanco($id, $estado, $usuario_modificacion);
  /**
   * @param string $nombre
   * @param string $estado
   * @param string $idBanco
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateBanco($nombre, $estado, $idBanco, $usuario_modificacion);
  /**
   * @param string $nombre
   * @param string $estado
   * @param string $usuarioCreacion
   * @return string
   */
  public function insertBanco($nombre, $estado, $usuarioCreacion);
  /**
   * @param string $idficha
   * @return string
   */
  public function getFichaArtistica($idficha);
  /**
   * @param string $idficha
   * @return string
   */
  public function deleteFichaArtistica($idficha);
  /**
   * @param string $idEvento
   * @return string
   */
  public function getAllFichaArtistica($idEvento);
  /**
   * @param string $titulo
   * @param string $descripcion
   * @param string $idficha
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateFichaArtistica($titulo, $descripcion, $idficha, $usuario_modificacion);
  /**
   * @param string $idEvento
   * @param string $titulo
   * @param string $descripcion
   * @param string $usuarioCreacion
   * @return string
   */
  public function insertFichaArtistica($idEvento, $titulo, $descripcion, $usuarioCreacion);
  /**
   * @param string $idBancoTarjeta
   * @return string
   */
  public function getBancoTarjeta($idBancoTarjeta);
  /**
   * @return string
   */
  public function getAllBancoTarjeta();
  /**
   * @param string $id
   * @param string $estado
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateEstadoBancoTarjeta($id, $estado, $usuario_modificacion);
  /**
   * @param string $idBanco
   * @param string $idTarjeta
   * @param string $descuento
   * @param string $estado
   * @param string $idBancoTarjeta
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateBancoTarjeta($idBanco, $idTarjeta, $descuento, $estado, $idBancoTarjeta, $usuario_modificacion);
  /**
   * @param string $idBanco
   * @param string $idTarjeta
   * @param string $descuento
   * @param string $estado
   * @param string $usuarioCreacion
   * @return string
   */
  public function insertBancoTarjeta($idBanco, $idTarjeta, $descuento, $estado, $usuarioCreacion);
  /**
   * @param string $idCategoria
   * @return string
   */
  public function getCategoria($idCategoria);
  /**
   * @return string
   */
  public function getAllCategoria();
  /**
   * @param string $id
   * @param string $estado
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateEstadoCategoria($id, $estado, $usuario_modificacion);
  /**
   * @param string $nombre
   * @param string $descripcion
   * @param string $estado
   * @param string $idCategoria
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateCategoria($nombre, $descripcion, $estado, $idCategoria, $usuario_modificacion);
  /**
   * @param string $nombre
   * @param string $descripcion
   * @param string $estado
   * @param string $usuarioCreacion
   * @return string
   */
  public function insertCategoria($nombre, $descripcion, $estado, $usuarioCreacion);
  /**
   * @param string $idImagen
   * @param string $tipo
   * @return string
   */
  public function getImagen($idImagen, $tipo);
  /**
   * @param string $tipo
   * @return string
   */
  public function getAllImagen($tipo);
  /**
   * @param string $id
   * @param string $tipo
   * @param string $estado
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateEstadoImagen($id, $tipo, $estado, $usuario_modificacion);
  /**
   * @param string $nombre
   * @param string $descripcion
   * @param string $tipo
   * @param string $estado
   * @param string $idImagen
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateImagen($nombre, $descripcion, $tipo, $estado, $idImagen, $usuario_modificacion);
  /**
   * @param string $nombre
   * @param string $descripcion
   * @param string $tipo
   * @param string $estado
   * @param string $usuarioCreacion
   * @return string
   */
  public function insertImagen($nombre, $descripcion, $tipo, $estado, $usuarioCreacion);
  /**
   * @param string $idClasificacion
   * @return string
   */
  public function getClasificacion($idClasificacion);
  /**
   * @return string
   */
  public function getAllClasificacion();
  /**
   * @param string $id
   * @param string $estado
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateEstadoClasificacion($id, $estado, $usuario_modificacion);
  /**
   * @param string $nombre
   * @param string $descripcion
   * @param string $estado
   * @param string $idClasificacion
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateClasificacion($nombre, $descripcion, $estado, $idClasificacion, $usuario_modificacion);
  /**
   * @param string $nombre
   * @param string $descripcion
   * @param string $estado
   * @param string $usuarioCreacion
   * @return string
   */
  public function insertClasificacion($nombre, $descripcion, $estado, $usuarioCreacion);
  /**
   * @param string $idCodigoPromocional
   * @return string
   */
  public function getCodigoPromocional($idCodigoPromocional);
  /**
   * @return string
   */
  public function getAllCodigoPromocional();
  /**
   * @param string $id
   * @param string $estado
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateEstadoCodigoPromocional($id, $estado, $usuario_modificacion);
  /**
   * @param string $nombre
   * @param string $codigo
   * @param string $descuento
   * @param string $estado
   * @param string $idCodigoPromocional
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateCodigoPromocional($nombre, $codigo, $descuento, $estado, $idCodigoPromocional, $usuario_modificacion);
  /**
   * @param string $nombre
   * @param string $codigo
   * @param string $descuento
   * @param string $estado
   * @param string $usuarioCreacion
   * @return string
   */
  public function insertCodigoPromocional($nombre, $codigo, $descuento, $estado, $usuarioCreacion);
  /**
   * @param string $idDistribucion
   * @return string
   */
  public function getDistribucion($idDistribucion);
  /**
   * @return string
   */
  public function getAllDistribucion();
  /**
   * @param string $id
   * @param string $estado
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateEstadoDistribucion($id, $estado, $usuario_modificacion);
  /**
   * @param string $idEvento
   * @param string $idPlatea
   * @param string $idAsiento
   * @param string $tipo
   * @param string $estado
   * @param string $idDistribucion
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateDistribucion($idEvento, $idPlatea, $idAsiento, $tipo, $estado, $idDistribucion, $usuario_modificacion);
  /**
   * @param string $idEvento
   * @param string $idPlatea
   * @param string $idAsiento
   * @param string $tipo
   * @param string $estado
   * @param string $usuarioCreacion
   * @return string
   */
  public function insertDistribucion($idEvento, $idPlatea, $idAsiento, $tipo, $estado, $usuarioCreacion);
  /**
   * @param string $idEvento
   * @param string $tipoEvento
   * @return string
   */
  public function getEvento($idEvento, $tipoEvento);
  /**
   * @param string $idEvento
   * @param string $tipoEvento
   * @return string
   */
  public function getEvento_sinopsis($idEvento, $tipoEvento);
  /**
   * @param string $idEvento
   * @param string $tipoEvento
   * @return string
   */
  public function getEvento_multimedia($idEvento, $tipoEvento);
  /**
   * @param string $tipoEvento
   * @return string
   */
  public function getAllEvento($tipoEvento);
  /**
   * @param string $id
   * @param string $estado
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateEstadoEvento($id, $estado, $usuario_modificacion);
  /**
   * @param string $nombre
   * @param string $duracion
   * @param string $fechaInicial
   * @param string $fechaFinal
   * @param string $idProductora
   * @param string $idSalaMapa
   * @param string $idTipoEvento
   * @param string $idTipoEspectaculo
   * @param string $idCategoria
   * @param string $idClasificacion
   * @param string $idProcedencia
   * @param string $aforo
   * @param string $tipoEvento
   * @param string $estado
   * @param string $idEvento
   * @param string $preventa
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateEvento_informacion($nombre, $duracion, $fechaInicial, $fechaFinal, $idProductora, $idSalaMapa, $idTipoEvento, $idTipoEspectaculo, $idCategoria, $idClasificacion, $idProcedencia, $aforo, $tipoEvento, $estado, $idEvento, $preventa, $usuario_modificacion);
  /**
   * @param string $nombre
   * @param string $tipoEvento
   * @param string $idEvento
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateEvento_sinopsis($nombre, $tipoEvento, $idEvento, $usuario_modificacion);
  /**
   * @param string $video
   * @param string $tipoEvento
   * @param string $idEvento
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateEvento_multimedia($video, $tipoEvento, $idEvento, $usuario_modificacion);
  /**
   * @param string $nombre
   * @param string $duracion
   * @param string $fechaInicial
   * @param string $fechaFinal
   * @param string $idProductora
   * @param string $idSalaMapa
   * @param string $idTipoEvento
   * @param string $idTipoEspectaculo
   * @param string $idCategoria
   * @param string $idClasificacion
   * @param string $idProcedencia
   * @param string $aforo
   * @param string $productora
   * @param string $tipoEvento
   * @param string $estado
   * @param string $usuarioCreacion
   * @return string
   */
  public function insertEvento($nombre, $duracion, $fechaInicial, $fechaFinal, $idProductora, $idSalaMapa, $idTipoEvento, $idTipoEspectaculo, $idCategoria, $idClasificacion, $idProcedencia, $aforo, $productora, $tipoEvento, $estado, $usuarioCreacion);
  /**
   * @return string
   */
  public function getEventoDestacado();
  /**
   * @param string $id
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateEventoDestacado($id, $usuario_modificacion);
  /**
   * @return string
   */
  public function getContacto();
  /**
   * @param string $nombre
   * @param string $celular
   * @param string $telefono
   * @param string $direccion
   * @param string $correo
   * @param string $pagina
   * @param string $facebook
   * @param string $instagram
   * @param string $twitter
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateContacto($nombre, $celular, $telefono, $direccion, $correo, $pagina, $facebook, $instagram, $twitter, $usuario_modificacion);
  /**
   * @return string
   */
  public function getFundacion();
  /**
   * @param string $nombre
   * @param string $descripcion1
   * @param string $descripcion2
   * @param string $precio1
   * @param string $precio2
   * @param string $precio3
   * @param string $precio4
   * @param string $precio5
   * @param string $precio6
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateFundacion($nombre, $descripcion1, $descripcion2, $precio1, $precio2, $precio3, $precio4, $precio5, $precio6, $usuario_modificacion);
  /**
   * @return string
   */
  public function getAllBeneficios();
  /**
   * @param string $id
   * @return string
   */
  public function getBeneficio($id);
  /**
   * @param string $id
   * @param string $beneficio
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateBeneficio($id, $beneficio, $usuario_modificacion);
  /**
   * @param string $id
   * @param string $estado
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateEstadoBeneficio($id, $estado, $usuario_modificacion);
  /**
   * @param string $beneficio
   * @param string $usuarioCreacion
   * @return string
   */
  public function insertBeneficio($beneficio, $usuarioCreacion);
  /**
   * @return string
   */
  public function getAllPreguntas();
  /**
   * @param string $id
   * @return string
   */
  public function getPregunta($id);
  /**
   * @param string $id
   * @param string $pregunta
   * @param string $respuesta
   * @param string $usuario_modificacion
   * @return string
   */
  public function updatePregunta($id, $pregunta, $respuesta, $usuario_modificacion);
  /**
   * @param string $pregunta
   * @param string $respuesta
   * @param string $usuarioCreacion
   * @return string
   */
  public function insertPregunta($pregunta, $respuesta, $usuarioCreacion);
  /**
   * @param string $id
   * @param string $estado
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateEstadoPregunta($id, $estado, $usuario_modificacion);
  /**
   * @return string
   */
  public function getInformacion();
  /**
   * @param string $Informacion
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateInformacion($Informacion, $usuario_modificacion);
  /**
   * @param string $idFuncion
   * @return string
   */
  public function getFuncion($idFuncion);
  /**
   * @param string $idEvento
   * @return string
   */
  public function getAllFuncion($idEvento);
  /**
   * @param string $id
   * @param string $estado
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateEstadoFuncion($id, $estado, $usuario_modificacion);
  /**
   * @param string $fecha
   * @param string $aforo
   * @param string $estado
   * @param string $idFuncion
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateFuncion($fecha, $aforo, $estado, $idFuncion, $usuario_modificacion);
  /**
   * @param string $fecha
   * @param string $aforo
   * @param string $idEvento
   * @param string $estado
   * @param string $usuarioCreacion
   * @return string
   */
  public function insertFuncion($fecha, $aforo, $idEvento, $estado, $usuarioCreacion);
  /**
   * @param string $idMapa
   * @return string
   */
  public function getMapa($idMapa);
  /**
   * @return string
   */
  public function getAllMapa();
  /**
   * @param string $id
   * @param string $estado
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateEstadoMapa($id, $estado, $usuario_modificacion);
  /**
   * @param string $nombre
   * @param string $distribucion
   * @param string $rutaImagen
   * @param string $estado
   * @param string $idMapa
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateMapa($nombre, $distribucion, $rutaImagen, $estado, $idMapa, $usuario_modificacion);
  /**
   * @param string $nombre
   * @param string $distribucion
   * @param string $rutaImagen
   * @param string $estado
   * @param string $usuarioCreacion
   * @return string
   */
  public function insertMapa($nombre, $distribucion, $rutaImagen, $estado, $usuarioCreacion);
  /**
   * @param string $idPerfil
   * @return string
   */
  public function getPerfil($idPerfil);
  /**
   * @return string
   */
  public function getAllPerfil();
  /**
   * @param string $id
   * @param string $estado
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateEstadoPerfil($id, $estado, $usuario_modificacion);
  /**
   * @param string $descripcion
   * @param string $tipo
   * @param string $estado
   * @param string $idPerfil
   * @param string $usuario_modificacion
   * @return string
   */
  public function updatePerfil($descripcion, $tipo, $estado, $idPerfil, $usuario_modificacion);
  /**
   * @param string $descripcion
   * @param string $tipo
   * @param string $estado
   * @param string $usuarioCreacion
   * @return string
   */
  public function insertPerfil($descripcion, $tipo, $estado, $usuarioCreacion);
  /**
   * @param string $idPerfil
   * @param string $idRol
   * @return string
   */
  public function getPerfilRol($idPerfil, $idRol);
  /**
   * @param string $idPerfil
   * @return string
   */
  public function getAllPerfilRol($idPerfil);
  /**
   * @param string $id
   * @param string $estado
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateEstadoPerfilRol($id, $estado, $usuario_modificacion);
  /**
   * @param string $idPerfil
   * @param string $idRol
   * @param string $estado
   * @param string $idPerfilRol
   * @param string $usuario_modificacion
   * @return string
   */
  public function updatePerfilRol($idPerfil, $idRol, $estado, $idPerfilRol, $usuario_modificacion);
  /**
   * @param string $idPerfil
   * @param string $idRol
   * @param string $estado
   * @param string $usuarioCreacion
   * @return string
   */
  public function insertPerfilRol($idPerfil, $idRol, $estado, $usuarioCreacion);
  /**
   * @param string $idEvento
   * @return string
   */
  public function isPrincipal($idEvento);
  /**
   * @param string $idPlatea
   * @return string
   */
  public function getPlatea($idPlatea);
  /**
   * @param string $idEvento
   * @return string
   */
  public function getAllPlatea($idEvento);
  /**
   * @param string $idPlatea
   * @param string $idFuncion
   * @return string
   */
  public function getPlateaFuncion($idPlatea, $idFuncion);
  /**
   * @param string $id
   * @param string $estado
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateEstadoPlatea($id, $estado, $usuario_modificacion);
  /**
   * @param string $nombre
   * @param string $costo
   * @param string $aforo
   * @param string $estado
   * @param string $idPlatea
   * @param string $usuario_modificacion
   * @return string
   */
  public function updatePlatea($nombre, $costo, $aforo, $estado, $idPlatea, $usuario_modificacion);
  /**
   * @param string $nombre
   * @param string $costo
   * @param string $aforo
   * @param string $idEvento
   * @param string $estado
   * @param string $usuarioCreacion
   * @return string
   */
  public function insertPlatea($nombre, $costo, $aforo, $idEvento, $estado, $usuarioCreacion);
  /**
   * @param string $idProcedencia
   * @return string
   */
  public function getProcedencia($idProcedencia);
  /**
   * @return string
   */
  public function getAllProcedencia();
  /**
   * @param string $id
   * @param string $estado
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateEstadoProcedencia($id, $estado, $usuario_modificacion);
  /**
   * @param string $nombre
   * @param string $descripcion
   * @param string $estado
   * @param string $idProcedencia
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateProcedencia($nombre, $descripcion, $estado, $idProcedencia, $usuario_modificacion);
  /**
   * @param string $nombre
   * @param string $descripcion
   * @param string $estado
   * @param string $usuarioCreacion
   * @return string
   */
  public function insertProcedencia($nombre, $descripcion, $estado, $usuarioCreacion);
  /**
   * @param string $idProductora
   * @return string
   */
  public function getProductora($idProductora);
  /**
   * @return string
   */
  public function getAllProductora();
  /**
   * @param string $id
   * @param string $estado
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateEstadoProductora($id, $estado, $usuario_modificacion);
  /**
   * @param string $nombre
   * @param string $descripcion
   * @param string $estado
   * @param string $idProductora
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateProductora($nombre, $descripcion, $estado, $idProductora, $usuario_modificacion);
  /**
   * @param string $nombre
   * @param string $descripcion
   * @param string $estado
   * @param string $usuarioCreacion
   * @return string
   */
  public function insertProductora($nombre, $descripcion, $estado, $usuarioCreacion);
  /**
   * @return string
   */
  public function getAllCortesia();
  /**
   * @param string $id_cortesia
   * @return string
   */
  public function getCortesia($id_cortesia);
  /**
   * @param string $id
   * @param string $estado
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateEstadoCortesia($id, $estado, $usuario_modificacion);
  /**
   * @param string $idTicketAsiento
   * @param string $idTicket
   * @param string $usuario_modificacion
   * @return string
   */
  public function deleteCortesia($idTicketAsiento, $idTicket, $usuario_modificacion);
  /**
   * @param string $idFuncion
   * @param string $idPlatea
   * @param string $tipo
   * @param string $fila
   * @param string $desde
   * @param string $hasta
   * @param string $nombre
   * @param string $correo
   * @param string $descripcion
   * @param string $estado
   * @param string $usuario_modificacion
   * @return string
   */
  public function bloqueo($idFuncion, $idPlatea, $tipo, $fila, $desde, $hasta, $nombre, $correo, $descripcion, $estado, $usuario_modificacion);
  /**
   * @param string $idFuncion
   * @param string $idEvento
   * @param string $idUsuario
   * @param string $asientos
   * @param string $tipo
   * @param string $usuarioCreacion
   * @return string
   */
  public function insertReserva($idFuncion, $idEvento, $idUsuario, $asientos, $tipo, $usuarioCreacion);
  /**
   * @param string $idUsuario
   * @return string
   */
  public function getAllReserva($idUsuario);
  /**
   * @param string $reserva
   * @param string $idUsuario
   * @return string
   */
  public function deleteReserva($reserva, $idUsuario);
  /**
   * @param string $idPromocion
   * @param string $idTipoPromocion
   * @param string $tipo
   * @return string
   */
  public function getPromocion($idPromocion, $idTipoPromocion, $tipo);
  /**
   * @return string
   */
  public function getAllPromociones();
  /**
   * @param string $idEvento
   * @param string $tipo
   * @return string
   */
  public function getAllPromocion($idEvento, $tipo);
  /**
   * @param string $id
   * @param string $estado
   * @param string $tipo
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateEstadoPromocion($id, $estado, $tipo, $usuario_modificacion);
  /**
   * @param string $idPromocion
   * @param string $idPromocion2
   * @param string $nombre
   * @param string $descripcion
   * @param string $amigoTeatro
   * @param string $idEvento
   * @param string $idPlatea
   * @param string $idFuncion
   * @param string $General
   * @param string $Web
   * @param string $App
   * @param string $Taquilla
   * @param string $idTipoPromocion
   * @param string $fechaInicio
   * @param string $fechaFin
   * @param string $TipoPromocion
   * @param string $var1
   * @param string $var2
   * @param string $descuento
   * @param string $Cmaxima
   * @param string $var3
   * @param string $usuario_modificacion
   * @return string
   */
  public function updatePromocion($idPromocion, $idPromocion2, $nombre, $descripcion, $amigoTeatro, $idEvento, $idPlatea, $idFuncion, $General, $Web, $App, $Taquilla, $idTipoPromocion, $fechaInicio, $fechaFin, $TipoPromocion, $var1, $var2, $descuento, $Cmaxima, $var3, $usuario_modificacion);
  /**
   * @param string $nombre
   * @param string $descripcion
   * @param string $amigoTeatro
   * @param string $idEvento
   * @param string $idPlatea
   * @param string $idFuncion
   * @param string $General
   * @param string $Web
   * @param string $App
   * @param string $Taquilla
   * @param string $idTipoPromocion
   * @param string $fechaInicio
   * @param string $fechaFin
   * @param string $TipoPromocion
   * @param string $var1
   * @param string $var2
   * @param string $descuento
   * @param string $Cmaxima
   * @param string $var3
   * @param string $usuarioCreacion
   * @return string
   */
  public function insertPromocion($nombre, $descripcion, $amigoTeatro, $idEvento, $idPlatea, $idFuncion, $General, $Web, $App, $Taquilla, $idTipoPromocion, $fechaInicio, $fechaFin, $TipoPromocion, $var1, $var2, $descuento, $Cmaxima, $var3, $usuarioCreacion);
  /**
   * @param string $idNombrePromocion
   * @return string
   */
  public function getNombrePromocion($idNombrePromocion);
  /**
   * @return string
   */
  public function getAllNombrePromocion();
  /**
   * @param string $id
   * @param string $estado
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateEstadoNombrePromocion($id, $estado, $usuario_modificacion);
  /**
   * @param string $nombre
   * @param string $descripcion
   * @param string $estado
   * @param string $idNombrePromocion
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateNombrePromocion($nombre, $descripcion, $estado, $idNombrePromocion, $usuario_modificacion);
  /**
   * @param string $nombre
   * @param string $descripcion
   * @param string $estado
   * @param string $usuarioCreacion
   * @return string
   */
  public function insertNombrePromocion($nombre, $descripcion, $estado, $usuarioCreacion);
  /**
   * @param string $idRol
   * @return string
   */
  public function getRol($idRol);
  /**
   * @return string
   */
  public function getAllRol();
  /**
   * @param string $id
   * @param string $estado
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateEstadoRol($id, $estado, $usuario_modificacion);
  /**
   * @param string $descripcion
   * @param string $modulo
   * @param string $estado
   * @param string $idRol
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateRol($descripcion, $modulo, $estado, $idRol, $usuario_modificacion);
  /**
   * @param string $descripcion
   * @param string $modulo
   * @param string $estado
   * @param string $usuarioCreacion
   * @return string
   */
  public function insertRol($descripcion, $modulo, $estado, $usuarioCreacion);
  /**
   * @param string $idSala
   * @return string
   */
  public function getSala($idSala);
  /**
   * @return string
   */
  public function getAllSala();
  /**
   * @param string $id
   * @param string $estado
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateEstadoSala($id, $estado, $usuario_modificacion);
  /**
   * @param string $nombre
   * @param string $descripcion
   * @param string $capacidad
   * @param string $rutaImagen
   * @param string $estado
   * @param string $idSala
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateSala($nombre, $descripcion, $capacidad, $rutaImagen, $estado, $idSala, $usuario_modificacion);
  /**
   * @param string $nombre
   * @param string $descripcion
   * @param string $capacidad
   * @param string $rutaImagen
   * @param string $estado
   * @param string $usuarioCreacion
   * @return string
   */
  public function insertSala($nombre, $descripcion, $capacidad, $rutaImagen, $estado, $usuarioCreacion);
  /**
   * @param string $idSalaMapa
   * @param string $tipo
   * @return string
   */
  public function getSalaMapa($idSalaMapa, $tipo);
  /**
   * @param string $tipo
   * @return string
   */
  public function getAllSalaMapa($tipo);
  /**
   * @param string $id
   * @param string $estado
   * @param string $usuario_modificacion
   * @param string $tipo
   * @return string
   */
  public function updateEstadoSalaMapa($id, $estado, $usuario_modificacion, $tipo);
  /**
   * @param string $idSalaMapa
   * @param string $idMapa
   * @param string $nombre
   * @param string $rutaImagen
   * @param string $estado
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateSalaMapa($idSalaMapa, $idMapa, $nombre, $rutaImagen, $estado, $usuario_modificacion);
  /**
   * @param string $idSala
   * @param string $nombre
   * @param string $rutaImagen
   * @param string $estado
   * @param string $usuarioCreacion
   * @return string
   */
  public function insertSalaMapa($idSala, $nombre, $rutaImagen, $estado, $usuarioCreacion);
  /**
   * @param string $idTarjeta
   * @return string
   */
  public function getTarjeta($idTarjeta);
  /**
   * @param string $tipo
   * @return string
   */
  public function getAllTarjeta($tipo);
  /**
   * @param string $id
   * @param string $estado
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateEstadoTarjeta($id, $estado, $usuario_modificacion);
  /**
   * @param string $nombre
   * @param string $tipo
   * @param string $estado
   * @param string $idTarjeta
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateTarjeta($nombre, $tipo, $estado, $idTarjeta, $usuario_modificacion);
  /**
   * @param string $nombre
   * @param string $tipo
   * @param string $estado
   * @param string $usuarioCreacion
   * @return string
   */
  public function insertTarjeta($nombre, $tipo, $estado, $usuarioCreacion);
  /**
   * @param string $idTipoEspectaculo
   * @return string
   */
  public function getTipoEspectaculo($idTipoEspectaculo);
  /**
   * @return string
   */
  public function getAllTipoEspectaculo();
  /**
   * @param string $id
   * @param string $estado
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateEstadoTipoEspectaculo($id, $estado, $usuario_modificacion);
  /**
   * @param string $nombre
   * @param string $descripcion
   * @param string $estado
   * @param string $idTipoEspectaculo
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateTipoEspectaculo($nombre, $descripcion, $estado, $idTipoEspectaculo, $usuario_modificacion);
  /**
   * @param string $nombre
   * @param string $descripcion
   * @param string $estado
   * @param string $usuarioCreacion
   * @return string
   */
  public function insertTipoEspectaculo($nombre, $descripcion, $estado, $usuarioCreacion);
  /**
   * @param string $idTipoEvento
   * @return string
   */
  public function getTipoEvento($idTipoEvento);
  /**
   * @return string
   */
  public function getAllTipoEvento();
  /**
   * @param string $id
   * @param string $estado
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateEstadoTipoEvento($id, $estado, $usuario_modificacion);
  /**
   * @param string $nombre
   * @param string $descripcion
   * @param string $estado
   * @param string $idTipoEvento
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateTipoEvento($nombre, $descripcion, $estado, $idTipoEvento, $usuario_modificacion);
  /**
   * @param string $nombre
   * @param string $descripcion
   * @param string $estado
   * @param string $usuarioCreacion
   * @return string
   */
  public function insertTipoEvento($nombre, $descripcion, $estado, $usuarioCreacion);
  /**
   * @param string $idUsuario
   * @return string
   */
  public function getAllCaja($idUsuario);
  /**
   * @param string $idUsuario
   * @return string
   */
  public function getCompraReserva($idUsuario);
  /**
   * @param string $idUsuario
   * @param string $sub_total
   * @param string $donacion
   * @param string $dolares_canjeados
   * @param string $descuento
   * @param string $total
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateCompraReserva($idUsuario, $sub_total, $donacion, $dolares_canjeados, $descuento, $total, $usuario_modificacion);
  /**
   * @param string $idUsuario
   * @param string $tipo
   * @param string $id_tarjeta
   * @param string $id_banco
   * @param string $lote
   * @param string $monto
   * @param string $usuario_modificacion
   * @return string
   */
  public function insertEsperaPago($idUsuario, $tipo, $id_tarjeta, $id_banco, $lote, $monto, $usuario_modificacion);
  /**
   * @param string $idUsuario
   * @return string
   */
  public function getAllEsperaPago($idUsuario);
  /**
   * @param string $idUsuario
   * @param string $idEsperaPago
   * @return string
   */
  public function deleteEsperaPago($idUsuario, $idEsperaPago);
  /**
   * @param string $idUsuarioCliente
   * @return string
   */
  public function getAllPuntos($idUsuarioCliente);
  /**
   * @param string $idUsuario
   * @param string $idUsuarioCliente
   * @param string $donacion
   * @param string $puntos_canjeados
   * @return string
   */
  public function insertDonacion($idUsuario, $idUsuarioCliente, $donacion, $puntos_canjeados);
  /**
   * @param string $idCaja
   * @param string $idUsuario
   * @return string
   */
  public function getCaja($idCaja, $idUsuario);
  /**
   * @param string $idUsuario
   * @param string $idCaja
   * @return string
   */
  public function editarCaja($idUsuario, $idCaja);
  /**
   * @param string $idUsuario
   * @param string $Usuario
   * @return string
   */
  public function abrirCaja($idUsuario, $Usuario);
  /**
   * @param string $idUsuario
   * @return string
   */
  public function actualizarReserva($idUsuario);
  /**
   * @param string $id
   * @param string $estado
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateEstadoCaja($id, $estado, $usuario_modificacion);
  /**
   * @param string $idFacturacion
   * @return string
   */
  public function getFacturacion($idFacturacion);
  /**
   * @param string $idUsuario
   * @return string
   */
  public function getAllFacturacion($idUsuario);
  /**
   * @param string $id
   * @param string $estado
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateEstadoFacturacion($id, $estado, $usuario_modificacion);
  /**
   * @param string $nombres
   * @param string $apellidos
   * @param string $tipo
   * @param string $cedula
   * @param string $razon
   * @param string $direccion
   * @param string $correo
   * @param string $estado
   * @param string $idUsuario
   * @param string $idFacturacion
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateFacturacion($nombres, $apellidos, $tipo, $cedula, $razon, $direccion, $correo, $estado, $idUsuario, $idFacturacion, $usuario_modificacion);
  /**
   * @param string $nombres
   * @param string $apellidos
   * @param string $tipo
   * @param string $cedula
   * @param string $razon
   * @param string $direccion
   * @param string $correo
   * @param string $estado
   * @param string $idUsuario
   * @param string $usuarioCreacion
   * @return string
   */
  public function insertFacturacion($nombres, $apellidos, $tipo, $cedula, $razon, $direccion, $correo, $estado, $idUsuario, $usuarioCreacion);
  /**
   * @param string $idUsuario
   * @return string
   */
  public function getUsuario($idUsuario);
  /**
   * @return string
   */
  public function getAllUsuario();
  /**
   * @param string $idUsuario
   * @param string $estado
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateEstadoUsuario($idUsuario, $estado, $usuario_modificacion);
  /**
   * @param string $nombres
   * @param string $apellidos
   * @param string $usuario
   * @param string $cedula
   * @param string $sexo
   * @param string $correo
   * @param string $celular
   * @param string $contrasena
   * @param string $idPerfil
   * @param string $fechaNacimiento
   * @param string $direccion
   * @param string $estado
   * @param string $idUsuario
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateUsuario($nombres, $apellidos, $usuario, $cedula, $sexo, $correo, $celular, $contrasena, $idPerfil, $fechaNacimiento, $direccion, $estado, $idUsuario, $usuario_modificacion);
  /**
   * @param string $nombres
   * @param string $apellidos
   * @param string $usuario
   * @param string $cedula
   * @param string $sexo
   * @param string $correo
   * @param string $celular
   * @param string $contrasena
   * @param string $idPerfil
   * @param string $fechaNacimiento
   * @param string $direccion
   * @param string $estado
   * @param string $usuarioCreacion
   * @return string
   */
  public function insertUsuario($nombres, $apellidos, $usuario, $cedula, $sexo, $correo, $celular, $contrasena, $idPerfil, $fechaNacimiento, $direccion, $estado, $usuarioCreacion);
  /**
   * @param string $idUsuarioCliente
   * @return string
   */
  public function getUsuarioCliente($idUsuarioCliente);
  /**
   * @return string
   */
  public function getAllUsuarioCliente();
  /**
   * @param string $idUsuarioCliente
   * @param string $estado
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateEstadoUsuarioCliente($idUsuarioCliente, $estado, $usuario_modificacion);
  /**
   * @param string $nombres
   * @param string $apellidos
   * @param string $usuario
   * @param string $cedula
   * @param string $sexo
   * @param string $correo
   * @param string $celular
   * @param string $contrasena
   * @param string $fechaNacimiento
   * @param string $direccion
   * @param string $amigoTeatro
   * @param string $estado
   * @param string $idUsuarioCliente
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateUsuarioCliente($nombres, $apellidos, $usuario, $cedula, $sexo, $correo, $celular, $contrasena, $fechaNacimiento, $direccion, $amigoTeatro, $estado, $idUsuarioCliente, $usuario_modificacion);
  /**
   * @param string $nombres
   * @param string $apellidos
   * @param string $usuario
   * @param string $cedula
   * @param string $sexo
   * @param string $correo
   * @param string $celular
   * @param string $contrasena
   * @param string $fechaNacimiento
   * @param string $direccion
   * @param string $amigoTeatro
   * @param string $estado
   * @param string $usuarioCreacion
   * @return string
   */
  public function insertUsuarioCliente($nombres, $apellidos, $usuario, $cedula, $sexo, $correo, $celular, $contrasena, $fechaNacimiento, $direccion, $amigoTeatro, $estado, $usuarioCreacion);
  /**
   * @param string $idUsuarioEvento
   * @return string
   */
  public function getUsuarioEvento($idUsuarioEvento);
  /**
   * @return string
   */
  public function getAllUsuarioEvento();
  /**
   * @param string $idUsuarioEvento
   * @param string $estado
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateEstadoUsuarioEvento($idUsuarioEvento, $estado, $usuario_modificacion);
  /**
   * @param string $nombres
   * @param string $apellidos
   * @param string $usuario
   * @param string $cedula
   * @param string $sexo
   * @param string $correo
   * @param string $celular
   * @param string $contrasena
   * @param string $idPerfil
   * @param string $fechaNacimiento
   * @param string $direccion
   * @param string $estado
   * @param string $idUsuario
   * @param string $usuario_modificacion
   * @return string
   */
  public function updateUsuarioEvento($nombres, $apellidos, $usuario, $cedula, $sexo, $correo, $celular, $contrasena, $idPerfil, $fechaNacimiento, $direccion, $estado, $idUsuario, $usuario_modificacion);
  /**
   * @param string $nombres
   * @param string $apellidos
   * @param string $usuario
   * @param string $cedula
   * @param string $sexo
   * @param string $correo
   * @param string $celular
   * @param string $contrasena
   * @param string $idPerfil
   * @param string $fechaNacimiento
   * @param string $direccion
   * @param string $estado
   * @param string $usuarioCreacion
   * @return string
   */
  public function insertUsuarioEvento($nombres, $apellidos, $usuario, $cedula, $sexo, $correo, $celular, $contrasena, $idPerfil, $fechaNacimiento, $direccion, $estado, $usuarioCreacion);
  /**
   * @param string $usuario
   * @param string $contrasena
   * @return string
   */
  public function login($usuario, $contrasena);
  /**
   * @param string $celular
   * @param string $correo
   * @return string
   */
  public function generarCodigo($celular, $correo);
  /**
   * @param string $celular
   * @param string $codigo
   * @param string $clave
   * @return string
   */
  public function validadCodigo($celular, $codigo, $clave);
}


class CRUDServerClient implements \CRUDServerIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function getAsiento($idAsiento)
  {
    $this->send_getAsiento($idAsiento);
    return $this->recv_getAsiento();
  }

  public function send_getAsiento($idAsiento)
  {
    $args = new \CRUDServer_getAsiento_args();
    $args->idAsiento = $idAsiento;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAsiento', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAsiento', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAsiento()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAsiento_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAsiento_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAsiento failed: unknown result");
  }

  public function getAllAsiento()
  {
    $this->send_getAllAsiento();
    return $this->recv_getAllAsiento();
  }

  public function send_getAllAsiento()
  {
    $args = new \CRUDServer_getAllAsiento_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllAsiento', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllAsiento', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllAsiento()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAllAsiento_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAllAsiento_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllAsiento failed: unknown result");
  }

  public function updateEstadoAsiento($id, $estado, $usuario_modificacion)
  {
    $this->send_updateEstadoAsiento($id, $estado, $usuario_modificacion);
    return $this->recv_updateEstadoAsiento();
  }

  public function send_updateEstadoAsiento($id, $estado, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateEstadoAsiento_args();
    $args->id = $id;
    $args->estado = $estado;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoAsiento', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoAsiento', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoAsiento()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateEstadoAsiento_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateEstadoAsiento_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoAsiento failed: unknown result");
  }

  public function updateAsiento($numero, $fila, $lateral, $estado, $idAsiento, $usuario_modificacion)
  {
    $this->send_updateAsiento($numero, $fila, $lateral, $estado, $idAsiento, $usuario_modificacion);
    return $this->recv_updateAsiento();
  }

  public function send_updateAsiento($numero, $fila, $lateral, $estado, $idAsiento, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateAsiento_args();
    $args->numero = $numero;
    $args->fila = $fila;
    $args->lateral = $lateral;
    $args->estado = $estado;
    $args->idAsiento = $idAsiento;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateAsiento', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateAsiento', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateAsiento()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateAsiento_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateAsiento_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateAsiento failed: unknown result");
  }

  public function insertAsiento($numero, $fila, $lateral, $estado, $usuarioCreacion)
  {
    $this->send_insertAsiento($numero, $fila, $lateral, $estado, $usuarioCreacion);
    return $this->recv_insertAsiento();
  }

  public function send_insertAsiento($numero, $fila, $lateral, $estado, $usuarioCreacion)
  {
    $args = new \CRUDServer_insertAsiento_args();
    $args->numero = $numero;
    $args->fila = $fila;
    $args->lateral = $lateral;
    $args->estado = $estado;
    $args->usuarioCreacion = $usuarioCreacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertAsiento', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertAsiento', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertAsiento()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_insertAsiento_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_insertAsiento_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertAsiento failed: unknown result");
  }

  public function getBanco($idBanco)
  {
    $this->send_getBanco($idBanco);
    return $this->recv_getBanco();
  }

  public function send_getBanco($idBanco)
  {
    $args = new \CRUDServer_getBanco_args();
    $args->idBanco = $idBanco;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getBanco', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getBanco', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getBanco()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getBanco_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getBanco_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getBanco failed: unknown result");
  }

  public function getAllBanco($tipo)
  {
    $this->send_getAllBanco($tipo);
    return $this->recv_getAllBanco();
  }

  public function send_getAllBanco($tipo)
  {
    $args = new \CRUDServer_getAllBanco_args();
    $args->tipo = $tipo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllBanco', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllBanco', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllBanco()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAllBanco_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAllBanco_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllBanco failed: unknown result");
  }

  public function updateEstadoBanco($id, $estado, $usuario_modificacion)
  {
    $this->send_updateEstadoBanco($id, $estado, $usuario_modificacion);
    return $this->recv_updateEstadoBanco();
  }

  public function send_updateEstadoBanco($id, $estado, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateEstadoBanco_args();
    $args->id = $id;
    $args->estado = $estado;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoBanco', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoBanco', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoBanco()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateEstadoBanco_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateEstadoBanco_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoBanco failed: unknown result");
  }

  public function updateBanco($nombre, $estado, $idBanco, $usuario_modificacion)
  {
    $this->send_updateBanco($nombre, $estado, $idBanco, $usuario_modificacion);
    return $this->recv_updateBanco();
  }

  public function send_updateBanco($nombre, $estado, $idBanco, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateBanco_args();
    $args->nombre = $nombre;
    $args->estado = $estado;
    $args->idBanco = $idBanco;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateBanco', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateBanco', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateBanco()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateBanco_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateBanco_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateBanco failed: unknown result");
  }

  public function insertBanco($nombre, $estado, $usuarioCreacion)
  {
    $this->send_insertBanco($nombre, $estado, $usuarioCreacion);
    return $this->recv_insertBanco();
  }

  public function send_insertBanco($nombre, $estado, $usuarioCreacion)
  {
    $args = new \CRUDServer_insertBanco_args();
    $args->nombre = $nombre;
    $args->estado = $estado;
    $args->usuarioCreacion = $usuarioCreacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertBanco', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertBanco', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertBanco()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_insertBanco_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_insertBanco_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertBanco failed: unknown result");
  }

  public function getFichaArtistica($idficha)
  {
    $this->send_getFichaArtistica($idficha);
    return $this->recv_getFichaArtistica();
  }

  public function send_getFichaArtistica($idficha)
  {
    $args = new \CRUDServer_getFichaArtistica_args();
    $args->idficha = $idficha;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getFichaArtistica', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getFichaArtistica', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getFichaArtistica()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getFichaArtistica_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getFichaArtistica_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getFichaArtistica failed: unknown result");
  }

  public function deleteFichaArtistica($idficha)
  {
    $this->send_deleteFichaArtistica($idficha);
    return $this->recv_deleteFichaArtistica();
  }

  public function send_deleteFichaArtistica($idficha)
  {
    $args = new \CRUDServer_deleteFichaArtistica_args();
    $args->idficha = $idficha;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deleteFichaArtistica', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deleteFichaArtistica', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deleteFichaArtistica()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_deleteFichaArtistica_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_deleteFichaArtistica_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("deleteFichaArtistica failed: unknown result");
  }

  public function getAllFichaArtistica($idEvento)
  {
    $this->send_getAllFichaArtistica($idEvento);
    return $this->recv_getAllFichaArtistica();
  }

  public function send_getAllFichaArtistica($idEvento)
  {
    $args = new \CRUDServer_getAllFichaArtistica_args();
    $args->idEvento = $idEvento;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllFichaArtistica', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllFichaArtistica', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllFichaArtistica()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAllFichaArtistica_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAllFichaArtistica_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllFichaArtistica failed: unknown result");
  }

  public function updateFichaArtistica($titulo, $descripcion, $idficha, $usuario_modificacion)
  {
    $this->send_updateFichaArtistica($titulo, $descripcion, $idficha, $usuario_modificacion);
    return $this->recv_updateFichaArtistica();
  }

  public function send_updateFichaArtistica($titulo, $descripcion, $idficha, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateFichaArtistica_args();
    $args->titulo = $titulo;
    $args->descripcion = $descripcion;
    $args->idficha = $idficha;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateFichaArtistica', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateFichaArtistica', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateFichaArtistica()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateFichaArtistica_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateFichaArtistica_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateFichaArtistica failed: unknown result");
  }

  public function insertFichaArtistica($idEvento, $titulo, $descripcion, $usuarioCreacion)
  {
    $this->send_insertFichaArtistica($idEvento, $titulo, $descripcion, $usuarioCreacion);
    return $this->recv_insertFichaArtistica();
  }

  public function send_insertFichaArtistica($idEvento, $titulo, $descripcion, $usuarioCreacion)
  {
    $args = new \CRUDServer_insertFichaArtistica_args();
    $args->idEvento = $idEvento;
    $args->titulo = $titulo;
    $args->descripcion = $descripcion;
    $args->usuarioCreacion = $usuarioCreacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertFichaArtistica', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertFichaArtistica', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertFichaArtistica()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_insertFichaArtistica_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_insertFichaArtistica_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertFichaArtistica failed: unknown result");
  }

  public function getBancoTarjeta($idBancoTarjeta)
  {
    $this->send_getBancoTarjeta($idBancoTarjeta);
    return $this->recv_getBancoTarjeta();
  }

  public function send_getBancoTarjeta($idBancoTarjeta)
  {
    $args = new \CRUDServer_getBancoTarjeta_args();
    $args->idBancoTarjeta = $idBancoTarjeta;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getBancoTarjeta', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getBancoTarjeta', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getBancoTarjeta()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getBancoTarjeta_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getBancoTarjeta_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getBancoTarjeta failed: unknown result");
  }

  public function getAllBancoTarjeta()
  {
    $this->send_getAllBancoTarjeta();
    return $this->recv_getAllBancoTarjeta();
  }

  public function send_getAllBancoTarjeta()
  {
    $args = new \CRUDServer_getAllBancoTarjeta_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllBancoTarjeta', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllBancoTarjeta', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllBancoTarjeta()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAllBancoTarjeta_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAllBancoTarjeta_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllBancoTarjeta failed: unknown result");
  }

  public function updateEstadoBancoTarjeta($id, $estado, $usuario_modificacion)
  {
    $this->send_updateEstadoBancoTarjeta($id, $estado, $usuario_modificacion);
    return $this->recv_updateEstadoBancoTarjeta();
  }

  public function send_updateEstadoBancoTarjeta($id, $estado, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateEstadoBancoTarjeta_args();
    $args->id = $id;
    $args->estado = $estado;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoBancoTarjeta', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoBancoTarjeta', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoBancoTarjeta()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateEstadoBancoTarjeta_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateEstadoBancoTarjeta_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoBancoTarjeta failed: unknown result");
  }

  public function updateBancoTarjeta($idBanco, $idTarjeta, $descuento, $estado, $idBancoTarjeta, $usuario_modificacion)
  {
    $this->send_updateBancoTarjeta($idBanco, $idTarjeta, $descuento, $estado, $idBancoTarjeta, $usuario_modificacion);
    return $this->recv_updateBancoTarjeta();
  }

  public function send_updateBancoTarjeta($idBanco, $idTarjeta, $descuento, $estado, $idBancoTarjeta, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateBancoTarjeta_args();
    $args->idBanco = $idBanco;
    $args->idTarjeta = $idTarjeta;
    $args->descuento = $descuento;
    $args->estado = $estado;
    $args->idBancoTarjeta = $idBancoTarjeta;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateBancoTarjeta', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateBancoTarjeta', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateBancoTarjeta()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateBancoTarjeta_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateBancoTarjeta_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateBancoTarjeta failed: unknown result");
  }

  public function insertBancoTarjeta($idBanco, $idTarjeta, $descuento, $estado, $usuarioCreacion)
  {
    $this->send_insertBancoTarjeta($idBanco, $idTarjeta, $descuento, $estado, $usuarioCreacion);
    return $this->recv_insertBancoTarjeta();
  }

  public function send_insertBancoTarjeta($idBanco, $idTarjeta, $descuento, $estado, $usuarioCreacion)
  {
    $args = new \CRUDServer_insertBancoTarjeta_args();
    $args->idBanco = $idBanco;
    $args->idTarjeta = $idTarjeta;
    $args->descuento = $descuento;
    $args->estado = $estado;
    $args->usuarioCreacion = $usuarioCreacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertBancoTarjeta', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertBancoTarjeta', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertBancoTarjeta()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_insertBancoTarjeta_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_insertBancoTarjeta_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertBancoTarjeta failed: unknown result");
  }

  public function getCategoria($idCategoria)
  {
    $this->send_getCategoria($idCategoria);
    return $this->recv_getCategoria();
  }

  public function send_getCategoria($idCategoria)
  {
    $args = new \CRUDServer_getCategoria_args();
    $args->idCategoria = $idCategoria;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCategoria', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCategoria', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCategoria()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getCategoria_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getCategoria_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getCategoria failed: unknown result");
  }

  public function getAllCategoria()
  {
    $this->send_getAllCategoria();
    return $this->recv_getAllCategoria();
  }

  public function send_getAllCategoria()
  {
    $args = new \CRUDServer_getAllCategoria_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllCategoria', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllCategoria', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllCategoria()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAllCategoria_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAllCategoria_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllCategoria failed: unknown result");
  }

  public function updateEstadoCategoria($id, $estado, $usuario_modificacion)
  {
    $this->send_updateEstadoCategoria($id, $estado, $usuario_modificacion);
    return $this->recv_updateEstadoCategoria();
  }

  public function send_updateEstadoCategoria($id, $estado, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateEstadoCategoria_args();
    $args->id = $id;
    $args->estado = $estado;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoCategoria', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoCategoria', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoCategoria()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateEstadoCategoria_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateEstadoCategoria_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoCategoria failed: unknown result");
  }

  public function updateCategoria($nombre, $descripcion, $estado, $idCategoria, $usuario_modificacion)
  {
    $this->send_updateCategoria($nombre, $descripcion, $estado, $idCategoria, $usuario_modificacion);
    return $this->recv_updateCategoria();
  }

  public function send_updateCategoria($nombre, $descripcion, $estado, $idCategoria, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateCategoria_args();
    $args->nombre = $nombre;
    $args->descripcion = $descripcion;
    $args->estado = $estado;
    $args->idCategoria = $idCategoria;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateCategoria', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateCategoria', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateCategoria()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateCategoria_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateCategoria_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateCategoria failed: unknown result");
  }

  public function insertCategoria($nombre, $descripcion, $estado, $usuarioCreacion)
  {
    $this->send_insertCategoria($nombre, $descripcion, $estado, $usuarioCreacion);
    return $this->recv_insertCategoria();
  }

  public function send_insertCategoria($nombre, $descripcion, $estado, $usuarioCreacion)
  {
    $args = new \CRUDServer_insertCategoria_args();
    $args->nombre = $nombre;
    $args->descripcion = $descripcion;
    $args->estado = $estado;
    $args->usuarioCreacion = $usuarioCreacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertCategoria', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertCategoria', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertCategoria()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_insertCategoria_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_insertCategoria_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertCategoria failed: unknown result");
  }

  public function getImagen($idImagen, $tipo)
  {
    $this->send_getImagen($idImagen, $tipo);
    return $this->recv_getImagen();
  }

  public function send_getImagen($idImagen, $tipo)
  {
    $args = new \CRUDServer_getImagen_args();
    $args->idImagen = $idImagen;
    $args->tipo = $tipo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getImagen', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getImagen', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getImagen()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getImagen_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getImagen_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getImagen failed: unknown result");
  }

  public function getAllImagen($tipo)
  {
    $this->send_getAllImagen($tipo);
    return $this->recv_getAllImagen();
  }

  public function send_getAllImagen($tipo)
  {
    $args = new \CRUDServer_getAllImagen_args();
    $args->tipo = $tipo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllImagen', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllImagen', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllImagen()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAllImagen_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAllImagen_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllImagen failed: unknown result");
  }

  public function updateEstadoImagen($id, $tipo, $estado, $usuario_modificacion)
  {
    $this->send_updateEstadoImagen($id, $tipo, $estado, $usuario_modificacion);
    return $this->recv_updateEstadoImagen();
  }

  public function send_updateEstadoImagen($id, $tipo, $estado, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateEstadoImagen_args();
    $args->id = $id;
    $args->tipo = $tipo;
    $args->estado = $estado;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoImagen', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoImagen', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoImagen()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateEstadoImagen_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateEstadoImagen_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoImagen failed: unknown result");
  }

  public function updateImagen($nombre, $descripcion, $tipo, $estado, $idImagen, $usuario_modificacion)
  {
    $this->send_updateImagen($nombre, $descripcion, $tipo, $estado, $idImagen, $usuario_modificacion);
    return $this->recv_updateImagen();
  }

  public function send_updateImagen($nombre, $descripcion, $tipo, $estado, $idImagen, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateImagen_args();
    $args->nombre = $nombre;
    $args->descripcion = $descripcion;
    $args->tipo = $tipo;
    $args->estado = $estado;
    $args->idImagen = $idImagen;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateImagen', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateImagen', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateImagen()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateImagen_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateImagen_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateImagen failed: unknown result");
  }

  public function insertImagen($nombre, $descripcion, $tipo, $estado, $usuarioCreacion)
  {
    $this->send_insertImagen($nombre, $descripcion, $tipo, $estado, $usuarioCreacion);
    return $this->recv_insertImagen();
  }

  public function send_insertImagen($nombre, $descripcion, $tipo, $estado, $usuarioCreacion)
  {
    $args = new \CRUDServer_insertImagen_args();
    $args->nombre = $nombre;
    $args->descripcion = $descripcion;
    $args->tipo = $tipo;
    $args->estado = $estado;
    $args->usuarioCreacion = $usuarioCreacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertImagen', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertImagen', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertImagen()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_insertImagen_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_insertImagen_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertImagen failed: unknown result");
  }

  public function getClasificacion($idClasificacion)
  {
    $this->send_getClasificacion($idClasificacion);
    return $this->recv_getClasificacion();
  }

  public function send_getClasificacion($idClasificacion)
  {
    $args = new \CRUDServer_getClasificacion_args();
    $args->idClasificacion = $idClasificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getClasificacion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getClasificacion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getClasificacion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getClasificacion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getClasificacion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getClasificacion failed: unknown result");
  }

  public function getAllClasificacion()
  {
    $this->send_getAllClasificacion();
    return $this->recv_getAllClasificacion();
  }

  public function send_getAllClasificacion()
  {
    $args = new \CRUDServer_getAllClasificacion_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllClasificacion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllClasificacion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllClasificacion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAllClasificacion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAllClasificacion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllClasificacion failed: unknown result");
  }

  public function updateEstadoClasificacion($id, $estado, $usuario_modificacion)
  {
    $this->send_updateEstadoClasificacion($id, $estado, $usuario_modificacion);
    return $this->recv_updateEstadoClasificacion();
  }

  public function send_updateEstadoClasificacion($id, $estado, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateEstadoClasificacion_args();
    $args->id = $id;
    $args->estado = $estado;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoClasificacion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoClasificacion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoClasificacion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateEstadoClasificacion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateEstadoClasificacion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoClasificacion failed: unknown result");
  }

  public function updateClasificacion($nombre, $descripcion, $estado, $idClasificacion, $usuario_modificacion)
  {
    $this->send_updateClasificacion($nombre, $descripcion, $estado, $idClasificacion, $usuario_modificacion);
    return $this->recv_updateClasificacion();
  }

  public function send_updateClasificacion($nombre, $descripcion, $estado, $idClasificacion, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateClasificacion_args();
    $args->nombre = $nombre;
    $args->descripcion = $descripcion;
    $args->estado = $estado;
    $args->idClasificacion = $idClasificacion;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateClasificacion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateClasificacion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateClasificacion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateClasificacion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateClasificacion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateClasificacion failed: unknown result");
  }

  public function insertClasificacion($nombre, $descripcion, $estado, $usuarioCreacion)
  {
    $this->send_insertClasificacion($nombre, $descripcion, $estado, $usuarioCreacion);
    return $this->recv_insertClasificacion();
  }

  public function send_insertClasificacion($nombre, $descripcion, $estado, $usuarioCreacion)
  {
    $args = new \CRUDServer_insertClasificacion_args();
    $args->nombre = $nombre;
    $args->descripcion = $descripcion;
    $args->estado = $estado;
    $args->usuarioCreacion = $usuarioCreacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertClasificacion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertClasificacion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertClasificacion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_insertClasificacion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_insertClasificacion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertClasificacion failed: unknown result");
  }

  public function getCodigoPromocional($idCodigoPromocional)
  {
    $this->send_getCodigoPromocional($idCodigoPromocional);
    return $this->recv_getCodigoPromocional();
  }

  public function send_getCodigoPromocional($idCodigoPromocional)
  {
    $args = new \CRUDServer_getCodigoPromocional_args();
    $args->idCodigoPromocional = $idCodigoPromocional;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCodigoPromocional', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCodigoPromocional', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCodigoPromocional()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getCodigoPromocional_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getCodigoPromocional_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getCodigoPromocional failed: unknown result");
  }

  public function getAllCodigoPromocional()
  {
    $this->send_getAllCodigoPromocional();
    return $this->recv_getAllCodigoPromocional();
  }

  public function send_getAllCodigoPromocional()
  {
    $args = new \CRUDServer_getAllCodigoPromocional_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllCodigoPromocional', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllCodigoPromocional', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllCodigoPromocional()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAllCodigoPromocional_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAllCodigoPromocional_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllCodigoPromocional failed: unknown result");
  }

  public function updateEstadoCodigoPromocional($id, $estado, $usuario_modificacion)
  {
    $this->send_updateEstadoCodigoPromocional($id, $estado, $usuario_modificacion);
    return $this->recv_updateEstadoCodigoPromocional();
  }

  public function send_updateEstadoCodigoPromocional($id, $estado, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateEstadoCodigoPromocional_args();
    $args->id = $id;
    $args->estado = $estado;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoCodigoPromocional', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoCodigoPromocional', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoCodigoPromocional()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateEstadoCodigoPromocional_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateEstadoCodigoPromocional_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoCodigoPromocional failed: unknown result");
  }

  public function updateCodigoPromocional($nombre, $codigo, $descuento, $estado, $idCodigoPromocional, $usuario_modificacion)
  {
    $this->send_updateCodigoPromocional($nombre, $codigo, $descuento, $estado, $idCodigoPromocional, $usuario_modificacion);
    return $this->recv_updateCodigoPromocional();
  }

  public function send_updateCodigoPromocional($nombre, $codigo, $descuento, $estado, $idCodigoPromocional, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateCodigoPromocional_args();
    $args->nombre = $nombre;
    $args->codigo = $codigo;
    $args->descuento = $descuento;
    $args->estado = $estado;
    $args->idCodigoPromocional = $idCodigoPromocional;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateCodigoPromocional', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateCodigoPromocional', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateCodigoPromocional()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateCodigoPromocional_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateCodigoPromocional_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateCodigoPromocional failed: unknown result");
  }

  public function insertCodigoPromocional($nombre, $codigo, $descuento, $estado, $usuarioCreacion)
  {
    $this->send_insertCodigoPromocional($nombre, $codigo, $descuento, $estado, $usuarioCreacion);
    return $this->recv_insertCodigoPromocional();
  }

  public function send_insertCodigoPromocional($nombre, $codigo, $descuento, $estado, $usuarioCreacion)
  {
    $args = new \CRUDServer_insertCodigoPromocional_args();
    $args->nombre = $nombre;
    $args->codigo = $codigo;
    $args->descuento = $descuento;
    $args->estado = $estado;
    $args->usuarioCreacion = $usuarioCreacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertCodigoPromocional', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertCodigoPromocional', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertCodigoPromocional()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_insertCodigoPromocional_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_insertCodigoPromocional_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertCodigoPromocional failed: unknown result");
  }

  public function getDistribucion($idDistribucion)
  {
    $this->send_getDistribucion($idDistribucion);
    return $this->recv_getDistribucion();
  }

  public function send_getDistribucion($idDistribucion)
  {
    $args = new \CRUDServer_getDistribucion_args();
    $args->idDistribucion = $idDistribucion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getDistribucion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getDistribucion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getDistribucion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getDistribucion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getDistribucion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getDistribucion failed: unknown result");
  }

  public function getAllDistribucion()
  {
    $this->send_getAllDistribucion();
    return $this->recv_getAllDistribucion();
  }

  public function send_getAllDistribucion()
  {
    $args = new \CRUDServer_getAllDistribucion_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllDistribucion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllDistribucion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllDistribucion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAllDistribucion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAllDistribucion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllDistribucion failed: unknown result");
  }

  public function updateEstadoDistribucion($id, $estado, $usuario_modificacion)
  {
    $this->send_updateEstadoDistribucion($id, $estado, $usuario_modificacion);
    return $this->recv_updateEstadoDistribucion();
  }

  public function send_updateEstadoDistribucion($id, $estado, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateEstadoDistribucion_args();
    $args->id = $id;
    $args->estado = $estado;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoDistribucion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoDistribucion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoDistribucion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateEstadoDistribucion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateEstadoDistribucion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoDistribucion failed: unknown result");
  }

  public function updateDistribucion($idEvento, $idPlatea, $idAsiento, $tipo, $estado, $idDistribucion, $usuario_modificacion)
  {
    $this->send_updateDistribucion($idEvento, $idPlatea, $idAsiento, $tipo, $estado, $idDistribucion, $usuario_modificacion);
    return $this->recv_updateDistribucion();
  }

  public function send_updateDistribucion($idEvento, $idPlatea, $idAsiento, $tipo, $estado, $idDistribucion, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateDistribucion_args();
    $args->idEvento = $idEvento;
    $args->idPlatea = $idPlatea;
    $args->idAsiento = $idAsiento;
    $args->tipo = $tipo;
    $args->estado = $estado;
    $args->idDistribucion = $idDistribucion;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateDistribucion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateDistribucion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateDistribucion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateDistribucion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateDistribucion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateDistribucion failed: unknown result");
  }

  public function insertDistribucion($idEvento, $idPlatea, $idAsiento, $tipo, $estado, $usuarioCreacion)
  {
    $this->send_insertDistribucion($idEvento, $idPlatea, $idAsiento, $tipo, $estado, $usuarioCreacion);
    return $this->recv_insertDistribucion();
  }

  public function send_insertDistribucion($idEvento, $idPlatea, $idAsiento, $tipo, $estado, $usuarioCreacion)
  {
    $args = new \CRUDServer_insertDistribucion_args();
    $args->idEvento = $idEvento;
    $args->idPlatea = $idPlatea;
    $args->idAsiento = $idAsiento;
    $args->tipo = $tipo;
    $args->estado = $estado;
    $args->usuarioCreacion = $usuarioCreacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertDistribucion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertDistribucion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertDistribucion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_insertDistribucion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_insertDistribucion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertDistribucion failed: unknown result");
  }

  public function getEvento($idEvento, $tipoEvento)
  {
    $this->send_getEvento($idEvento, $tipoEvento);
    return $this->recv_getEvento();
  }

  public function send_getEvento($idEvento, $tipoEvento)
  {
    $args = new \CRUDServer_getEvento_args();
    $args->idEvento = $idEvento;
    $args->tipoEvento = $tipoEvento;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getEvento', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getEvento', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getEvento()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getEvento_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getEvento_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getEvento failed: unknown result");
  }

  public function getEvento_sinopsis($idEvento, $tipoEvento)
  {
    $this->send_getEvento_sinopsis($idEvento, $tipoEvento);
    return $this->recv_getEvento_sinopsis();
  }

  public function send_getEvento_sinopsis($idEvento, $tipoEvento)
  {
    $args = new \CRUDServer_getEvento_sinopsis_args();
    $args->idEvento = $idEvento;
    $args->tipoEvento = $tipoEvento;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getEvento_sinopsis', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getEvento_sinopsis', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getEvento_sinopsis()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getEvento_sinopsis_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getEvento_sinopsis_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getEvento_sinopsis failed: unknown result");
  }

  public function getEvento_multimedia($idEvento, $tipoEvento)
  {
    $this->send_getEvento_multimedia($idEvento, $tipoEvento);
    return $this->recv_getEvento_multimedia();
  }

  public function send_getEvento_multimedia($idEvento, $tipoEvento)
  {
    $args = new \CRUDServer_getEvento_multimedia_args();
    $args->idEvento = $idEvento;
    $args->tipoEvento = $tipoEvento;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getEvento_multimedia', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getEvento_multimedia', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getEvento_multimedia()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getEvento_multimedia_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getEvento_multimedia_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getEvento_multimedia failed: unknown result");
  }

  public function getAllEvento($tipoEvento)
  {
    $this->send_getAllEvento($tipoEvento);
    return $this->recv_getAllEvento();
  }

  public function send_getAllEvento($tipoEvento)
  {
    $args = new \CRUDServer_getAllEvento_args();
    $args->tipoEvento = $tipoEvento;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllEvento', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllEvento', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllEvento()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAllEvento_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAllEvento_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllEvento failed: unknown result");
  }

  public function updateEstadoEvento($id, $estado, $usuario_modificacion)
  {
    $this->send_updateEstadoEvento($id, $estado, $usuario_modificacion);
    return $this->recv_updateEstadoEvento();
  }

  public function send_updateEstadoEvento($id, $estado, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateEstadoEvento_args();
    $args->id = $id;
    $args->estado = $estado;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoEvento', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoEvento', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoEvento()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateEstadoEvento_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateEstadoEvento_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoEvento failed: unknown result");
  }

  public function updateEvento_informacion($nombre, $duracion, $fechaInicial, $fechaFinal, $idProductora, $idSalaMapa, $idTipoEvento, $idTipoEspectaculo, $idCategoria, $idClasificacion, $idProcedencia, $aforo, $tipoEvento, $estado, $idEvento, $preventa, $usuario_modificacion)
  {
    $this->send_updateEvento_informacion($nombre, $duracion, $fechaInicial, $fechaFinal, $idProductora, $idSalaMapa, $idTipoEvento, $idTipoEspectaculo, $idCategoria, $idClasificacion, $idProcedencia, $aforo, $tipoEvento, $estado, $idEvento, $preventa, $usuario_modificacion);
    return $this->recv_updateEvento_informacion();
  }

  public function send_updateEvento_informacion($nombre, $duracion, $fechaInicial, $fechaFinal, $idProductora, $idSalaMapa, $idTipoEvento, $idTipoEspectaculo, $idCategoria, $idClasificacion, $idProcedencia, $aforo, $tipoEvento, $estado, $idEvento, $preventa, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateEvento_informacion_args();
    $args->nombre = $nombre;
    $args->duracion = $duracion;
    $args->fechaInicial = $fechaInicial;
    $args->fechaFinal = $fechaFinal;
    $args->idProductora = $idProductora;
    $args->idSalaMapa = $idSalaMapa;
    $args->idTipoEvento = $idTipoEvento;
    $args->idTipoEspectaculo = $idTipoEspectaculo;
    $args->idCategoria = $idCategoria;
    $args->idClasificacion = $idClasificacion;
    $args->idProcedencia = $idProcedencia;
    $args->aforo = $aforo;
    $args->tipoEvento = $tipoEvento;
    $args->estado = $estado;
    $args->idEvento = $idEvento;
    $args->preventa = $preventa;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEvento_informacion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEvento_informacion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEvento_informacion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateEvento_informacion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateEvento_informacion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEvento_informacion failed: unknown result");
  }

  public function updateEvento_sinopsis($nombre, $tipoEvento, $idEvento, $usuario_modificacion)
  {
    $this->send_updateEvento_sinopsis($nombre, $tipoEvento, $idEvento, $usuario_modificacion);
    return $this->recv_updateEvento_sinopsis();
  }

  public function send_updateEvento_sinopsis($nombre, $tipoEvento, $idEvento, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateEvento_sinopsis_args();
    $args->nombre = $nombre;
    $args->tipoEvento = $tipoEvento;
    $args->idEvento = $idEvento;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEvento_sinopsis', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEvento_sinopsis', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEvento_sinopsis()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateEvento_sinopsis_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateEvento_sinopsis_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEvento_sinopsis failed: unknown result");
  }

  public function updateEvento_multimedia($video, $tipoEvento, $idEvento, $usuario_modificacion)
  {
    $this->send_updateEvento_multimedia($video, $tipoEvento, $idEvento, $usuario_modificacion);
    return $this->recv_updateEvento_multimedia();
  }

  public function send_updateEvento_multimedia($video, $tipoEvento, $idEvento, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateEvento_multimedia_args();
    $args->video = $video;
    $args->tipoEvento = $tipoEvento;
    $args->idEvento = $idEvento;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEvento_multimedia', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEvento_multimedia', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEvento_multimedia()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateEvento_multimedia_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateEvento_multimedia_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEvento_multimedia failed: unknown result");
  }

  public function insertEvento($nombre, $duracion, $fechaInicial, $fechaFinal, $idProductora, $idSalaMapa, $idTipoEvento, $idTipoEspectaculo, $idCategoria, $idClasificacion, $idProcedencia, $aforo, $productora, $tipoEvento, $estado, $usuarioCreacion)
  {
    $this->send_insertEvento($nombre, $duracion, $fechaInicial, $fechaFinal, $idProductora, $idSalaMapa, $idTipoEvento, $idTipoEspectaculo, $idCategoria, $idClasificacion, $idProcedencia, $aforo, $productora, $tipoEvento, $estado, $usuarioCreacion);
    return $this->recv_insertEvento();
  }

  public function send_insertEvento($nombre, $duracion, $fechaInicial, $fechaFinal, $idProductora, $idSalaMapa, $idTipoEvento, $idTipoEspectaculo, $idCategoria, $idClasificacion, $idProcedencia, $aforo, $productora, $tipoEvento, $estado, $usuarioCreacion)
  {
    $args = new \CRUDServer_insertEvento_args();
    $args->nombre = $nombre;
    $args->duracion = $duracion;
    $args->fechaInicial = $fechaInicial;
    $args->fechaFinal = $fechaFinal;
    $args->idProductora = $idProductora;
    $args->idSalaMapa = $idSalaMapa;
    $args->idTipoEvento = $idTipoEvento;
    $args->idTipoEspectaculo = $idTipoEspectaculo;
    $args->idCategoria = $idCategoria;
    $args->idClasificacion = $idClasificacion;
    $args->idProcedencia = $idProcedencia;
    $args->aforo = $aforo;
    $args->productora = $productora;
    $args->tipoEvento = $tipoEvento;
    $args->estado = $estado;
    $args->usuarioCreacion = $usuarioCreacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertEvento', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertEvento', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertEvento()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_insertEvento_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_insertEvento_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertEvento failed: unknown result");
  }

  public function getEventoDestacado()
  {
    $this->send_getEventoDestacado();
    return $this->recv_getEventoDestacado();
  }

  public function send_getEventoDestacado()
  {
    $args = new \CRUDServer_getEventoDestacado_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getEventoDestacado', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getEventoDestacado', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getEventoDestacado()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getEventoDestacado_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getEventoDestacado_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getEventoDestacado failed: unknown result");
  }

  public function updateEventoDestacado($id, $usuario_modificacion)
  {
    $this->send_updateEventoDestacado($id, $usuario_modificacion);
    return $this->recv_updateEventoDestacado();
  }

  public function send_updateEventoDestacado($id, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateEventoDestacado_args();
    $args->id = $id;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEventoDestacado', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEventoDestacado', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEventoDestacado()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateEventoDestacado_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateEventoDestacado_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEventoDestacado failed: unknown result");
  }

  public function getContacto()
  {
    $this->send_getContacto();
    return $this->recv_getContacto();
  }

  public function send_getContacto()
  {
    $args = new \CRUDServer_getContacto_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getContacto', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getContacto', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getContacto()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getContacto_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getContacto_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getContacto failed: unknown result");
  }

  public function updateContacto($nombre, $celular, $telefono, $direccion, $correo, $pagina, $facebook, $instagram, $twitter, $usuario_modificacion)
  {
    $this->send_updateContacto($nombre, $celular, $telefono, $direccion, $correo, $pagina, $facebook, $instagram, $twitter, $usuario_modificacion);
    return $this->recv_updateContacto();
  }

  public function send_updateContacto($nombre, $celular, $telefono, $direccion, $correo, $pagina, $facebook, $instagram, $twitter, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateContacto_args();
    $args->nombre = $nombre;
    $args->celular = $celular;
    $args->telefono = $telefono;
    $args->direccion = $direccion;
    $args->correo = $correo;
    $args->pagina = $pagina;
    $args->facebook = $facebook;
    $args->instagram = $instagram;
    $args->twitter = $twitter;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateContacto', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateContacto', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateContacto()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateContacto_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateContacto_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateContacto failed: unknown result");
  }

  public function getFundacion()
  {
    $this->send_getFundacion();
    return $this->recv_getFundacion();
  }

  public function send_getFundacion()
  {
    $args = new \CRUDServer_getFundacion_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getFundacion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getFundacion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getFundacion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getFundacion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getFundacion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getFundacion failed: unknown result");
  }

  public function updateFundacion($nombre, $descripcion1, $descripcion2, $precio1, $precio2, $precio3, $precio4, $precio5, $precio6, $usuario_modificacion)
  {
    $this->send_updateFundacion($nombre, $descripcion1, $descripcion2, $precio1, $precio2, $precio3, $precio4, $precio5, $precio6, $usuario_modificacion);
    return $this->recv_updateFundacion();
  }

  public function send_updateFundacion($nombre, $descripcion1, $descripcion2, $precio1, $precio2, $precio3, $precio4, $precio5, $precio6, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateFundacion_args();
    $args->nombre = $nombre;
    $args->descripcion1 = $descripcion1;
    $args->descripcion2 = $descripcion2;
    $args->precio1 = $precio1;
    $args->precio2 = $precio2;
    $args->precio3 = $precio3;
    $args->precio4 = $precio4;
    $args->precio5 = $precio5;
    $args->precio6 = $precio6;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateFundacion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateFundacion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateFundacion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateFundacion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateFundacion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateFundacion failed: unknown result");
  }

  public function getAllBeneficios()
  {
    $this->send_getAllBeneficios();
    return $this->recv_getAllBeneficios();
  }

  public function send_getAllBeneficios()
  {
    $args = new \CRUDServer_getAllBeneficios_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllBeneficios', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllBeneficios', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllBeneficios()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAllBeneficios_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAllBeneficios_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllBeneficios failed: unknown result");
  }

  public function getBeneficio($id)
  {
    $this->send_getBeneficio($id);
    return $this->recv_getBeneficio();
  }

  public function send_getBeneficio($id)
  {
    $args = new \CRUDServer_getBeneficio_args();
    $args->id = $id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getBeneficio', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getBeneficio', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getBeneficio()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getBeneficio_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getBeneficio_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getBeneficio failed: unknown result");
  }

  public function updateBeneficio($id, $beneficio, $usuario_modificacion)
  {
    $this->send_updateBeneficio($id, $beneficio, $usuario_modificacion);
    return $this->recv_updateBeneficio();
  }

  public function send_updateBeneficio($id, $beneficio, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateBeneficio_args();
    $args->id = $id;
    $args->beneficio = $beneficio;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateBeneficio', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateBeneficio', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateBeneficio()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateBeneficio_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateBeneficio_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateBeneficio failed: unknown result");
  }

  public function updateEstadoBeneficio($id, $estado, $usuario_modificacion)
  {
    $this->send_updateEstadoBeneficio($id, $estado, $usuario_modificacion);
    return $this->recv_updateEstadoBeneficio();
  }

  public function send_updateEstadoBeneficio($id, $estado, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateEstadoBeneficio_args();
    $args->id = $id;
    $args->estado = $estado;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoBeneficio', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoBeneficio', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoBeneficio()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateEstadoBeneficio_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateEstadoBeneficio_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoBeneficio failed: unknown result");
  }

  public function insertBeneficio($beneficio, $usuarioCreacion)
  {
    $this->send_insertBeneficio($beneficio, $usuarioCreacion);
    return $this->recv_insertBeneficio();
  }

  public function send_insertBeneficio($beneficio, $usuarioCreacion)
  {
    $args = new \CRUDServer_insertBeneficio_args();
    $args->beneficio = $beneficio;
    $args->usuarioCreacion = $usuarioCreacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertBeneficio', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertBeneficio', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertBeneficio()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_insertBeneficio_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_insertBeneficio_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertBeneficio failed: unknown result");
  }

  public function getAllPreguntas()
  {
    $this->send_getAllPreguntas();
    return $this->recv_getAllPreguntas();
  }

  public function send_getAllPreguntas()
  {
    $args = new \CRUDServer_getAllPreguntas_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllPreguntas', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllPreguntas', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllPreguntas()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAllPreguntas_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAllPreguntas_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllPreguntas failed: unknown result");
  }

  public function getPregunta($id)
  {
    $this->send_getPregunta($id);
    return $this->recv_getPregunta();
  }

  public function send_getPregunta($id)
  {
    $args = new \CRUDServer_getPregunta_args();
    $args->id = $id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getPregunta', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getPregunta', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getPregunta()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getPregunta_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getPregunta_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getPregunta failed: unknown result");
  }

  public function updatePregunta($id, $pregunta, $respuesta, $usuario_modificacion)
  {
    $this->send_updatePregunta($id, $pregunta, $respuesta, $usuario_modificacion);
    return $this->recv_updatePregunta();
  }

  public function send_updatePregunta($id, $pregunta, $respuesta, $usuario_modificacion)
  {
    $args = new \CRUDServer_updatePregunta_args();
    $args->id = $id;
    $args->pregunta = $pregunta;
    $args->respuesta = $respuesta;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updatePregunta', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updatePregunta', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updatePregunta()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updatePregunta_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updatePregunta_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updatePregunta failed: unknown result");
  }

  public function insertPregunta($pregunta, $respuesta, $usuarioCreacion)
  {
    $this->send_insertPregunta($pregunta, $respuesta, $usuarioCreacion);
    return $this->recv_insertPregunta();
  }

  public function send_insertPregunta($pregunta, $respuesta, $usuarioCreacion)
  {
    $args = new \CRUDServer_insertPregunta_args();
    $args->pregunta = $pregunta;
    $args->respuesta = $respuesta;
    $args->usuarioCreacion = $usuarioCreacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertPregunta', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertPregunta', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertPregunta()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_insertPregunta_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_insertPregunta_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertPregunta failed: unknown result");
  }

  public function updateEstadoPregunta($id, $estado, $usuario_modificacion)
  {
    $this->send_updateEstadoPregunta($id, $estado, $usuario_modificacion);
    return $this->recv_updateEstadoPregunta();
  }

  public function send_updateEstadoPregunta($id, $estado, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateEstadoPregunta_args();
    $args->id = $id;
    $args->estado = $estado;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoPregunta', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoPregunta', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoPregunta()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateEstadoPregunta_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateEstadoPregunta_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoPregunta failed: unknown result");
  }

  public function getInformacion()
  {
    $this->send_getInformacion();
    return $this->recv_getInformacion();
  }

  public function send_getInformacion()
  {
    $args = new \CRUDServer_getInformacion_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getInformacion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getInformacion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getInformacion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getInformacion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getInformacion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getInformacion failed: unknown result");
  }

  public function updateInformacion($Informacion, $usuario_modificacion)
  {
    $this->send_updateInformacion($Informacion, $usuario_modificacion);
    return $this->recv_updateInformacion();
  }

  public function send_updateInformacion($Informacion, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateInformacion_args();
    $args->Informacion = $Informacion;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateInformacion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateInformacion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateInformacion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateInformacion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateInformacion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateInformacion failed: unknown result");
  }

  public function getFuncion($idFuncion)
  {
    $this->send_getFuncion($idFuncion);
    return $this->recv_getFuncion();
  }

  public function send_getFuncion($idFuncion)
  {
    $args = new \CRUDServer_getFuncion_args();
    $args->idFuncion = $idFuncion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getFuncion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getFuncion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getFuncion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getFuncion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getFuncion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getFuncion failed: unknown result");
  }

  public function getAllFuncion($idEvento)
  {
    $this->send_getAllFuncion($idEvento);
    return $this->recv_getAllFuncion();
  }

  public function send_getAllFuncion($idEvento)
  {
    $args = new \CRUDServer_getAllFuncion_args();
    $args->idEvento = $idEvento;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllFuncion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllFuncion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllFuncion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAllFuncion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAllFuncion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllFuncion failed: unknown result");
  }

  public function updateEstadoFuncion($id, $estado, $usuario_modificacion)
  {
    $this->send_updateEstadoFuncion($id, $estado, $usuario_modificacion);
    return $this->recv_updateEstadoFuncion();
  }

  public function send_updateEstadoFuncion($id, $estado, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateEstadoFuncion_args();
    $args->id = $id;
    $args->estado = $estado;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoFuncion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoFuncion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoFuncion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateEstadoFuncion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateEstadoFuncion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoFuncion failed: unknown result");
  }

  public function updateFuncion($fecha, $aforo, $estado, $idFuncion, $usuario_modificacion)
  {
    $this->send_updateFuncion($fecha, $aforo, $estado, $idFuncion, $usuario_modificacion);
    return $this->recv_updateFuncion();
  }

  public function send_updateFuncion($fecha, $aforo, $estado, $idFuncion, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateFuncion_args();
    $args->fecha = $fecha;
    $args->aforo = $aforo;
    $args->estado = $estado;
    $args->idFuncion = $idFuncion;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateFuncion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateFuncion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateFuncion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateFuncion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateFuncion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateFuncion failed: unknown result");
  }

  public function insertFuncion($fecha, $aforo, $idEvento, $estado, $usuarioCreacion)
  {
    $this->send_insertFuncion($fecha, $aforo, $idEvento, $estado, $usuarioCreacion);
    return $this->recv_insertFuncion();
  }

  public function send_insertFuncion($fecha, $aforo, $idEvento, $estado, $usuarioCreacion)
  {
    $args = new \CRUDServer_insertFuncion_args();
    $args->fecha = $fecha;
    $args->aforo = $aforo;
    $args->idEvento = $idEvento;
    $args->estado = $estado;
    $args->usuarioCreacion = $usuarioCreacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertFuncion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertFuncion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertFuncion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_insertFuncion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_insertFuncion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertFuncion failed: unknown result");
  }

  public function getMapa($idMapa)
  {
    $this->send_getMapa($idMapa);
    return $this->recv_getMapa();
  }

  public function send_getMapa($idMapa)
  {
    $args = new \CRUDServer_getMapa_args();
    $args->idMapa = $idMapa;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getMapa', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getMapa', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getMapa()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getMapa_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getMapa_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getMapa failed: unknown result");
  }

  public function getAllMapa()
  {
    $this->send_getAllMapa();
    return $this->recv_getAllMapa();
  }

  public function send_getAllMapa()
  {
    $args = new \CRUDServer_getAllMapa_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllMapa', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllMapa', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllMapa()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAllMapa_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAllMapa_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllMapa failed: unknown result");
  }

  public function updateEstadoMapa($id, $estado, $usuario_modificacion)
  {
    $this->send_updateEstadoMapa($id, $estado, $usuario_modificacion);
    return $this->recv_updateEstadoMapa();
  }

  public function send_updateEstadoMapa($id, $estado, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateEstadoMapa_args();
    $args->id = $id;
    $args->estado = $estado;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoMapa', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoMapa', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoMapa()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateEstadoMapa_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateEstadoMapa_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoMapa failed: unknown result");
  }

  public function updateMapa($nombre, $distribucion, $rutaImagen, $estado, $idMapa, $usuario_modificacion)
  {
    $this->send_updateMapa($nombre, $distribucion, $rutaImagen, $estado, $idMapa, $usuario_modificacion);
    return $this->recv_updateMapa();
  }

  public function send_updateMapa($nombre, $distribucion, $rutaImagen, $estado, $idMapa, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateMapa_args();
    $args->nombre = $nombre;
    $args->distribucion = $distribucion;
    $args->rutaImagen = $rutaImagen;
    $args->estado = $estado;
    $args->idMapa = $idMapa;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateMapa', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateMapa', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateMapa()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateMapa_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateMapa_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateMapa failed: unknown result");
  }

  public function insertMapa($nombre, $distribucion, $rutaImagen, $estado, $usuarioCreacion)
  {
    $this->send_insertMapa($nombre, $distribucion, $rutaImagen, $estado, $usuarioCreacion);
    return $this->recv_insertMapa();
  }

  public function send_insertMapa($nombre, $distribucion, $rutaImagen, $estado, $usuarioCreacion)
  {
    $args = new \CRUDServer_insertMapa_args();
    $args->nombre = $nombre;
    $args->distribucion = $distribucion;
    $args->rutaImagen = $rutaImagen;
    $args->estado = $estado;
    $args->usuarioCreacion = $usuarioCreacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertMapa', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertMapa', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertMapa()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_insertMapa_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_insertMapa_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertMapa failed: unknown result");
  }

  public function getPerfil($idPerfil)
  {
    $this->send_getPerfil($idPerfil);
    return $this->recv_getPerfil();
  }

  public function send_getPerfil($idPerfil)
  {
    $args = new \CRUDServer_getPerfil_args();
    $args->idPerfil = $idPerfil;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getPerfil', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getPerfil', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getPerfil()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getPerfil_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getPerfil_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getPerfil failed: unknown result");
  }

  public function getAllPerfil()
  {
    $this->send_getAllPerfil();
    return $this->recv_getAllPerfil();
  }

  public function send_getAllPerfil()
  {
    $args = new \CRUDServer_getAllPerfil_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllPerfil', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllPerfil', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllPerfil()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAllPerfil_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAllPerfil_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllPerfil failed: unknown result");
  }

  public function updateEstadoPerfil($id, $estado, $usuario_modificacion)
  {
    $this->send_updateEstadoPerfil($id, $estado, $usuario_modificacion);
    return $this->recv_updateEstadoPerfil();
  }

  public function send_updateEstadoPerfil($id, $estado, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateEstadoPerfil_args();
    $args->id = $id;
    $args->estado = $estado;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoPerfil', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoPerfil', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoPerfil()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateEstadoPerfil_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateEstadoPerfil_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoPerfil failed: unknown result");
  }

  public function updatePerfil($descripcion, $tipo, $estado, $idPerfil, $usuario_modificacion)
  {
    $this->send_updatePerfil($descripcion, $tipo, $estado, $idPerfil, $usuario_modificacion);
    return $this->recv_updatePerfil();
  }

  public function send_updatePerfil($descripcion, $tipo, $estado, $idPerfil, $usuario_modificacion)
  {
    $args = new \CRUDServer_updatePerfil_args();
    $args->descripcion = $descripcion;
    $args->tipo = $tipo;
    $args->estado = $estado;
    $args->idPerfil = $idPerfil;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updatePerfil', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updatePerfil', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updatePerfil()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updatePerfil_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updatePerfil_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updatePerfil failed: unknown result");
  }

  public function insertPerfil($descripcion, $tipo, $estado, $usuarioCreacion)
  {
    $this->send_insertPerfil($descripcion, $tipo, $estado, $usuarioCreacion);
    return $this->recv_insertPerfil();
  }

  public function send_insertPerfil($descripcion, $tipo, $estado, $usuarioCreacion)
  {
    $args = new \CRUDServer_insertPerfil_args();
    $args->descripcion = $descripcion;
    $args->tipo = $tipo;
    $args->estado = $estado;
    $args->usuarioCreacion = $usuarioCreacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertPerfil', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertPerfil', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertPerfil()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_insertPerfil_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_insertPerfil_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertPerfil failed: unknown result");
  }

  public function getPerfilRol($idPerfil, $idRol)
  {
    $this->send_getPerfilRol($idPerfil, $idRol);
    return $this->recv_getPerfilRol();
  }

  public function send_getPerfilRol($idPerfil, $idRol)
  {
    $args = new \CRUDServer_getPerfilRol_args();
    $args->idPerfil = $idPerfil;
    $args->idRol = $idRol;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getPerfilRol', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getPerfilRol', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getPerfilRol()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getPerfilRol_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getPerfilRol_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getPerfilRol failed: unknown result");
  }

  public function getAllPerfilRol($idPerfil)
  {
    $this->send_getAllPerfilRol($idPerfil);
    return $this->recv_getAllPerfilRol();
  }

  public function send_getAllPerfilRol($idPerfil)
  {
    $args = new \CRUDServer_getAllPerfilRol_args();
    $args->idPerfil = $idPerfil;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllPerfilRol', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllPerfilRol', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllPerfilRol()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAllPerfilRol_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAllPerfilRol_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllPerfilRol failed: unknown result");
  }

  public function updateEstadoPerfilRol($id, $estado, $usuario_modificacion)
  {
    $this->send_updateEstadoPerfilRol($id, $estado, $usuario_modificacion);
    return $this->recv_updateEstadoPerfilRol();
  }

  public function send_updateEstadoPerfilRol($id, $estado, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateEstadoPerfilRol_args();
    $args->id = $id;
    $args->estado = $estado;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoPerfilRol', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoPerfilRol', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoPerfilRol()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateEstadoPerfilRol_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateEstadoPerfilRol_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoPerfilRol failed: unknown result");
  }

  public function updatePerfilRol($idPerfil, $idRol, $estado, $idPerfilRol, $usuario_modificacion)
  {
    $this->send_updatePerfilRol($idPerfil, $idRol, $estado, $idPerfilRol, $usuario_modificacion);
    return $this->recv_updatePerfilRol();
  }

  public function send_updatePerfilRol($idPerfil, $idRol, $estado, $idPerfilRol, $usuario_modificacion)
  {
    $args = new \CRUDServer_updatePerfilRol_args();
    $args->idPerfil = $idPerfil;
    $args->idRol = $idRol;
    $args->estado = $estado;
    $args->idPerfilRol = $idPerfilRol;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updatePerfilRol', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updatePerfilRol', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updatePerfilRol()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updatePerfilRol_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updatePerfilRol_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updatePerfilRol failed: unknown result");
  }

  public function insertPerfilRol($idPerfil, $idRol, $estado, $usuarioCreacion)
  {
    $this->send_insertPerfilRol($idPerfil, $idRol, $estado, $usuarioCreacion);
    return $this->recv_insertPerfilRol();
  }

  public function send_insertPerfilRol($idPerfil, $idRol, $estado, $usuarioCreacion)
  {
    $args = new \CRUDServer_insertPerfilRol_args();
    $args->idPerfil = $idPerfil;
    $args->idRol = $idRol;
    $args->estado = $estado;
    $args->usuarioCreacion = $usuarioCreacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertPerfilRol', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertPerfilRol', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertPerfilRol()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_insertPerfilRol_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_insertPerfilRol_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertPerfilRol failed: unknown result");
  }

  public function isPrincipal($idEvento)
  {
    $this->send_isPrincipal($idEvento);
    return $this->recv_isPrincipal();
  }

  public function send_isPrincipal($idEvento)
  {
    $args = new \CRUDServer_isPrincipal_args();
    $args->idEvento = $idEvento;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'isPrincipal', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('isPrincipal', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_isPrincipal()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_isPrincipal_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_isPrincipal_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("isPrincipal failed: unknown result");
  }

  public function getPlatea($idPlatea)
  {
    $this->send_getPlatea($idPlatea);
    return $this->recv_getPlatea();
  }

  public function send_getPlatea($idPlatea)
  {
    $args = new \CRUDServer_getPlatea_args();
    $args->idPlatea = $idPlatea;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getPlatea', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getPlatea', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getPlatea()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getPlatea_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getPlatea_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getPlatea failed: unknown result");
  }

  public function getAllPlatea($idEvento)
  {
    $this->send_getAllPlatea($idEvento);
    return $this->recv_getAllPlatea();
  }

  public function send_getAllPlatea($idEvento)
  {
    $args = new \CRUDServer_getAllPlatea_args();
    $args->idEvento = $idEvento;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllPlatea', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllPlatea', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllPlatea()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAllPlatea_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAllPlatea_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllPlatea failed: unknown result");
  }

  public function getPlateaFuncion($idPlatea, $idFuncion)
  {
    $this->send_getPlateaFuncion($idPlatea, $idFuncion);
    return $this->recv_getPlateaFuncion();
  }

  public function send_getPlateaFuncion($idPlatea, $idFuncion)
  {
    $args = new \CRUDServer_getPlateaFuncion_args();
    $args->idPlatea = $idPlatea;
    $args->idFuncion = $idFuncion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getPlateaFuncion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getPlateaFuncion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getPlateaFuncion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getPlateaFuncion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getPlateaFuncion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getPlateaFuncion failed: unknown result");
  }

  public function updateEstadoPlatea($id, $estado, $usuario_modificacion)
  {
    $this->send_updateEstadoPlatea($id, $estado, $usuario_modificacion);
    return $this->recv_updateEstadoPlatea();
  }

  public function send_updateEstadoPlatea($id, $estado, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateEstadoPlatea_args();
    $args->id = $id;
    $args->estado = $estado;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoPlatea', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoPlatea', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoPlatea()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateEstadoPlatea_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateEstadoPlatea_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoPlatea failed: unknown result");
  }

  public function updatePlatea($nombre, $costo, $aforo, $estado, $idPlatea, $usuario_modificacion)
  {
    $this->send_updatePlatea($nombre, $costo, $aforo, $estado, $idPlatea, $usuario_modificacion);
    return $this->recv_updatePlatea();
  }

  public function send_updatePlatea($nombre, $costo, $aforo, $estado, $idPlatea, $usuario_modificacion)
  {
    $args = new \CRUDServer_updatePlatea_args();
    $args->nombre = $nombre;
    $args->costo = $costo;
    $args->aforo = $aforo;
    $args->estado = $estado;
    $args->idPlatea = $idPlatea;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updatePlatea', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updatePlatea', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updatePlatea()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updatePlatea_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updatePlatea_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updatePlatea failed: unknown result");
  }

  public function insertPlatea($nombre, $costo, $aforo, $idEvento, $estado, $usuarioCreacion)
  {
    $this->send_insertPlatea($nombre, $costo, $aforo, $idEvento, $estado, $usuarioCreacion);
    return $this->recv_insertPlatea();
  }

  public function send_insertPlatea($nombre, $costo, $aforo, $idEvento, $estado, $usuarioCreacion)
  {
    $args = new \CRUDServer_insertPlatea_args();
    $args->nombre = $nombre;
    $args->costo = $costo;
    $args->aforo = $aforo;
    $args->idEvento = $idEvento;
    $args->estado = $estado;
    $args->usuarioCreacion = $usuarioCreacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertPlatea', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertPlatea', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertPlatea()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_insertPlatea_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_insertPlatea_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertPlatea failed: unknown result");
  }

  public function getProcedencia($idProcedencia)
  {
    $this->send_getProcedencia($idProcedencia);
    return $this->recv_getProcedencia();
  }

  public function send_getProcedencia($idProcedencia)
  {
    $args = new \CRUDServer_getProcedencia_args();
    $args->idProcedencia = $idProcedencia;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getProcedencia', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getProcedencia', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getProcedencia()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getProcedencia_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getProcedencia_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getProcedencia failed: unknown result");
  }

  public function getAllProcedencia()
  {
    $this->send_getAllProcedencia();
    return $this->recv_getAllProcedencia();
  }

  public function send_getAllProcedencia()
  {
    $args = new \CRUDServer_getAllProcedencia_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllProcedencia', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllProcedencia', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllProcedencia()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAllProcedencia_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAllProcedencia_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllProcedencia failed: unknown result");
  }

  public function updateEstadoProcedencia($id, $estado, $usuario_modificacion)
  {
    $this->send_updateEstadoProcedencia($id, $estado, $usuario_modificacion);
    return $this->recv_updateEstadoProcedencia();
  }

  public function send_updateEstadoProcedencia($id, $estado, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateEstadoProcedencia_args();
    $args->id = $id;
    $args->estado = $estado;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoProcedencia', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoProcedencia', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoProcedencia()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateEstadoProcedencia_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateEstadoProcedencia_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoProcedencia failed: unknown result");
  }

  public function updateProcedencia($nombre, $descripcion, $estado, $idProcedencia, $usuario_modificacion)
  {
    $this->send_updateProcedencia($nombre, $descripcion, $estado, $idProcedencia, $usuario_modificacion);
    return $this->recv_updateProcedencia();
  }

  public function send_updateProcedencia($nombre, $descripcion, $estado, $idProcedencia, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateProcedencia_args();
    $args->nombre = $nombre;
    $args->descripcion = $descripcion;
    $args->estado = $estado;
    $args->idProcedencia = $idProcedencia;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateProcedencia', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateProcedencia', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateProcedencia()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateProcedencia_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateProcedencia_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateProcedencia failed: unknown result");
  }

  public function insertProcedencia($nombre, $descripcion, $estado, $usuarioCreacion)
  {
    $this->send_insertProcedencia($nombre, $descripcion, $estado, $usuarioCreacion);
    return $this->recv_insertProcedencia();
  }

  public function send_insertProcedencia($nombre, $descripcion, $estado, $usuarioCreacion)
  {
    $args = new \CRUDServer_insertProcedencia_args();
    $args->nombre = $nombre;
    $args->descripcion = $descripcion;
    $args->estado = $estado;
    $args->usuarioCreacion = $usuarioCreacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertProcedencia', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertProcedencia', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertProcedencia()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_insertProcedencia_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_insertProcedencia_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertProcedencia failed: unknown result");
  }

  public function getProductora($idProductora)
  {
    $this->send_getProductora($idProductora);
    return $this->recv_getProductora();
  }

  public function send_getProductora($idProductora)
  {
    $args = new \CRUDServer_getProductora_args();
    $args->idProductora = $idProductora;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getProductora', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getProductora', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getProductora()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getProductora_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getProductora_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getProductora failed: unknown result");
  }

  public function getAllProductora()
  {
    $this->send_getAllProductora();
    return $this->recv_getAllProductora();
  }

  public function send_getAllProductora()
  {
    $args = new \CRUDServer_getAllProductora_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllProductora', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllProductora', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllProductora()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAllProductora_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAllProductora_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllProductora failed: unknown result");
  }

  public function updateEstadoProductora($id, $estado, $usuario_modificacion)
  {
    $this->send_updateEstadoProductora($id, $estado, $usuario_modificacion);
    return $this->recv_updateEstadoProductora();
  }

  public function send_updateEstadoProductora($id, $estado, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateEstadoProductora_args();
    $args->id = $id;
    $args->estado = $estado;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoProductora', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoProductora', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoProductora()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateEstadoProductora_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateEstadoProductora_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoProductora failed: unknown result");
  }

  public function updateProductora($nombre, $descripcion, $estado, $idProductora, $usuario_modificacion)
  {
    $this->send_updateProductora($nombre, $descripcion, $estado, $idProductora, $usuario_modificacion);
    return $this->recv_updateProductora();
  }

  public function send_updateProductora($nombre, $descripcion, $estado, $idProductora, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateProductora_args();
    $args->nombre = $nombre;
    $args->descripcion = $descripcion;
    $args->estado = $estado;
    $args->idProductora = $idProductora;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateProductora', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateProductora', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateProductora()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateProductora_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateProductora_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateProductora failed: unknown result");
  }

  public function insertProductora($nombre, $descripcion, $estado, $usuarioCreacion)
  {
    $this->send_insertProductora($nombre, $descripcion, $estado, $usuarioCreacion);
    return $this->recv_insertProductora();
  }

  public function send_insertProductora($nombre, $descripcion, $estado, $usuarioCreacion)
  {
    $args = new \CRUDServer_insertProductora_args();
    $args->nombre = $nombre;
    $args->descripcion = $descripcion;
    $args->estado = $estado;
    $args->usuarioCreacion = $usuarioCreacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertProductora', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertProductora', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertProductora()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_insertProductora_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_insertProductora_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertProductora failed: unknown result");
  }

  public function getAllCortesia()
  {
    $this->send_getAllCortesia();
    return $this->recv_getAllCortesia();
  }

  public function send_getAllCortesia()
  {
    $args = new \CRUDServer_getAllCortesia_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllCortesia', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllCortesia', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllCortesia()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAllCortesia_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAllCortesia_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllCortesia failed: unknown result");
  }

  public function getCortesia($id_cortesia)
  {
    $this->send_getCortesia($id_cortesia);
    return $this->recv_getCortesia();
  }

  public function send_getCortesia($id_cortesia)
  {
    $args = new \CRUDServer_getCortesia_args();
    $args->id_cortesia = $id_cortesia;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCortesia', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCortesia', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCortesia()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getCortesia_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getCortesia_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getCortesia failed: unknown result");
  }

  public function updateEstadoCortesia($id, $estado, $usuario_modificacion)
  {
    $this->send_updateEstadoCortesia($id, $estado, $usuario_modificacion);
    return $this->recv_updateEstadoCortesia();
  }

  public function send_updateEstadoCortesia($id, $estado, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateEstadoCortesia_args();
    $args->id = $id;
    $args->estado = $estado;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoCortesia', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoCortesia', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoCortesia()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateEstadoCortesia_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateEstadoCortesia_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoCortesia failed: unknown result");
  }

  public function deleteCortesia($idTicketAsiento, $idTicket, $usuario_modificacion)
  {
    $this->send_deleteCortesia($idTicketAsiento, $idTicket, $usuario_modificacion);
    return $this->recv_deleteCortesia();
  }

  public function send_deleteCortesia($idTicketAsiento, $idTicket, $usuario_modificacion)
  {
    $args = new \CRUDServer_deleteCortesia_args();
    $args->idTicketAsiento = $idTicketAsiento;
    $args->idTicket = $idTicket;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deleteCortesia', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deleteCortesia', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deleteCortesia()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_deleteCortesia_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_deleteCortesia_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("deleteCortesia failed: unknown result");
  }

  public function bloqueo($idFuncion, $idPlatea, $tipo, $fila, $desde, $hasta, $nombre, $correo, $descripcion, $estado, $usuario_modificacion)
  {
    $this->send_bloqueo($idFuncion, $idPlatea, $tipo, $fila, $desde, $hasta, $nombre, $correo, $descripcion, $estado, $usuario_modificacion);
    return $this->recv_bloqueo();
  }

  public function send_bloqueo($idFuncion, $idPlatea, $tipo, $fila, $desde, $hasta, $nombre, $correo, $descripcion, $estado, $usuario_modificacion)
  {
    $args = new \CRUDServer_bloqueo_args();
    $args->idFuncion = $idFuncion;
    $args->idPlatea = $idPlatea;
    $args->tipo = $tipo;
    $args->fila = $fila;
    $args->desde = $desde;
    $args->hasta = $hasta;
    $args->nombre = $nombre;
    $args->correo = $correo;
    $args->descripcion = $descripcion;
    $args->estado = $estado;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'bloqueo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('bloqueo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_bloqueo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_bloqueo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_bloqueo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("bloqueo failed: unknown result");
  }

  public function insertReserva($idFuncion, $idEvento, $idUsuario, $asientos, $tipo, $usuarioCreacion)
  {
    $this->send_insertReserva($idFuncion, $idEvento, $idUsuario, $asientos, $tipo, $usuarioCreacion);
    return $this->recv_insertReserva();
  }

  public function send_insertReserva($idFuncion, $idEvento, $idUsuario, $asientos, $tipo, $usuarioCreacion)
  {
    $args = new \CRUDServer_insertReserva_args();
    $args->idFuncion = $idFuncion;
    $args->idEvento = $idEvento;
    $args->idUsuario = $idUsuario;
    $args->asientos = $asientos;
    $args->tipo = $tipo;
    $args->usuarioCreacion = $usuarioCreacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertReserva', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertReserva', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertReserva()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_insertReserva_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_insertReserva_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertReserva failed: unknown result");
  }

  public function getAllReserva($idUsuario)
  {
    $this->send_getAllReserva($idUsuario);
    return $this->recv_getAllReserva();
  }

  public function send_getAllReserva($idUsuario)
  {
    $args = new \CRUDServer_getAllReserva_args();
    $args->idUsuario = $idUsuario;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllReserva', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllReserva', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllReserva()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAllReserva_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAllReserva_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllReserva failed: unknown result");
  }

  public function deleteReserva($reserva, $idUsuario)
  {
    $this->send_deleteReserva($reserva, $idUsuario);
    return $this->recv_deleteReserva();
  }

  public function send_deleteReserva($reserva, $idUsuario)
  {
    $args = new \CRUDServer_deleteReserva_args();
    $args->reserva = $reserva;
    $args->idUsuario = $idUsuario;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deleteReserva', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deleteReserva', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deleteReserva()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_deleteReserva_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_deleteReserva_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("deleteReserva failed: unknown result");
  }

  public function getPromocion($idPromocion, $idTipoPromocion, $tipo)
  {
    $this->send_getPromocion($idPromocion, $idTipoPromocion, $tipo);
    return $this->recv_getPromocion();
  }

  public function send_getPromocion($idPromocion, $idTipoPromocion, $tipo)
  {
    $args = new \CRUDServer_getPromocion_args();
    $args->idPromocion = $idPromocion;
    $args->idTipoPromocion = $idTipoPromocion;
    $args->tipo = $tipo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getPromocion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getPromocion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getPromocion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getPromocion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getPromocion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getPromocion failed: unknown result");
  }

  public function getAllPromociones()
  {
    $this->send_getAllPromociones();
    return $this->recv_getAllPromociones();
  }

  public function send_getAllPromociones()
  {
    $args = new \CRUDServer_getAllPromociones_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllPromociones', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllPromociones', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllPromociones()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAllPromociones_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAllPromociones_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllPromociones failed: unknown result");
  }

  public function getAllPromocion($idEvento, $tipo)
  {
    $this->send_getAllPromocion($idEvento, $tipo);
    return $this->recv_getAllPromocion();
  }

  public function send_getAllPromocion($idEvento, $tipo)
  {
    $args = new \CRUDServer_getAllPromocion_args();
    $args->idEvento = $idEvento;
    $args->tipo = $tipo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllPromocion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllPromocion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllPromocion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAllPromocion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAllPromocion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllPromocion failed: unknown result");
  }

  public function updateEstadoPromocion($id, $estado, $tipo, $usuario_modificacion)
  {
    $this->send_updateEstadoPromocion($id, $estado, $tipo, $usuario_modificacion);
    return $this->recv_updateEstadoPromocion();
  }

  public function send_updateEstadoPromocion($id, $estado, $tipo, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateEstadoPromocion_args();
    $args->id = $id;
    $args->estado = $estado;
    $args->tipo = $tipo;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoPromocion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoPromocion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoPromocion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateEstadoPromocion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateEstadoPromocion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoPromocion failed: unknown result");
  }

  public function updatePromocion($idPromocion, $idPromocion2, $nombre, $descripcion, $amigoTeatro, $idEvento, $idPlatea, $idFuncion, $General, $Web, $App, $Taquilla, $idTipoPromocion, $fechaInicio, $fechaFin, $TipoPromocion, $var1, $var2, $descuento, $Cmaxima, $var3, $usuario_modificacion)
  {
    $this->send_updatePromocion($idPromocion, $idPromocion2, $nombre, $descripcion, $amigoTeatro, $idEvento, $idPlatea, $idFuncion, $General, $Web, $App, $Taquilla, $idTipoPromocion, $fechaInicio, $fechaFin, $TipoPromocion, $var1, $var2, $descuento, $Cmaxima, $var3, $usuario_modificacion);
    return $this->recv_updatePromocion();
  }

  public function send_updatePromocion($idPromocion, $idPromocion2, $nombre, $descripcion, $amigoTeatro, $idEvento, $idPlatea, $idFuncion, $General, $Web, $App, $Taquilla, $idTipoPromocion, $fechaInicio, $fechaFin, $TipoPromocion, $var1, $var2, $descuento, $Cmaxima, $var3, $usuario_modificacion)
  {
    $args = new \CRUDServer_updatePromocion_args();
    $args->idPromocion = $idPromocion;
    $args->idPromocion2 = $idPromocion2;
    $args->nombre = $nombre;
    $args->descripcion = $descripcion;
    $args->amigoTeatro = $amigoTeatro;
    $args->idEvento = $idEvento;
    $args->idPlatea = $idPlatea;
    $args->idFuncion = $idFuncion;
    $args->General = $General;
    $args->Web = $Web;
    $args->App = $App;
    $args->Taquilla = $Taquilla;
    $args->idTipoPromocion = $idTipoPromocion;
    $args->fechaInicio = $fechaInicio;
    $args->fechaFin = $fechaFin;
    $args->TipoPromocion = $TipoPromocion;
    $args->var1 = $var1;
    $args->var2 = $var2;
    $args->descuento = $descuento;
    $args->Cmaxima = $Cmaxima;
    $args->var3 = $var3;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updatePromocion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updatePromocion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updatePromocion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updatePromocion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updatePromocion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updatePromocion failed: unknown result");
  }

  public function insertPromocion($nombre, $descripcion, $amigoTeatro, $idEvento, $idPlatea, $idFuncion, $General, $Web, $App, $Taquilla, $idTipoPromocion, $fechaInicio, $fechaFin, $TipoPromocion, $var1, $var2, $descuento, $Cmaxima, $var3, $usuarioCreacion)
  {
    $this->send_insertPromocion($nombre, $descripcion, $amigoTeatro, $idEvento, $idPlatea, $idFuncion, $General, $Web, $App, $Taquilla, $idTipoPromocion, $fechaInicio, $fechaFin, $TipoPromocion, $var1, $var2, $descuento, $Cmaxima, $var3, $usuarioCreacion);
    return $this->recv_insertPromocion();
  }

  public function send_insertPromocion($nombre, $descripcion, $amigoTeatro, $idEvento, $idPlatea, $idFuncion, $General, $Web, $App, $Taquilla, $idTipoPromocion, $fechaInicio, $fechaFin, $TipoPromocion, $var1, $var2, $descuento, $Cmaxima, $var3, $usuarioCreacion)
  {
    $args = new \CRUDServer_insertPromocion_args();
    $args->nombre = $nombre;
    $args->descripcion = $descripcion;
    $args->amigoTeatro = $amigoTeatro;
    $args->idEvento = $idEvento;
    $args->idPlatea = $idPlatea;
    $args->idFuncion = $idFuncion;
    $args->General = $General;
    $args->Web = $Web;
    $args->App = $App;
    $args->Taquilla = $Taquilla;
    $args->idTipoPromocion = $idTipoPromocion;
    $args->fechaInicio = $fechaInicio;
    $args->fechaFin = $fechaFin;
    $args->TipoPromocion = $TipoPromocion;
    $args->var1 = $var1;
    $args->var2 = $var2;
    $args->descuento = $descuento;
    $args->Cmaxima = $Cmaxima;
    $args->var3 = $var3;
    $args->usuarioCreacion = $usuarioCreacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertPromocion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertPromocion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertPromocion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_insertPromocion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_insertPromocion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertPromocion failed: unknown result");
  }

  public function getNombrePromocion($idNombrePromocion)
  {
    $this->send_getNombrePromocion($idNombrePromocion);
    return $this->recv_getNombrePromocion();
  }

  public function send_getNombrePromocion($idNombrePromocion)
  {
    $args = new \CRUDServer_getNombrePromocion_args();
    $args->idNombrePromocion = $idNombrePromocion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getNombrePromocion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getNombrePromocion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getNombrePromocion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getNombrePromocion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getNombrePromocion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getNombrePromocion failed: unknown result");
  }

  public function getAllNombrePromocion()
  {
    $this->send_getAllNombrePromocion();
    return $this->recv_getAllNombrePromocion();
  }

  public function send_getAllNombrePromocion()
  {
    $args = new \CRUDServer_getAllNombrePromocion_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllNombrePromocion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllNombrePromocion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllNombrePromocion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAllNombrePromocion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAllNombrePromocion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllNombrePromocion failed: unknown result");
  }

  public function updateEstadoNombrePromocion($id, $estado, $usuario_modificacion)
  {
    $this->send_updateEstadoNombrePromocion($id, $estado, $usuario_modificacion);
    return $this->recv_updateEstadoNombrePromocion();
  }

  public function send_updateEstadoNombrePromocion($id, $estado, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateEstadoNombrePromocion_args();
    $args->id = $id;
    $args->estado = $estado;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoNombrePromocion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoNombrePromocion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoNombrePromocion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateEstadoNombrePromocion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateEstadoNombrePromocion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoNombrePromocion failed: unknown result");
  }

  public function updateNombrePromocion($nombre, $descripcion, $estado, $idNombrePromocion, $usuario_modificacion)
  {
    $this->send_updateNombrePromocion($nombre, $descripcion, $estado, $idNombrePromocion, $usuario_modificacion);
    return $this->recv_updateNombrePromocion();
  }

  public function send_updateNombrePromocion($nombre, $descripcion, $estado, $idNombrePromocion, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateNombrePromocion_args();
    $args->nombre = $nombre;
    $args->descripcion = $descripcion;
    $args->estado = $estado;
    $args->idNombrePromocion = $idNombrePromocion;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateNombrePromocion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateNombrePromocion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateNombrePromocion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateNombrePromocion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateNombrePromocion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateNombrePromocion failed: unknown result");
  }

  public function insertNombrePromocion($nombre, $descripcion, $estado, $usuarioCreacion)
  {
    $this->send_insertNombrePromocion($nombre, $descripcion, $estado, $usuarioCreacion);
    return $this->recv_insertNombrePromocion();
  }

  public function send_insertNombrePromocion($nombre, $descripcion, $estado, $usuarioCreacion)
  {
    $args = new \CRUDServer_insertNombrePromocion_args();
    $args->nombre = $nombre;
    $args->descripcion = $descripcion;
    $args->estado = $estado;
    $args->usuarioCreacion = $usuarioCreacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertNombrePromocion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertNombrePromocion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertNombrePromocion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_insertNombrePromocion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_insertNombrePromocion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertNombrePromocion failed: unknown result");
  }

  public function getRol($idRol)
  {
    $this->send_getRol($idRol);
    return $this->recv_getRol();
  }

  public function send_getRol($idRol)
  {
    $args = new \CRUDServer_getRol_args();
    $args->idRol = $idRol;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getRol', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getRol', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getRol()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getRol_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getRol_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getRol failed: unknown result");
  }

  public function getAllRol()
  {
    $this->send_getAllRol();
    return $this->recv_getAllRol();
  }

  public function send_getAllRol()
  {
    $args = new \CRUDServer_getAllRol_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllRol', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllRol', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllRol()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAllRol_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAllRol_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllRol failed: unknown result");
  }

  public function updateEstadoRol($id, $estado, $usuario_modificacion)
  {
    $this->send_updateEstadoRol($id, $estado, $usuario_modificacion);
    return $this->recv_updateEstadoRol();
  }

  public function send_updateEstadoRol($id, $estado, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateEstadoRol_args();
    $args->id = $id;
    $args->estado = $estado;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoRol', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoRol', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoRol()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateEstadoRol_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateEstadoRol_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoRol failed: unknown result");
  }

  public function updateRol($descripcion, $modulo, $estado, $idRol, $usuario_modificacion)
  {
    $this->send_updateRol($descripcion, $modulo, $estado, $idRol, $usuario_modificacion);
    return $this->recv_updateRol();
  }

  public function send_updateRol($descripcion, $modulo, $estado, $idRol, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateRol_args();
    $args->descripcion = $descripcion;
    $args->modulo = $modulo;
    $args->estado = $estado;
    $args->idRol = $idRol;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateRol', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateRol', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateRol()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateRol_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateRol_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateRol failed: unknown result");
  }

  public function insertRol($descripcion, $modulo, $estado, $usuarioCreacion)
  {
    $this->send_insertRol($descripcion, $modulo, $estado, $usuarioCreacion);
    return $this->recv_insertRol();
  }

  public function send_insertRol($descripcion, $modulo, $estado, $usuarioCreacion)
  {
    $args = new \CRUDServer_insertRol_args();
    $args->descripcion = $descripcion;
    $args->modulo = $modulo;
    $args->estado = $estado;
    $args->usuarioCreacion = $usuarioCreacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertRol', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertRol', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertRol()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_insertRol_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_insertRol_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertRol failed: unknown result");
  }

  public function getSala($idSala)
  {
    $this->send_getSala($idSala);
    return $this->recv_getSala();
  }

  public function send_getSala($idSala)
  {
    $args = new \CRUDServer_getSala_args();
    $args->idSala = $idSala;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getSala', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getSala', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getSala()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getSala_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getSala_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getSala failed: unknown result");
  }

  public function getAllSala()
  {
    $this->send_getAllSala();
    return $this->recv_getAllSala();
  }

  public function send_getAllSala()
  {
    $args = new \CRUDServer_getAllSala_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllSala', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllSala', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllSala()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAllSala_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAllSala_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllSala failed: unknown result");
  }

  public function updateEstadoSala($id, $estado, $usuario_modificacion)
  {
    $this->send_updateEstadoSala($id, $estado, $usuario_modificacion);
    return $this->recv_updateEstadoSala();
  }

  public function send_updateEstadoSala($id, $estado, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateEstadoSala_args();
    $args->id = $id;
    $args->estado = $estado;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoSala', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoSala', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoSala()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateEstadoSala_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateEstadoSala_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoSala failed: unknown result");
  }

  public function updateSala($nombre, $descripcion, $capacidad, $rutaImagen, $estado, $idSala, $usuario_modificacion)
  {
    $this->send_updateSala($nombre, $descripcion, $capacidad, $rutaImagen, $estado, $idSala, $usuario_modificacion);
    return $this->recv_updateSala();
  }

  public function send_updateSala($nombre, $descripcion, $capacidad, $rutaImagen, $estado, $idSala, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateSala_args();
    $args->nombre = $nombre;
    $args->descripcion = $descripcion;
    $args->capacidad = $capacidad;
    $args->rutaImagen = $rutaImagen;
    $args->estado = $estado;
    $args->idSala = $idSala;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateSala', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateSala', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateSala()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateSala_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateSala_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateSala failed: unknown result");
  }

  public function insertSala($nombre, $descripcion, $capacidad, $rutaImagen, $estado, $usuarioCreacion)
  {
    $this->send_insertSala($nombre, $descripcion, $capacidad, $rutaImagen, $estado, $usuarioCreacion);
    return $this->recv_insertSala();
  }

  public function send_insertSala($nombre, $descripcion, $capacidad, $rutaImagen, $estado, $usuarioCreacion)
  {
    $args = new \CRUDServer_insertSala_args();
    $args->nombre = $nombre;
    $args->descripcion = $descripcion;
    $args->capacidad = $capacidad;
    $args->rutaImagen = $rutaImagen;
    $args->estado = $estado;
    $args->usuarioCreacion = $usuarioCreacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertSala', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertSala', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertSala()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_insertSala_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_insertSala_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertSala failed: unknown result");
  }

  public function getSalaMapa($idSalaMapa, $tipo)
  {
    $this->send_getSalaMapa($idSalaMapa, $tipo);
    return $this->recv_getSalaMapa();
  }

  public function send_getSalaMapa($idSalaMapa, $tipo)
  {
    $args = new \CRUDServer_getSalaMapa_args();
    $args->idSalaMapa = $idSalaMapa;
    $args->tipo = $tipo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getSalaMapa', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getSalaMapa', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getSalaMapa()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getSalaMapa_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getSalaMapa_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getSalaMapa failed: unknown result");
  }

  public function getAllSalaMapa($tipo)
  {
    $this->send_getAllSalaMapa($tipo);
    return $this->recv_getAllSalaMapa();
  }

  public function send_getAllSalaMapa($tipo)
  {
    $args = new \CRUDServer_getAllSalaMapa_args();
    $args->tipo = $tipo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllSalaMapa', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllSalaMapa', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllSalaMapa()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAllSalaMapa_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAllSalaMapa_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllSalaMapa failed: unknown result");
  }

  public function updateEstadoSalaMapa($id, $estado, $usuario_modificacion, $tipo)
  {
    $this->send_updateEstadoSalaMapa($id, $estado, $usuario_modificacion, $tipo);
    return $this->recv_updateEstadoSalaMapa();
  }

  public function send_updateEstadoSalaMapa($id, $estado, $usuario_modificacion, $tipo)
  {
    $args = new \CRUDServer_updateEstadoSalaMapa_args();
    $args->id = $id;
    $args->estado = $estado;
    $args->usuario_modificacion = $usuario_modificacion;
    $args->tipo = $tipo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoSalaMapa', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoSalaMapa', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoSalaMapa()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateEstadoSalaMapa_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateEstadoSalaMapa_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoSalaMapa failed: unknown result");
  }

  public function updateSalaMapa($idSalaMapa, $idMapa, $nombre, $rutaImagen, $estado, $usuario_modificacion)
  {
    $this->send_updateSalaMapa($idSalaMapa, $idMapa, $nombre, $rutaImagen, $estado, $usuario_modificacion);
    return $this->recv_updateSalaMapa();
  }

  public function send_updateSalaMapa($idSalaMapa, $idMapa, $nombre, $rutaImagen, $estado, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateSalaMapa_args();
    $args->idSalaMapa = $idSalaMapa;
    $args->idMapa = $idMapa;
    $args->nombre = $nombre;
    $args->rutaImagen = $rutaImagen;
    $args->estado = $estado;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateSalaMapa', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateSalaMapa', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateSalaMapa()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateSalaMapa_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateSalaMapa_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateSalaMapa failed: unknown result");
  }

  public function insertSalaMapa($idSala, $nombre, $rutaImagen, $estado, $usuarioCreacion)
  {
    $this->send_insertSalaMapa($idSala, $nombre, $rutaImagen, $estado, $usuarioCreacion);
    return $this->recv_insertSalaMapa();
  }

  public function send_insertSalaMapa($idSala, $nombre, $rutaImagen, $estado, $usuarioCreacion)
  {
    $args = new \CRUDServer_insertSalaMapa_args();
    $args->idSala = $idSala;
    $args->nombre = $nombre;
    $args->rutaImagen = $rutaImagen;
    $args->estado = $estado;
    $args->usuarioCreacion = $usuarioCreacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertSalaMapa', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertSalaMapa', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertSalaMapa()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_insertSalaMapa_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_insertSalaMapa_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertSalaMapa failed: unknown result");
  }

  public function getTarjeta($idTarjeta)
  {
    $this->send_getTarjeta($idTarjeta);
    return $this->recv_getTarjeta();
  }

  public function send_getTarjeta($idTarjeta)
  {
    $args = new \CRUDServer_getTarjeta_args();
    $args->idTarjeta = $idTarjeta;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getTarjeta', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getTarjeta', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getTarjeta()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getTarjeta_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getTarjeta_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getTarjeta failed: unknown result");
  }

  public function getAllTarjeta($tipo)
  {
    $this->send_getAllTarjeta($tipo);
    return $this->recv_getAllTarjeta();
  }

  public function send_getAllTarjeta($tipo)
  {
    $args = new \CRUDServer_getAllTarjeta_args();
    $args->tipo = $tipo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllTarjeta', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllTarjeta', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllTarjeta()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAllTarjeta_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAllTarjeta_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllTarjeta failed: unknown result");
  }

  public function updateEstadoTarjeta($id, $estado, $usuario_modificacion)
  {
    $this->send_updateEstadoTarjeta($id, $estado, $usuario_modificacion);
    return $this->recv_updateEstadoTarjeta();
  }

  public function send_updateEstadoTarjeta($id, $estado, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateEstadoTarjeta_args();
    $args->id = $id;
    $args->estado = $estado;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoTarjeta', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoTarjeta', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoTarjeta()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateEstadoTarjeta_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateEstadoTarjeta_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoTarjeta failed: unknown result");
  }

  public function updateTarjeta($nombre, $tipo, $estado, $idTarjeta, $usuario_modificacion)
  {
    $this->send_updateTarjeta($nombre, $tipo, $estado, $idTarjeta, $usuario_modificacion);
    return $this->recv_updateTarjeta();
  }

  public function send_updateTarjeta($nombre, $tipo, $estado, $idTarjeta, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateTarjeta_args();
    $args->nombre = $nombre;
    $args->tipo = $tipo;
    $args->estado = $estado;
    $args->idTarjeta = $idTarjeta;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateTarjeta', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateTarjeta', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateTarjeta()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateTarjeta_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateTarjeta_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateTarjeta failed: unknown result");
  }

  public function insertTarjeta($nombre, $tipo, $estado, $usuarioCreacion)
  {
    $this->send_insertTarjeta($nombre, $tipo, $estado, $usuarioCreacion);
    return $this->recv_insertTarjeta();
  }

  public function send_insertTarjeta($nombre, $tipo, $estado, $usuarioCreacion)
  {
    $args = new \CRUDServer_insertTarjeta_args();
    $args->nombre = $nombre;
    $args->tipo = $tipo;
    $args->estado = $estado;
    $args->usuarioCreacion = $usuarioCreacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertTarjeta', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertTarjeta', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertTarjeta()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_insertTarjeta_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_insertTarjeta_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertTarjeta failed: unknown result");
  }

  public function getTipoEspectaculo($idTipoEspectaculo)
  {
    $this->send_getTipoEspectaculo($idTipoEspectaculo);
    return $this->recv_getTipoEspectaculo();
  }

  public function send_getTipoEspectaculo($idTipoEspectaculo)
  {
    $args = new \CRUDServer_getTipoEspectaculo_args();
    $args->idTipoEspectaculo = $idTipoEspectaculo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getTipoEspectaculo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getTipoEspectaculo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getTipoEspectaculo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getTipoEspectaculo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getTipoEspectaculo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getTipoEspectaculo failed: unknown result");
  }

  public function getAllTipoEspectaculo()
  {
    $this->send_getAllTipoEspectaculo();
    return $this->recv_getAllTipoEspectaculo();
  }

  public function send_getAllTipoEspectaculo()
  {
    $args = new \CRUDServer_getAllTipoEspectaculo_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllTipoEspectaculo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllTipoEspectaculo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllTipoEspectaculo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAllTipoEspectaculo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAllTipoEspectaculo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllTipoEspectaculo failed: unknown result");
  }

  public function updateEstadoTipoEspectaculo($id, $estado, $usuario_modificacion)
  {
    $this->send_updateEstadoTipoEspectaculo($id, $estado, $usuario_modificacion);
    return $this->recv_updateEstadoTipoEspectaculo();
  }

  public function send_updateEstadoTipoEspectaculo($id, $estado, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateEstadoTipoEspectaculo_args();
    $args->id = $id;
    $args->estado = $estado;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoTipoEspectaculo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoTipoEspectaculo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoTipoEspectaculo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateEstadoTipoEspectaculo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateEstadoTipoEspectaculo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoTipoEspectaculo failed: unknown result");
  }

  public function updateTipoEspectaculo($nombre, $descripcion, $estado, $idTipoEspectaculo, $usuario_modificacion)
  {
    $this->send_updateTipoEspectaculo($nombre, $descripcion, $estado, $idTipoEspectaculo, $usuario_modificacion);
    return $this->recv_updateTipoEspectaculo();
  }

  public function send_updateTipoEspectaculo($nombre, $descripcion, $estado, $idTipoEspectaculo, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateTipoEspectaculo_args();
    $args->nombre = $nombre;
    $args->descripcion = $descripcion;
    $args->estado = $estado;
    $args->idTipoEspectaculo = $idTipoEspectaculo;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateTipoEspectaculo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateTipoEspectaculo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateTipoEspectaculo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateTipoEspectaculo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateTipoEspectaculo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateTipoEspectaculo failed: unknown result");
  }

  public function insertTipoEspectaculo($nombre, $descripcion, $estado, $usuarioCreacion)
  {
    $this->send_insertTipoEspectaculo($nombre, $descripcion, $estado, $usuarioCreacion);
    return $this->recv_insertTipoEspectaculo();
  }

  public function send_insertTipoEspectaculo($nombre, $descripcion, $estado, $usuarioCreacion)
  {
    $args = new \CRUDServer_insertTipoEspectaculo_args();
    $args->nombre = $nombre;
    $args->descripcion = $descripcion;
    $args->estado = $estado;
    $args->usuarioCreacion = $usuarioCreacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertTipoEspectaculo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertTipoEspectaculo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertTipoEspectaculo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_insertTipoEspectaculo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_insertTipoEspectaculo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertTipoEspectaculo failed: unknown result");
  }

  public function getTipoEvento($idTipoEvento)
  {
    $this->send_getTipoEvento($idTipoEvento);
    return $this->recv_getTipoEvento();
  }

  public function send_getTipoEvento($idTipoEvento)
  {
    $args = new \CRUDServer_getTipoEvento_args();
    $args->idTipoEvento = $idTipoEvento;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getTipoEvento', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getTipoEvento', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getTipoEvento()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getTipoEvento_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getTipoEvento_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getTipoEvento failed: unknown result");
  }

  public function getAllTipoEvento()
  {
    $this->send_getAllTipoEvento();
    return $this->recv_getAllTipoEvento();
  }

  public function send_getAllTipoEvento()
  {
    $args = new \CRUDServer_getAllTipoEvento_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllTipoEvento', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllTipoEvento', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllTipoEvento()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAllTipoEvento_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAllTipoEvento_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllTipoEvento failed: unknown result");
  }

  public function updateEstadoTipoEvento($id, $estado, $usuario_modificacion)
  {
    $this->send_updateEstadoTipoEvento($id, $estado, $usuario_modificacion);
    return $this->recv_updateEstadoTipoEvento();
  }

  public function send_updateEstadoTipoEvento($id, $estado, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateEstadoTipoEvento_args();
    $args->id = $id;
    $args->estado = $estado;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoTipoEvento', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoTipoEvento', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoTipoEvento()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateEstadoTipoEvento_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateEstadoTipoEvento_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoTipoEvento failed: unknown result");
  }

  public function updateTipoEvento($nombre, $descripcion, $estado, $idTipoEvento, $usuario_modificacion)
  {
    $this->send_updateTipoEvento($nombre, $descripcion, $estado, $idTipoEvento, $usuario_modificacion);
    return $this->recv_updateTipoEvento();
  }

  public function send_updateTipoEvento($nombre, $descripcion, $estado, $idTipoEvento, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateTipoEvento_args();
    $args->nombre = $nombre;
    $args->descripcion = $descripcion;
    $args->estado = $estado;
    $args->idTipoEvento = $idTipoEvento;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateTipoEvento', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateTipoEvento', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateTipoEvento()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateTipoEvento_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateTipoEvento_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateTipoEvento failed: unknown result");
  }

  public function insertTipoEvento($nombre, $descripcion, $estado, $usuarioCreacion)
  {
    $this->send_insertTipoEvento($nombre, $descripcion, $estado, $usuarioCreacion);
    return $this->recv_insertTipoEvento();
  }

  public function send_insertTipoEvento($nombre, $descripcion, $estado, $usuarioCreacion)
  {
    $args = new \CRUDServer_insertTipoEvento_args();
    $args->nombre = $nombre;
    $args->descripcion = $descripcion;
    $args->estado = $estado;
    $args->usuarioCreacion = $usuarioCreacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertTipoEvento', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertTipoEvento', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertTipoEvento()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_insertTipoEvento_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_insertTipoEvento_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertTipoEvento failed: unknown result");
  }

  public function getAllCaja($idUsuario)
  {
    $this->send_getAllCaja($idUsuario);
    return $this->recv_getAllCaja();
  }

  public function send_getAllCaja($idUsuario)
  {
    $args = new \CRUDServer_getAllCaja_args();
    $args->idUsuario = $idUsuario;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllCaja', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllCaja', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllCaja()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAllCaja_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAllCaja_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllCaja failed: unknown result");
  }

  public function getCompraReserva($idUsuario)
  {
    $this->send_getCompraReserva($idUsuario);
    return $this->recv_getCompraReserva();
  }

  public function send_getCompraReserva($idUsuario)
  {
    $args = new \CRUDServer_getCompraReserva_args();
    $args->idUsuario = $idUsuario;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCompraReserva', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCompraReserva', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCompraReserva()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getCompraReserva_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getCompraReserva_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getCompraReserva failed: unknown result");
  }

  public function updateCompraReserva($idUsuario, $sub_total, $donacion, $dolares_canjeados, $descuento, $total, $usuario_modificacion)
  {
    $this->send_updateCompraReserva($idUsuario, $sub_total, $donacion, $dolares_canjeados, $descuento, $total, $usuario_modificacion);
    return $this->recv_updateCompraReserva();
  }

  public function send_updateCompraReserva($idUsuario, $sub_total, $donacion, $dolares_canjeados, $descuento, $total, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateCompraReserva_args();
    $args->idUsuario = $idUsuario;
    $args->sub_total = $sub_total;
    $args->donacion = $donacion;
    $args->dolares_canjeados = $dolares_canjeados;
    $args->descuento = $descuento;
    $args->total = $total;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateCompraReserva', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateCompraReserva', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateCompraReserva()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateCompraReserva_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateCompraReserva_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateCompraReserva failed: unknown result");
  }

  public function insertEsperaPago($idUsuario, $tipo, $id_tarjeta, $id_banco, $lote, $monto, $usuario_modificacion)
  {
    $this->send_insertEsperaPago($idUsuario, $tipo, $id_tarjeta, $id_banco, $lote, $monto, $usuario_modificacion);
    return $this->recv_insertEsperaPago();
  }

  public function send_insertEsperaPago($idUsuario, $tipo, $id_tarjeta, $id_banco, $lote, $monto, $usuario_modificacion)
  {
    $args = new \CRUDServer_insertEsperaPago_args();
    $args->idUsuario = $idUsuario;
    $args->tipo = $tipo;
    $args->id_tarjeta = $id_tarjeta;
    $args->id_banco = $id_banco;
    $args->lote = $lote;
    $args->monto = $monto;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertEsperaPago', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertEsperaPago', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertEsperaPago()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_insertEsperaPago_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_insertEsperaPago_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertEsperaPago failed: unknown result");
  }

  public function getAllEsperaPago($idUsuario)
  {
    $this->send_getAllEsperaPago($idUsuario);
    return $this->recv_getAllEsperaPago();
  }

  public function send_getAllEsperaPago($idUsuario)
  {
    $args = new \CRUDServer_getAllEsperaPago_args();
    $args->idUsuario = $idUsuario;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllEsperaPago', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllEsperaPago', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllEsperaPago()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAllEsperaPago_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAllEsperaPago_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllEsperaPago failed: unknown result");
  }

  public function deleteEsperaPago($idUsuario, $idEsperaPago)
  {
    $this->send_deleteEsperaPago($idUsuario, $idEsperaPago);
    return $this->recv_deleteEsperaPago();
  }

  public function send_deleteEsperaPago($idUsuario, $idEsperaPago)
  {
    $args = new \CRUDServer_deleteEsperaPago_args();
    $args->idUsuario = $idUsuario;
    $args->idEsperaPago = $idEsperaPago;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deleteEsperaPago', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deleteEsperaPago', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deleteEsperaPago()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_deleteEsperaPago_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_deleteEsperaPago_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("deleteEsperaPago failed: unknown result");
  }

  public function getAllPuntos($idUsuarioCliente)
  {
    $this->send_getAllPuntos($idUsuarioCliente);
    return $this->recv_getAllPuntos();
  }

  public function send_getAllPuntos($idUsuarioCliente)
  {
    $args = new \CRUDServer_getAllPuntos_args();
    $args->idUsuarioCliente = $idUsuarioCliente;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllPuntos', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllPuntos', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllPuntos()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAllPuntos_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAllPuntos_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllPuntos failed: unknown result");
  }

  public function insertDonacion($idUsuario, $idUsuarioCliente, $donacion, $puntos_canjeados)
  {
    $this->send_insertDonacion($idUsuario, $idUsuarioCliente, $donacion, $puntos_canjeados);
    return $this->recv_insertDonacion();
  }

  public function send_insertDonacion($idUsuario, $idUsuarioCliente, $donacion, $puntos_canjeados)
  {
    $args = new \CRUDServer_insertDonacion_args();
    $args->idUsuario = $idUsuario;
    $args->idUsuarioCliente = $idUsuarioCliente;
    $args->donacion = $donacion;
    $args->puntos_canjeados = $puntos_canjeados;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertDonacion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertDonacion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertDonacion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_insertDonacion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_insertDonacion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertDonacion failed: unknown result");
  }

  public function getCaja($idCaja, $idUsuario)
  {
    $this->send_getCaja($idCaja, $idUsuario);
    return $this->recv_getCaja();
  }

  public function send_getCaja($idCaja, $idUsuario)
  {
    $args = new \CRUDServer_getCaja_args();
    $args->idCaja = $idCaja;
    $args->idUsuario = $idUsuario;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCaja', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCaja', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCaja()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getCaja_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getCaja_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getCaja failed: unknown result");
  }

  public function editarCaja($idUsuario, $idCaja)
  {
    $this->send_editarCaja($idUsuario, $idCaja);
    return $this->recv_editarCaja();
  }

  public function send_editarCaja($idUsuario, $idCaja)
  {
    $args = new \CRUDServer_editarCaja_args();
    $args->idUsuario = $idUsuario;
    $args->idCaja = $idCaja;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'editarCaja', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('editarCaja', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_editarCaja()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_editarCaja_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_editarCaja_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("editarCaja failed: unknown result");
  }

  public function abrirCaja($idUsuario, $Usuario)
  {
    $this->send_abrirCaja($idUsuario, $Usuario);
    return $this->recv_abrirCaja();
  }

  public function send_abrirCaja($idUsuario, $Usuario)
  {
    $args = new \CRUDServer_abrirCaja_args();
    $args->idUsuario = $idUsuario;
    $args->Usuario = $Usuario;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'abrirCaja', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('abrirCaja', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_abrirCaja()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_abrirCaja_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_abrirCaja_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("abrirCaja failed: unknown result");
  }

  public function actualizarReserva($idUsuario)
  {
    $this->send_actualizarReserva($idUsuario);
    return $this->recv_actualizarReserva();
  }

  public function send_actualizarReserva($idUsuario)
  {
    $args = new \CRUDServer_actualizarReserva_args();
    $args->idUsuario = $idUsuario;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'actualizarReserva', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('actualizarReserva', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_actualizarReserva()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_actualizarReserva_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_actualizarReserva_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("actualizarReserva failed: unknown result");
  }

  public function updateEstadoCaja($id, $estado, $usuario_modificacion)
  {
    $this->send_updateEstadoCaja($id, $estado, $usuario_modificacion);
    return $this->recv_updateEstadoCaja();
  }

  public function send_updateEstadoCaja($id, $estado, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateEstadoCaja_args();
    $args->id = $id;
    $args->estado = $estado;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoCaja', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoCaja', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoCaja()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateEstadoCaja_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateEstadoCaja_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoCaja failed: unknown result");
  }

  public function getFacturacion($idFacturacion)
  {
    $this->send_getFacturacion($idFacturacion);
    return $this->recv_getFacturacion();
  }

  public function send_getFacturacion($idFacturacion)
  {
    $args = new \CRUDServer_getFacturacion_args();
    $args->idFacturacion = $idFacturacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getFacturacion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getFacturacion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getFacturacion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getFacturacion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getFacturacion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getFacturacion failed: unknown result");
  }

  public function getAllFacturacion($idUsuario)
  {
    $this->send_getAllFacturacion($idUsuario);
    return $this->recv_getAllFacturacion();
  }

  public function send_getAllFacturacion($idUsuario)
  {
    $args = new \CRUDServer_getAllFacturacion_args();
    $args->idUsuario = $idUsuario;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllFacturacion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllFacturacion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllFacturacion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAllFacturacion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAllFacturacion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllFacturacion failed: unknown result");
  }

  public function updateEstadoFacturacion($id, $estado, $usuario_modificacion)
  {
    $this->send_updateEstadoFacturacion($id, $estado, $usuario_modificacion);
    return $this->recv_updateEstadoFacturacion();
  }

  public function send_updateEstadoFacturacion($id, $estado, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateEstadoFacturacion_args();
    $args->id = $id;
    $args->estado = $estado;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoFacturacion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoFacturacion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoFacturacion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateEstadoFacturacion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateEstadoFacturacion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoFacturacion failed: unknown result");
  }

  public function updateFacturacion($nombres, $apellidos, $tipo, $cedula, $razon, $direccion, $correo, $estado, $idUsuario, $idFacturacion, $usuario_modificacion)
  {
    $this->send_updateFacturacion($nombres, $apellidos, $tipo, $cedula, $razon, $direccion, $correo, $estado, $idUsuario, $idFacturacion, $usuario_modificacion);
    return $this->recv_updateFacturacion();
  }

  public function send_updateFacturacion($nombres, $apellidos, $tipo, $cedula, $razon, $direccion, $correo, $estado, $idUsuario, $idFacturacion, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateFacturacion_args();
    $args->nombres = $nombres;
    $args->apellidos = $apellidos;
    $args->tipo = $tipo;
    $args->cedula = $cedula;
    $args->razon = $razon;
    $args->direccion = $direccion;
    $args->correo = $correo;
    $args->estado = $estado;
    $args->idUsuario = $idUsuario;
    $args->idFacturacion = $idFacturacion;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateFacturacion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateFacturacion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateFacturacion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateFacturacion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateFacturacion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateFacturacion failed: unknown result");
  }

  public function insertFacturacion($nombres, $apellidos, $tipo, $cedula, $razon, $direccion, $correo, $estado, $idUsuario, $usuarioCreacion)
  {
    $this->send_insertFacturacion($nombres, $apellidos, $tipo, $cedula, $razon, $direccion, $correo, $estado, $idUsuario, $usuarioCreacion);
    return $this->recv_insertFacturacion();
  }

  public function send_insertFacturacion($nombres, $apellidos, $tipo, $cedula, $razon, $direccion, $correo, $estado, $idUsuario, $usuarioCreacion)
  {
    $args = new \CRUDServer_insertFacturacion_args();
    $args->nombres = $nombres;
    $args->apellidos = $apellidos;
    $args->tipo = $tipo;
    $args->cedula = $cedula;
    $args->razon = $razon;
    $args->direccion = $direccion;
    $args->correo = $correo;
    $args->estado = $estado;
    $args->idUsuario = $idUsuario;
    $args->usuarioCreacion = $usuarioCreacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertFacturacion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertFacturacion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertFacturacion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_insertFacturacion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_insertFacturacion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertFacturacion failed: unknown result");
  }

  public function getUsuario($idUsuario)
  {
    $this->send_getUsuario($idUsuario);
    return $this->recv_getUsuario();
  }

  public function send_getUsuario($idUsuario)
  {
    $args = new \CRUDServer_getUsuario_args();
    $args->idUsuario = $idUsuario;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getUsuario', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getUsuario', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getUsuario()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getUsuario_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getUsuario_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getUsuario failed: unknown result");
  }

  public function getAllUsuario()
  {
    $this->send_getAllUsuario();
    return $this->recv_getAllUsuario();
  }

  public function send_getAllUsuario()
  {
    $args = new \CRUDServer_getAllUsuario_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllUsuario', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllUsuario', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllUsuario()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAllUsuario_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAllUsuario_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllUsuario failed: unknown result");
  }

  public function updateEstadoUsuario($idUsuario, $estado, $usuario_modificacion)
  {
    $this->send_updateEstadoUsuario($idUsuario, $estado, $usuario_modificacion);
    return $this->recv_updateEstadoUsuario();
  }

  public function send_updateEstadoUsuario($idUsuario, $estado, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateEstadoUsuario_args();
    $args->idUsuario = $idUsuario;
    $args->estado = $estado;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoUsuario', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoUsuario', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoUsuario()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateEstadoUsuario_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateEstadoUsuario_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoUsuario failed: unknown result");
  }

  public function updateUsuario($nombres, $apellidos, $usuario, $cedula, $sexo, $correo, $celular, $contrasena, $idPerfil, $fechaNacimiento, $direccion, $estado, $idUsuario, $usuario_modificacion)
  {
    $this->send_updateUsuario($nombres, $apellidos, $usuario, $cedula, $sexo, $correo, $celular, $contrasena, $idPerfil, $fechaNacimiento, $direccion, $estado, $idUsuario, $usuario_modificacion);
    return $this->recv_updateUsuario();
  }

  public function send_updateUsuario($nombres, $apellidos, $usuario, $cedula, $sexo, $correo, $celular, $contrasena, $idPerfil, $fechaNacimiento, $direccion, $estado, $idUsuario, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateUsuario_args();
    $args->nombres = $nombres;
    $args->apellidos = $apellidos;
    $args->usuario = $usuario;
    $args->cedula = $cedula;
    $args->sexo = $sexo;
    $args->correo = $correo;
    $args->celular = $celular;
    $args->contrasena = $contrasena;
    $args->idPerfil = $idPerfil;
    $args->fechaNacimiento = $fechaNacimiento;
    $args->direccion = $direccion;
    $args->estado = $estado;
    $args->idUsuario = $idUsuario;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateUsuario', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateUsuario', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateUsuario()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateUsuario_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateUsuario_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateUsuario failed: unknown result");
  }

  public function insertUsuario($nombres, $apellidos, $usuario, $cedula, $sexo, $correo, $celular, $contrasena, $idPerfil, $fechaNacimiento, $direccion, $estado, $usuarioCreacion)
  {
    $this->send_insertUsuario($nombres, $apellidos, $usuario, $cedula, $sexo, $correo, $celular, $contrasena, $idPerfil, $fechaNacimiento, $direccion, $estado, $usuarioCreacion);
    return $this->recv_insertUsuario();
  }

  public function send_insertUsuario($nombres, $apellidos, $usuario, $cedula, $sexo, $correo, $celular, $contrasena, $idPerfil, $fechaNacimiento, $direccion, $estado, $usuarioCreacion)
  {
    $args = new \CRUDServer_insertUsuario_args();
    $args->nombres = $nombres;
    $args->apellidos = $apellidos;
    $args->usuario = $usuario;
    $args->cedula = $cedula;
    $args->sexo = $sexo;
    $args->correo = $correo;
    $args->celular = $celular;
    $args->contrasena = $contrasena;
    $args->idPerfil = $idPerfil;
    $args->fechaNacimiento = $fechaNacimiento;
    $args->direccion = $direccion;
    $args->estado = $estado;
    $args->usuarioCreacion = $usuarioCreacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertUsuario', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertUsuario', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertUsuario()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_insertUsuario_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_insertUsuario_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertUsuario failed: unknown result");
  }

  public function getUsuarioCliente($idUsuarioCliente)
  {
    $this->send_getUsuarioCliente($idUsuarioCliente);
    return $this->recv_getUsuarioCliente();
  }

  public function send_getUsuarioCliente($idUsuarioCliente)
  {
    $args = new \CRUDServer_getUsuarioCliente_args();
    $args->idUsuarioCliente = $idUsuarioCliente;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getUsuarioCliente', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getUsuarioCliente', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getUsuarioCliente()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getUsuarioCliente_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getUsuarioCliente_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getUsuarioCliente failed: unknown result");
  }

  public function getAllUsuarioCliente()
  {
    $this->send_getAllUsuarioCliente();
    return $this->recv_getAllUsuarioCliente();
  }

  public function send_getAllUsuarioCliente()
  {
    $args = new \CRUDServer_getAllUsuarioCliente_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllUsuarioCliente', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllUsuarioCliente', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllUsuarioCliente()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAllUsuarioCliente_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAllUsuarioCliente_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllUsuarioCliente failed: unknown result");
  }

  public function updateEstadoUsuarioCliente($idUsuarioCliente, $estado, $usuario_modificacion)
  {
    $this->send_updateEstadoUsuarioCliente($idUsuarioCliente, $estado, $usuario_modificacion);
    return $this->recv_updateEstadoUsuarioCliente();
  }

  public function send_updateEstadoUsuarioCliente($idUsuarioCliente, $estado, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateEstadoUsuarioCliente_args();
    $args->idUsuarioCliente = $idUsuarioCliente;
    $args->estado = $estado;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoUsuarioCliente', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoUsuarioCliente', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoUsuarioCliente()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateEstadoUsuarioCliente_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateEstadoUsuarioCliente_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoUsuarioCliente failed: unknown result");
  }

  public function updateUsuarioCliente($nombres, $apellidos, $usuario, $cedula, $sexo, $correo, $celular, $contrasena, $fechaNacimiento, $direccion, $amigoTeatro, $estado, $idUsuarioCliente, $usuario_modificacion)
  {
    $this->send_updateUsuarioCliente($nombres, $apellidos, $usuario, $cedula, $sexo, $correo, $celular, $contrasena, $fechaNacimiento, $direccion, $amigoTeatro, $estado, $idUsuarioCliente, $usuario_modificacion);
    return $this->recv_updateUsuarioCliente();
  }

  public function send_updateUsuarioCliente($nombres, $apellidos, $usuario, $cedula, $sexo, $correo, $celular, $contrasena, $fechaNacimiento, $direccion, $amigoTeatro, $estado, $idUsuarioCliente, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateUsuarioCliente_args();
    $args->nombres = $nombres;
    $args->apellidos = $apellidos;
    $args->usuario = $usuario;
    $args->cedula = $cedula;
    $args->sexo = $sexo;
    $args->correo = $correo;
    $args->celular = $celular;
    $args->contrasena = $contrasena;
    $args->fechaNacimiento = $fechaNacimiento;
    $args->direccion = $direccion;
    $args->amigoTeatro = $amigoTeatro;
    $args->estado = $estado;
    $args->idUsuarioCliente = $idUsuarioCliente;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateUsuarioCliente', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateUsuarioCliente', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateUsuarioCliente()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateUsuarioCliente_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateUsuarioCliente_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateUsuarioCliente failed: unknown result");
  }

  public function insertUsuarioCliente($nombres, $apellidos, $usuario, $cedula, $sexo, $correo, $celular, $contrasena, $fechaNacimiento, $direccion, $amigoTeatro, $estado, $usuarioCreacion)
  {
    $this->send_insertUsuarioCliente($nombres, $apellidos, $usuario, $cedula, $sexo, $correo, $celular, $contrasena, $fechaNacimiento, $direccion, $amigoTeatro, $estado, $usuarioCreacion);
    return $this->recv_insertUsuarioCliente();
  }

  public function send_insertUsuarioCliente($nombres, $apellidos, $usuario, $cedula, $sexo, $correo, $celular, $contrasena, $fechaNacimiento, $direccion, $amigoTeatro, $estado, $usuarioCreacion)
  {
    $args = new \CRUDServer_insertUsuarioCliente_args();
    $args->nombres = $nombres;
    $args->apellidos = $apellidos;
    $args->usuario = $usuario;
    $args->cedula = $cedula;
    $args->sexo = $sexo;
    $args->correo = $correo;
    $args->celular = $celular;
    $args->contrasena = $contrasena;
    $args->fechaNacimiento = $fechaNacimiento;
    $args->direccion = $direccion;
    $args->amigoTeatro = $amigoTeatro;
    $args->estado = $estado;
    $args->usuarioCreacion = $usuarioCreacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertUsuarioCliente', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertUsuarioCliente', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertUsuarioCliente()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_insertUsuarioCliente_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_insertUsuarioCliente_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertUsuarioCliente failed: unknown result");
  }

  public function getUsuarioEvento($idUsuarioEvento)
  {
    $this->send_getUsuarioEvento($idUsuarioEvento);
    return $this->recv_getUsuarioEvento();
  }

  public function send_getUsuarioEvento($idUsuarioEvento)
  {
    $args = new \CRUDServer_getUsuarioEvento_args();
    $args->idUsuarioEvento = $idUsuarioEvento;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getUsuarioEvento', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getUsuarioEvento', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getUsuarioEvento()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getUsuarioEvento_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getUsuarioEvento_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getUsuarioEvento failed: unknown result");
  }

  public function getAllUsuarioEvento()
  {
    $this->send_getAllUsuarioEvento();
    return $this->recv_getAllUsuarioEvento();
  }

  public function send_getAllUsuarioEvento()
  {
    $args = new \CRUDServer_getAllUsuarioEvento_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllUsuarioEvento', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllUsuarioEvento', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllUsuarioEvento()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAllUsuarioEvento_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAllUsuarioEvento_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllUsuarioEvento failed: unknown result");
  }

  public function updateEstadoUsuarioEvento($idUsuarioEvento, $estado, $usuario_modificacion)
  {
    $this->send_updateEstadoUsuarioEvento($idUsuarioEvento, $estado, $usuario_modificacion);
    return $this->recv_updateEstadoUsuarioEvento();
  }

  public function send_updateEstadoUsuarioEvento($idUsuarioEvento, $estado, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateEstadoUsuarioEvento_args();
    $args->idUsuarioEvento = $idUsuarioEvento;
    $args->estado = $estado;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoUsuarioEvento', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoUsuarioEvento', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoUsuarioEvento()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateEstadoUsuarioEvento_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateEstadoUsuarioEvento_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoUsuarioEvento failed: unknown result");
  }

  public function updateUsuarioEvento($nombres, $apellidos, $usuario, $cedula, $sexo, $correo, $celular, $contrasena, $idPerfil, $fechaNacimiento, $direccion, $estado, $idUsuario, $usuario_modificacion)
  {
    $this->send_updateUsuarioEvento($nombres, $apellidos, $usuario, $cedula, $sexo, $correo, $celular, $contrasena, $idPerfil, $fechaNacimiento, $direccion, $estado, $idUsuario, $usuario_modificacion);
    return $this->recv_updateUsuarioEvento();
  }

  public function send_updateUsuarioEvento($nombres, $apellidos, $usuario, $cedula, $sexo, $correo, $celular, $contrasena, $idPerfil, $fechaNacimiento, $direccion, $estado, $idUsuario, $usuario_modificacion)
  {
    $args = new \CRUDServer_updateUsuarioEvento_args();
    $args->nombres = $nombres;
    $args->apellidos = $apellidos;
    $args->usuario = $usuario;
    $args->cedula = $cedula;
    $args->sexo = $sexo;
    $args->correo = $correo;
    $args->celular = $celular;
    $args->contrasena = $contrasena;
    $args->idPerfil = $idPerfil;
    $args->fechaNacimiento = $fechaNacimiento;
    $args->direccion = $direccion;
    $args->estado = $estado;
    $args->idUsuario = $idUsuario;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateUsuarioEvento', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateUsuarioEvento', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateUsuarioEvento()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateUsuarioEvento_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateUsuarioEvento_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateUsuarioEvento failed: unknown result");
  }

  public function insertUsuarioEvento($nombres, $apellidos, $usuario, $cedula, $sexo, $correo, $celular, $contrasena, $idPerfil, $fechaNacimiento, $direccion, $estado, $usuarioCreacion)
  {
    $this->send_insertUsuarioEvento($nombres, $apellidos, $usuario, $cedula, $sexo, $correo, $celular, $contrasena, $idPerfil, $fechaNacimiento, $direccion, $estado, $usuarioCreacion);
    return $this->recv_insertUsuarioEvento();
  }

  public function send_insertUsuarioEvento($nombres, $apellidos, $usuario, $cedula, $sexo, $correo, $celular, $contrasena, $idPerfil, $fechaNacimiento, $direccion, $estado, $usuarioCreacion)
  {
    $args = new \CRUDServer_insertUsuarioEvento_args();
    $args->nombres = $nombres;
    $args->apellidos = $apellidos;
    $args->usuario = $usuario;
    $args->cedula = $cedula;
    $args->sexo = $sexo;
    $args->correo = $correo;
    $args->celular = $celular;
    $args->contrasena = $contrasena;
    $args->idPerfil = $idPerfil;
    $args->fechaNacimiento = $fechaNacimiento;
    $args->direccion = $direccion;
    $args->estado = $estado;
    $args->usuarioCreacion = $usuarioCreacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertUsuarioEvento', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertUsuarioEvento', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertUsuarioEvento()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_insertUsuarioEvento_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_insertUsuarioEvento_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertUsuarioEvento failed: unknown result");
  }

  public function login($usuario, $contrasena)
  {
    $this->send_login($usuario, $contrasena);
    return $this->recv_login();
  }

  public function send_login($usuario, $contrasena)
  {
    $args = new \CRUDServer_login_args();
    $args->usuario = $usuario;
    $args->contrasena = $contrasena;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'login', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('login', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_login()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_login_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_login_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("login failed: unknown result");
  }

  public function generarCodigo($celular, $correo)
  {
    $this->send_generarCodigo($celular, $correo);
    return $this->recv_generarCodigo();
  }

  public function send_generarCodigo($celular, $correo)
  {
    $args = new \CRUDServer_generarCodigo_args();
    $args->celular = $celular;
    $args->correo = $correo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'generarCodigo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('generarCodigo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_generarCodigo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_generarCodigo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_generarCodigo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("generarCodigo failed: unknown result");
  }

  public function validadCodigo($celular, $codigo, $clave)
  {
    $this->send_validadCodigo($celular, $codigo, $clave);
    return $this->recv_validadCodigo();
  }

  public function send_validadCodigo($celular, $codigo, $clave)
  {
    $args = new \CRUDServer_validadCodigo_args();
    $args->celular = $celular;
    $args->codigo = $codigo;
    $args->clave = $clave;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'validadCodigo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('validadCodigo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_validadCodigo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_validadCodigo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_validadCodigo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("validadCodigo failed: unknown result");
  }

}


// HELPER FUNCTIONS AND STRUCTURES

class CRUDServer_getAsiento_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idAsiento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idAsiento = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idAsiento'])) {
        $this->idAsiento = $vals['idAsiento'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAsiento_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idAsiento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAsiento_args');
    if ($this->idAsiento !== null) {
      $xfer += $output->writeFieldBegin('idAsiento', TType::STRING, 1);
      $xfer += $output->writeString($this->idAsiento);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAsiento_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAsiento_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAsiento_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllAsiento_args {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'CRUDServer_getAllAsiento_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllAsiento_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllAsiento_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllAsiento_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllAsiento_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoAsiento_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoAsiento_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoAsiento_args');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 2);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 3);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoAsiento_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoAsiento_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoAsiento_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateAsiento_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'numero',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'fila',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'lateral',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'idAsiento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $numero = null;
  /**
   * @var string
   */
  public $fila = null;
  /**
   * @var string
   */
  public $lateral = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $idAsiento = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['numero'])) {
        $this->numero = $vals['numero'];
      }
      if (isset($vals['fila'])) {
        $this->fila = $vals['fila'];
      }
      if (isset($vals['lateral'])) {
        $this->lateral = $vals['lateral'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['idAsiento'])) {
        $this->idAsiento = $vals['idAsiento'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateAsiento_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->numero);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fila);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lateral);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idAsiento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateAsiento_args');
    if ($this->numero !== null) {
      $xfer += $output->writeFieldBegin('numero', TType::STRING, 1);
      $xfer += $output->writeString($this->numero);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fila !== null) {
      $xfer += $output->writeFieldBegin('fila', TType::STRING, 2);
      $xfer += $output->writeString($this->fila);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lateral !== null) {
      $xfer += $output->writeFieldBegin('lateral', TType::STRING, 3);
      $xfer += $output->writeString($this->lateral);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 4);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idAsiento !== null) {
      $xfer += $output->writeFieldBegin('idAsiento', TType::STRING, 5);
      $xfer += $output->writeString($this->idAsiento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 6);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateAsiento_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateAsiento_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateAsiento_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertAsiento_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'numero',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'fila',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'lateral',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'usuarioCreacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $numero = null;
  /**
   * @var string
   */
  public $fila = null;
  /**
   * @var string
   */
  public $lateral = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuarioCreacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['numero'])) {
        $this->numero = $vals['numero'];
      }
      if (isset($vals['fila'])) {
        $this->fila = $vals['fila'];
      }
      if (isset($vals['lateral'])) {
        $this->lateral = $vals['lateral'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuarioCreacion'])) {
        $this->usuarioCreacion = $vals['usuarioCreacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertAsiento_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->numero);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fila);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lateral);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuarioCreacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertAsiento_args');
    if ($this->numero !== null) {
      $xfer += $output->writeFieldBegin('numero', TType::STRING, 1);
      $xfer += $output->writeString($this->numero);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fila !== null) {
      $xfer += $output->writeFieldBegin('fila', TType::STRING, 2);
      $xfer += $output->writeString($this->fila);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lateral !== null) {
      $xfer += $output->writeFieldBegin('lateral', TType::STRING, 3);
      $xfer += $output->writeString($this->lateral);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 4);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuarioCreacion !== null) {
      $xfer += $output->writeFieldBegin('usuarioCreacion', TType::STRING, 5);
      $xfer += $output->writeString($this->usuarioCreacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertAsiento_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertAsiento_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertAsiento_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getBanco_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idBanco',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idBanco = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idBanco'])) {
        $this->idBanco = $vals['idBanco'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getBanco_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idBanco);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getBanco_args');
    if ($this->idBanco !== null) {
      $xfer += $output->writeFieldBegin('idBanco', TType::STRING, 1);
      $xfer += $output->writeString($this->idBanco);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getBanco_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getBanco_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getBanco_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllBanco_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'tipo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $tipo = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['tipo'])) {
        $this->tipo = $vals['tipo'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllBanco_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllBanco_args');
    if ($this->tipo !== null) {
      $xfer += $output->writeFieldBegin('tipo', TType::STRING, 1);
      $xfer += $output->writeString($this->tipo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllBanco_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllBanco_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllBanco_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoBanco_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoBanco_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoBanco_args');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 2);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 3);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoBanco_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoBanco_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoBanco_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateBanco_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'idBanco',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $idBanco = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['idBanco'])) {
        $this->idBanco = $vals['idBanco'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateBanco_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idBanco);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateBanco_args');
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 1);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 2);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idBanco !== null) {
      $xfer += $output->writeFieldBegin('idBanco', TType::STRING, 3);
      $xfer += $output->writeString($this->idBanco);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 4);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateBanco_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateBanco_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateBanco_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertBanco_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'usuarioCreacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuarioCreacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuarioCreacion'])) {
        $this->usuarioCreacion = $vals['usuarioCreacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertBanco_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuarioCreacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertBanco_args');
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 1);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 2);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuarioCreacion !== null) {
      $xfer += $output->writeFieldBegin('usuarioCreacion', TType::STRING, 3);
      $xfer += $output->writeString($this->usuarioCreacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertBanco_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertBanco_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertBanco_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getFichaArtistica_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idficha',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idficha = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idficha'])) {
        $this->idficha = $vals['idficha'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getFichaArtistica_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idficha);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getFichaArtistica_args');
    if ($this->idficha !== null) {
      $xfer += $output->writeFieldBegin('idficha', TType::STRING, 1);
      $xfer += $output->writeString($this->idficha);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getFichaArtistica_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getFichaArtistica_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getFichaArtistica_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_deleteFichaArtistica_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idficha',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idficha = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idficha'])) {
        $this->idficha = $vals['idficha'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_deleteFichaArtistica_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idficha);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_deleteFichaArtistica_args');
    if ($this->idficha !== null) {
      $xfer += $output->writeFieldBegin('idficha', TType::STRING, 1);
      $xfer += $output->writeString($this->idficha);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_deleteFichaArtistica_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_deleteFichaArtistica_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_deleteFichaArtistica_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllFichaArtistica_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idEvento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idEvento = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idEvento'])) {
        $this->idEvento = $vals['idEvento'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllFichaArtistica_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idEvento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllFichaArtistica_args');
    if ($this->idEvento !== null) {
      $xfer += $output->writeFieldBegin('idEvento', TType::STRING, 1);
      $xfer += $output->writeString($this->idEvento);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllFichaArtistica_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllFichaArtistica_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllFichaArtistica_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateFichaArtistica_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'titulo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'descripcion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'idficha',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $titulo = null;
  /**
   * @var string
   */
  public $descripcion = null;
  /**
   * @var string
   */
  public $idficha = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['titulo'])) {
        $this->titulo = $vals['titulo'];
      }
      if (isset($vals['descripcion'])) {
        $this->descripcion = $vals['descripcion'];
      }
      if (isset($vals['idficha'])) {
        $this->idficha = $vals['idficha'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateFichaArtistica_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->titulo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descripcion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idficha);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateFichaArtistica_args');
    if ($this->titulo !== null) {
      $xfer += $output->writeFieldBegin('titulo', TType::STRING, 1);
      $xfer += $output->writeString($this->titulo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descripcion !== null) {
      $xfer += $output->writeFieldBegin('descripcion', TType::STRING, 2);
      $xfer += $output->writeString($this->descripcion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idficha !== null) {
      $xfer += $output->writeFieldBegin('idficha', TType::STRING, 3);
      $xfer += $output->writeString($this->idficha);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 4);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateFichaArtistica_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateFichaArtistica_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateFichaArtistica_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertFichaArtistica_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idEvento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'titulo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'descripcion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'usuarioCreacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idEvento = null;
  /**
   * @var string
   */
  public $titulo = null;
  /**
   * @var string
   */
  public $descripcion = null;
  /**
   * @var string
   */
  public $usuarioCreacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idEvento'])) {
        $this->idEvento = $vals['idEvento'];
      }
      if (isset($vals['titulo'])) {
        $this->titulo = $vals['titulo'];
      }
      if (isset($vals['descripcion'])) {
        $this->descripcion = $vals['descripcion'];
      }
      if (isset($vals['usuarioCreacion'])) {
        $this->usuarioCreacion = $vals['usuarioCreacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertFichaArtistica_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idEvento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->titulo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descripcion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuarioCreacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertFichaArtistica_args');
    if ($this->idEvento !== null) {
      $xfer += $output->writeFieldBegin('idEvento', TType::STRING, 1);
      $xfer += $output->writeString($this->idEvento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->titulo !== null) {
      $xfer += $output->writeFieldBegin('titulo', TType::STRING, 2);
      $xfer += $output->writeString($this->titulo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descripcion !== null) {
      $xfer += $output->writeFieldBegin('descripcion', TType::STRING, 3);
      $xfer += $output->writeString($this->descripcion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuarioCreacion !== null) {
      $xfer += $output->writeFieldBegin('usuarioCreacion', TType::STRING, 4);
      $xfer += $output->writeString($this->usuarioCreacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertFichaArtistica_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertFichaArtistica_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertFichaArtistica_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getBancoTarjeta_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idBancoTarjeta',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idBancoTarjeta = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idBancoTarjeta'])) {
        $this->idBancoTarjeta = $vals['idBancoTarjeta'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getBancoTarjeta_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idBancoTarjeta);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getBancoTarjeta_args');
    if ($this->idBancoTarjeta !== null) {
      $xfer += $output->writeFieldBegin('idBancoTarjeta', TType::STRING, 1);
      $xfer += $output->writeString($this->idBancoTarjeta);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getBancoTarjeta_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getBancoTarjeta_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getBancoTarjeta_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllBancoTarjeta_args {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'CRUDServer_getAllBancoTarjeta_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllBancoTarjeta_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllBancoTarjeta_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllBancoTarjeta_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllBancoTarjeta_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoBancoTarjeta_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoBancoTarjeta_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoBancoTarjeta_args');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 2);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 3);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoBancoTarjeta_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoBancoTarjeta_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoBancoTarjeta_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateBancoTarjeta_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idBanco',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'idTarjeta',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'descuento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'idBancoTarjeta',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idBanco = null;
  /**
   * @var string
   */
  public $idTarjeta = null;
  /**
   * @var string
   */
  public $descuento = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $idBancoTarjeta = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idBanco'])) {
        $this->idBanco = $vals['idBanco'];
      }
      if (isset($vals['idTarjeta'])) {
        $this->idTarjeta = $vals['idTarjeta'];
      }
      if (isset($vals['descuento'])) {
        $this->descuento = $vals['descuento'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['idBancoTarjeta'])) {
        $this->idBancoTarjeta = $vals['idBancoTarjeta'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateBancoTarjeta_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idBanco);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idTarjeta);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descuento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idBancoTarjeta);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateBancoTarjeta_args');
    if ($this->idBanco !== null) {
      $xfer += $output->writeFieldBegin('idBanco', TType::STRING, 1);
      $xfer += $output->writeString($this->idBanco);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idTarjeta !== null) {
      $xfer += $output->writeFieldBegin('idTarjeta', TType::STRING, 2);
      $xfer += $output->writeString($this->idTarjeta);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descuento !== null) {
      $xfer += $output->writeFieldBegin('descuento', TType::STRING, 3);
      $xfer += $output->writeString($this->descuento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 4);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idBancoTarjeta !== null) {
      $xfer += $output->writeFieldBegin('idBancoTarjeta', TType::STRING, 5);
      $xfer += $output->writeString($this->idBancoTarjeta);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 6);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateBancoTarjeta_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateBancoTarjeta_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateBancoTarjeta_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertBancoTarjeta_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idBanco',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'idTarjeta',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'descuento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'usuarioCreacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idBanco = null;
  /**
   * @var string
   */
  public $idTarjeta = null;
  /**
   * @var string
   */
  public $descuento = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuarioCreacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idBanco'])) {
        $this->idBanco = $vals['idBanco'];
      }
      if (isset($vals['idTarjeta'])) {
        $this->idTarjeta = $vals['idTarjeta'];
      }
      if (isset($vals['descuento'])) {
        $this->descuento = $vals['descuento'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuarioCreacion'])) {
        $this->usuarioCreacion = $vals['usuarioCreacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertBancoTarjeta_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idBanco);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idTarjeta);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descuento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuarioCreacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertBancoTarjeta_args');
    if ($this->idBanco !== null) {
      $xfer += $output->writeFieldBegin('idBanco', TType::STRING, 1);
      $xfer += $output->writeString($this->idBanco);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idTarjeta !== null) {
      $xfer += $output->writeFieldBegin('idTarjeta', TType::STRING, 2);
      $xfer += $output->writeString($this->idTarjeta);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descuento !== null) {
      $xfer += $output->writeFieldBegin('descuento', TType::STRING, 3);
      $xfer += $output->writeString($this->descuento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 4);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuarioCreacion !== null) {
      $xfer += $output->writeFieldBegin('usuarioCreacion', TType::STRING, 5);
      $xfer += $output->writeString($this->usuarioCreacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertBancoTarjeta_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertBancoTarjeta_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertBancoTarjeta_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getCategoria_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idCategoria',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idCategoria = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idCategoria'])) {
        $this->idCategoria = $vals['idCategoria'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getCategoria_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idCategoria);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getCategoria_args');
    if ($this->idCategoria !== null) {
      $xfer += $output->writeFieldBegin('idCategoria', TType::STRING, 1);
      $xfer += $output->writeString($this->idCategoria);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getCategoria_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getCategoria_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getCategoria_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllCategoria_args {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'CRUDServer_getAllCategoria_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllCategoria_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllCategoria_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllCategoria_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllCategoria_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoCategoria_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoCategoria_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoCategoria_args');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 2);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 3);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoCategoria_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoCategoria_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoCategoria_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateCategoria_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'descripcion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'idCategoria',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $descripcion = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $idCategoria = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['descripcion'])) {
        $this->descripcion = $vals['descripcion'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['idCategoria'])) {
        $this->idCategoria = $vals['idCategoria'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateCategoria_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descripcion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idCategoria);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateCategoria_args');
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 1);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descripcion !== null) {
      $xfer += $output->writeFieldBegin('descripcion', TType::STRING, 2);
      $xfer += $output->writeString($this->descripcion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 3);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idCategoria !== null) {
      $xfer += $output->writeFieldBegin('idCategoria', TType::STRING, 4);
      $xfer += $output->writeString($this->idCategoria);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 5);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateCategoria_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateCategoria_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateCategoria_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertCategoria_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'descripcion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'usuarioCreacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $descripcion = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuarioCreacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['descripcion'])) {
        $this->descripcion = $vals['descripcion'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuarioCreacion'])) {
        $this->usuarioCreacion = $vals['usuarioCreacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertCategoria_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descripcion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuarioCreacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertCategoria_args');
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 1);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descripcion !== null) {
      $xfer += $output->writeFieldBegin('descripcion', TType::STRING, 2);
      $xfer += $output->writeString($this->descripcion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 3);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuarioCreacion !== null) {
      $xfer += $output->writeFieldBegin('usuarioCreacion', TType::STRING, 4);
      $xfer += $output->writeString($this->usuarioCreacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertCategoria_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertCategoria_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertCategoria_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getImagen_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idImagen',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'tipo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idImagen = null;
  /**
   * @var string
   */
  public $tipo = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idImagen'])) {
        $this->idImagen = $vals['idImagen'];
      }
      if (isset($vals['tipo'])) {
        $this->tipo = $vals['tipo'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getImagen_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idImagen);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getImagen_args');
    if ($this->idImagen !== null) {
      $xfer += $output->writeFieldBegin('idImagen', TType::STRING, 1);
      $xfer += $output->writeString($this->idImagen);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipo !== null) {
      $xfer += $output->writeFieldBegin('tipo', TType::STRING, 2);
      $xfer += $output->writeString($this->tipo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getImagen_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getImagen_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getImagen_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllImagen_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'tipo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $tipo = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['tipo'])) {
        $this->tipo = $vals['tipo'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllImagen_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllImagen_args');
    if ($this->tipo !== null) {
      $xfer += $output->writeFieldBegin('tipo', TType::STRING, 1);
      $xfer += $output->writeString($this->tipo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllImagen_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllImagen_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllImagen_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoImagen_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'tipo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $tipo = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['tipo'])) {
        $this->tipo = $vals['tipo'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoImagen_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoImagen_args');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipo !== null) {
      $xfer += $output->writeFieldBegin('tipo', TType::STRING, 2);
      $xfer += $output->writeString($this->tipo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 3);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 4);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoImagen_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoImagen_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoImagen_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateImagen_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'descripcion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'tipo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'idImagen',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $descripcion = null;
  /**
   * @var string
   */
  public $tipo = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $idImagen = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['descripcion'])) {
        $this->descripcion = $vals['descripcion'];
      }
      if (isset($vals['tipo'])) {
        $this->tipo = $vals['tipo'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['idImagen'])) {
        $this->idImagen = $vals['idImagen'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateImagen_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descripcion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idImagen);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateImagen_args');
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 1);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descripcion !== null) {
      $xfer += $output->writeFieldBegin('descripcion', TType::STRING, 2);
      $xfer += $output->writeString($this->descripcion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipo !== null) {
      $xfer += $output->writeFieldBegin('tipo', TType::STRING, 3);
      $xfer += $output->writeString($this->tipo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 4);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idImagen !== null) {
      $xfer += $output->writeFieldBegin('idImagen', TType::STRING, 5);
      $xfer += $output->writeString($this->idImagen);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 6);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateImagen_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateImagen_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateImagen_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertImagen_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'descripcion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'tipo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'usuarioCreacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $descripcion = null;
  /**
   * @var string
   */
  public $tipo = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuarioCreacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['descripcion'])) {
        $this->descripcion = $vals['descripcion'];
      }
      if (isset($vals['tipo'])) {
        $this->tipo = $vals['tipo'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuarioCreacion'])) {
        $this->usuarioCreacion = $vals['usuarioCreacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertImagen_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descripcion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuarioCreacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertImagen_args');
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 1);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descripcion !== null) {
      $xfer += $output->writeFieldBegin('descripcion', TType::STRING, 2);
      $xfer += $output->writeString($this->descripcion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipo !== null) {
      $xfer += $output->writeFieldBegin('tipo', TType::STRING, 3);
      $xfer += $output->writeString($this->tipo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 4);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuarioCreacion !== null) {
      $xfer += $output->writeFieldBegin('usuarioCreacion', TType::STRING, 5);
      $xfer += $output->writeString($this->usuarioCreacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertImagen_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertImagen_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertImagen_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getClasificacion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idClasificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idClasificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idClasificacion'])) {
        $this->idClasificacion = $vals['idClasificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getClasificacion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idClasificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getClasificacion_args');
    if ($this->idClasificacion !== null) {
      $xfer += $output->writeFieldBegin('idClasificacion', TType::STRING, 1);
      $xfer += $output->writeString($this->idClasificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getClasificacion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getClasificacion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getClasificacion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllClasificacion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'CRUDServer_getAllClasificacion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllClasificacion_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllClasificacion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllClasificacion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllClasificacion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoClasificacion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoClasificacion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoClasificacion_args');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 2);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 3);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoClasificacion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoClasificacion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoClasificacion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateClasificacion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'descripcion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'idClasificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $descripcion = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $idClasificacion = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['descripcion'])) {
        $this->descripcion = $vals['descripcion'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['idClasificacion'])) {
        $this->idClasificacion = $vals['idClasificacion'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateClasificacion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descripcion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idClasificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateClasificacion_args');
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 1);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descripcion !== null) {
      $xfer += $output->writeFieldBegin('descripcion', TType::STRING, 2);
      $xfer += $output->writeString($this->descripcion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 3);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idClasificacion !== null) {
      $xfer += $output->writeFieldBegin('idClasificacion', TType::STRING, 4);
      $xfer += $output->writeString($this->idClasificacion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 5);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateClasificacion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateClasificacion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateClasificacion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertClasificacion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'descripcion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'usuarioCreacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $descripcion = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuarioCreacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['descripcion'])) {
        $this->descripcion = $vals['descripcion'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuarioCreacion'])) {
        $this->usuarioCreacion = $vals['usuarioCreacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertClasificacion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descripcion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuarioCreacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertClasificacion_args');
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 1);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descripcion !== null) {
      $xfer += $output->writeFieldBegin('descripcion', TType::STRING, 2);
      $xfer += $output->writeString($this->descripcion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 3);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuarioCreacion !== null) {
      $xfer += $output->writeFieldBegin('usuarioCreacion', TType::STRING, 4);
      $xfer += $output->writeString($this->usuarioCreacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertClasificacion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertClasificacion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertClasificacion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getCodigoPromocional_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idCodigoPromocional',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idCodigoPromocional = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idCodigoPromocional'])) {
        $this->idCodigoPromocional = $vals['idCodigoPromocional'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getCodigoPromocional_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idCodigoPromocional);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getCodigoPromocional_args');
    if ($this->idCodigoPromocional !== null) {
      $xfer += $output->writeFieldBegin('idCodigoPromocional', TType::STRING, 1);
      $xfer += $output->writeString($this->idCodigoPromocional);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getCodigoPromocional_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getCodigoPromocional_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getCodigoPromocional_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllCodigoPromocional_args {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'CRUDServer_getAllCodigoPromocional_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllCodigoPromocional_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllCodigoPromocional_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllCodigoPromocional_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllCodigoPromocional_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoCodigoPromocional_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoCodigoPromocional_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoCodigoPromocional_args');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 2);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 3);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoCodigoPromocional_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoCodigoPromocional_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoCodigoPromocional_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateCodigoPromocional_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'codigo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'descuento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'idCodigoPromocional',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $codigo = null;
  /**
   * @var string
   */
  public $descuento = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $idCodigoPromocional = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['codigo'])) {
        $this->codigo = $vals['codigo'];
      }
      if (isset($vals['descuento'])) {
        $this->descuento = $vals['descuento'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['idCodigoPromocional'])) {
        $this->idCodigoPromocional = $vals['idCodigoPromocional'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateCodigoPromocional_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->codigo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descuento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idCodigoPromocional);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateCodigoPromocional_args');
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 1);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->codigo !== null) {
      $xfer += $output->writeFieldBegin('codigo', TType::STRING, 2);
      $xfer += $output->writeString($this->codigo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descuento !== null) {
      $xfer += $output->writeFieldBegin('descuento', TType::STRING, 3);
      $xfer += $output->writeString($this->descuento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 4);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idCodigoPromocional !== null) {
      $xfer += $output->writeFieldBegin('idCodigoPromocional', TType::STRING, 5);
      $xfer += $output->writeString($this->idCodigoPromocional);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 6);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateCodigoPromocional_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateCodigoPromocional_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateCodigoPromocional_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertCodigoPromocional_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'codigo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'descuento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'usuarioCreacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $codigo = null;
  /**
   * @var string
   */
  public $descuento = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuarioCreacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['codigo'])) {
        $this->codigo = $vals['codigo'];
      }
      if (isset($vals['descuento'])) {
        $this->descuento = $vals['descuento'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuarioCreacion'])) {
        $this->usuarioCreacion = $vals['usuarioCreacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertCodigoPromocional_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->codigo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descuento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuarioCreacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertCodigoPromocional_args');
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 1);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->codigo !== null) {
      $xfer += $output->writeFieldBegin('codigo', TType::STRING, 2);
      $xfer += $output->writeString($this->codigo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descuento !== null) {
      $xfer += $output->writeFieldBegin('descuento', TType::STRING, 3);
      $xfer += $output->writeString($this->descuento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 4);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuarioCreacion !== null) {
      $xfer += $output->writeFieldBegin('usuarioCreacion', TType::STRING, 5);
      $xfer += $output->writeString($this->usuarioCreacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertCodigoPromocional_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertCodigoPromocional_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertCodigoPromocional_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getDistribucion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idDistribucion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idDistribucion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idDistribucion'])) {
        $this->idDistribucion = $vals['idDistribucion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getDistribucion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idDistribucion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getDistribucion_args');
    if ($this->idDistribucion !== null) {
      $xfer += $output->writeFieldBegin('idDistribucion', TType::STRING, 1);
      $xfer += $output->writeString($this->idDistribucion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getDistribucion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getDistribucion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getDistribucion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllDistribucion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'CRUDServer_getAllDistribucion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllDistribucion_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllDistribucion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllDistribucion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllDistribucion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoDistribucion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoDistribucion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoDistribucion_args');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 2);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 3);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoDistribucion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoDistribucion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoDistribucion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateDistribucion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idEvento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'idPlatea',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'idAsiento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'tipo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'idDistribucion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idEvento = null;
  /**
   * @var string
   */
  public $idPlatea = null;
  /**
   * @var string
   */
  public $idAsiento = null;
  /**
   * @var string
   */
  public $tipo = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $idDistribucion = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idEvento'])) {
        $this->idEvento = $vals['idEvento'];
      }
      if (isset($vals['idPlatea'])) {
        $this->idPlatea = $vals['idPlatea'];
      }
      if (isset($vals['idAsiento'])) {
        $this->idAsiento = $vals['idAsiento'];
      }
      if (isset($vals['tipo'])) {
        $this->tipo = $vals['tipo'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['idDistribucion'])) {
        $this->idDistribucion = $vals['idDistribucion'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateDistribucion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idEvento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idPlatea);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idAsiento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idDistribucion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateDistribucion_args');
    if ($this->idEvento !== null) {
      $xfer += $output->writeFieldBegin('idEvento', TType::STRING, 1);
      $xfer += $output->writeString($this->idEvento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idPlatea !== null) {
      $xfer += $output->writeFieldBegin('idPlatea', TType::STRING, 2);
      $xfer += $output->writeString($this->idPlatea);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idAsiento !== null) {
      $xfer += $output->writeFieldBegin('idAsiento', TType::STRING, 3);
      $xfer += $output->writeString($this->idAsiento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipo !== null) {
      $xfer += $output->writeFieldBegin('tipo', TType::STRING, 4);
      $xfer += $output->writeString($this->tipo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 5);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idDistribucion !== null) {
      $xfer += $output->writeFieldBegin('idDistribucion', TType::STRING, 6);
      $xfer += $output->writeString($this->idDistribucion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 7);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateDistribucion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateDistribucion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateDistribucion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertDistribucion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idEvento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'idPlatea',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'idAsiento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'tipo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'usuarioCreacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idEvento = null;
  /**
   * @var string
   */
  public $idPlatea = null;
  /**
   * @var string
   */
  public $idAsiento = null;
  /**
   * @var string
   */
  public $tipo = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuarioCreacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idEvento'])) {
        $this->idEvento = $vals['idEvento'];
      }
      if (isset($vals['idPlatea'])) {
        $this->idPlatea = $vals['idPlatea'];
      }
      if (isset($vals['idAsiento'])) {
        $this->idAsiento = $vals['idAsiento'];
      }
      if (isset($vals['tipo'])) {
        $this->tipo = $vals['tipo'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuarioCreacion'])) {
        $this->usuarioCreacion = $vals['usuarioCreacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertDistribucion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idEvento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idPlatea);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idAsiento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuarioCreacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertDistribucion_args');
    if ($this->idEvento !== null) {
      $xfer += $output->writeFieldBegin('idEvento', TType::STRING, 1);
      $xfer += $output->writeString($this->idEvento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idPlatea !== null) {
      $xfer += $output->writeFieldBegin('idPlatea', TType::STRING, 2);
      $xfer += $output->writeString($this->idPlatea);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idAsiento !== null) {
      $xfer += $output->writeFieldBegin('idAsiento', TType::STRING, 3);
      $xfer += $output->writeString($this->idAsiento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipo !== null) {
      $xfer += $output->writeFieldBegin('tipo', TType::STRING, 4);
      $xfer += $output->writeString($this->tipo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 5);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuarioCreacion !== null) {
      $xfer += $output->writeFieldBegin('usuarioCreacion', TType::STRING, 6);
      $xfer += $output->writeString($this->usuarioCreacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertDistribucion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertDistribucion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertDistribucion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getEvento_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idEvento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'tipoEvento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idEvento = null;
  /**
   * @var string
   */
  public $tipoEvento = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idEvento'])) {
        $this->idEvento = $vals['idEvento'];
      }
      if (isset($vals['tipoEvento'])) {
        $this->tipoEvento = $vals['tipoEvento'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getEvento_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idEvento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipoEvento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getEvento_args');
    if ($this->idEvento !== null) {
      $xfer += $output->writeFieldBegin('idEvento', TType::STRING, 1);
      $xfer += $output->writeString($this->idEvento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipoEvento !== null) {
      $xfer += $output->writeFieldBegin('tipoEvento', TType::STRING, 2);
      $xfer += $output->writeString($this->tipoEvento);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getEvento_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getEvento_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getEvento_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getEvento_sinopsis_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idEvento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'tipoEvento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idEvento = null;
  /**
   * @var string
   */
  public $tipoEvento = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idEvento'])) {
        $this->idEvento = $vals['idEvento'];
      }
      if (isset($vals['tipoEvento'])) {
        $this->tipoEvento = $vals['tipoEvento'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getEvento_sinopsis_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idEvento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipoEvento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getEvento_sinopsis_args');
    if ($this->idEvento !== null) {
      $xfer += $output->writeFieldBegin('idEvento', TType::STRING, 1);
      $xfer += $output->writeString($this->idEvento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipoEvento !== null) {
      $xfer += $output->writeFieldBegin('tipoEvento', TType::STRING, 2);
      $xfer += $output->writeString($this->tipoEvento);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getEvento_sinopsis_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getEvento_sinopsis_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getEvento_sinopsis_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getEvento_multimedia_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idEvento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'tipoEvento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idEvento = null;
  /**
   * @var string
   */
  public $tipoEvento = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idEvento'])) {
        $this->idEvento = $vals['idEvento'];
      }
      if (isset($vals['tipoEvento'])) {
        $this->tipoEvento = $vals['tipoEvento'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getEvento_multimedia_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idEvento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipoEvento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getEvento_multimedia_args');
    if ($this->idEvento !== null) {
      $xfer += $output->writeFieldBegin('idEvento', TType::STRING, 1);
      $xfer += $output->writeString($this->idEvento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipoEvento !== null) {
      $xfer += $output->writeFieldBegin('tipoEvento', TType::STRING, 2);
      $xfer += $output->writeString($this->tipoEvento);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getEvento_multimedia_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getEvento_multimedia_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getEvento_multimedia_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllEvento_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'tipoEvento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $tipoEvento = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['tipoEvento'])) {
        $this->tipoEvento = $vals['tipoEvento'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllEvento_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipoEvento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllEvento_args');
    if ($this->tipoEvento !== null) {
      $xfer += $output->writeFieldBegin('tipoEvento', TType::STRING, 1);
      $xfer += $output->writeString($this->tipoEvento);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllEvento_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllEvento_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllEvento_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoEvento_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoEvento_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoEvento_args');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 2);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 3);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoEvento_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoEvento_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoEvento_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEvento_informacion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'duracion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'fechaInicial',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'fechaFinal',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'idProductora',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'idSalaMapa',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'idTipoEvento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'idTipoEspectaculo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'idCategoria',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    10 => array(
      'var' => 'idClasificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    11 => array(
      'var' => 'idProcedencia',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    12 => array(
      'var' => 'aforo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    13 => array(
      'var' => 'tipoEvento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    14 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    15 => array(
      'var' => 'idEvento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    16 => array(
      'var' => 'preventa',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    17 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $duracion = null;
  /**
   * @var string
   */
  public $fechaInicial = null;
  /**
   * @var string
   */
  public $fechaFinal = null;
  /**
   * @var string
   */
  public $idProductora = null;
  /**
   * @var string
   */
  public $idSalaMapa = null;
  /**
   * @var string
   */
  public $idTipoEvento = null;
  /**
   * @var string
   */
  public $idTipoEspectaculo = null;
  /**
   * @var string
   */
  public $idCategoria = null;
  /**
   * @var string
   */
  public $idClasificacion = null;
  /**
   * @var string
   */
  public $idProcedencia = null;
  /**
   * @var string
   */
  public $aforo = null;
  /**
   * @var string
   */
  public $tipoEvento = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $idEvento = null;
  /**
   * @var string
   */
  public $preventa = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['duracion'])) {
        $this->duracion = $vals['duracion'];
      }
      if (isset($vals['fechaInicial'])) {
        $this->fechaInicial = $vals['fechaInicial'];
      }
      if (isset($vals['fechaFinal'])) {
        $this->fechaFinal = $vals['fechaFinal'];
      }
      if (isset($vals['idProductora'])) {
        $this->idProductora = $vals['idProductora'];
      }
      if (isset($vals['idSalaMapa'])) {
        $this->idSalaMapa = $vals['idSalaMapa'];
      }
      if (isset($vals['idTipoEvento'])) {
        $this->idTipoEvento = $vals['idTipoEvento'];
      }
      if (isset($vals['idTipoEspectaculo'])) {
        $this->idTipoEspectaculo = $vals['idTipoEspectaculo'];
      }
      if (isset($vals['idCategoria'])) {
        $this->idCategoria = $vals['idCategoria'];
      }
      if (isset($vals['idClasificacion'])) {
        $this->idClasificacion = $vals['idClasificacion'];
      }
      if (isset($vals['idProcedencia'])) {
        $this->idProcedencia = $vals['idProcedencia'];
      }
      if (isset($vals['aforo'])) {
        $this->aforo = $vals['aforo'];
      }
      if (isset($vals['tipoEvento'])) {
        $this->tipoEvento = $vals['tipoEvento'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['idEvento'])) {
        $this->idEvento = $vals['idEvento'];
      }
      if (isset($vals['preventa'])) {
        $this->preventa = $vals['preventa'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEvento_informacion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->duracion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fechaInicial);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fechaFinal);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idProductora);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idSalaMapa);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idTipoEvento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idTipoEspectaculo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idCategoria);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idClasificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idProcedencia);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->aforo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipoEvento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idEvento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->preventa);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEvento_informacion_args');
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 1);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->duracion !== null) {
      $xfer += $output->writeFieldBegin('duracion', TType::STRING, 2);
      $xfer += $output->writeString($this->duracion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fechaInicial !== null) {
      $xfer += $output->writeFieldBegin('fechaInicial', TType::STRING, 3);
      $xfer += $output->writeString($this->fechaInicial);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fechaFinal !== null) {
      $xfer += $output->writeFieldBegin('fechaFinal', TType::STRING, 4);
      $xfer += $output->writeString($this->fechaFinal);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idProductora !== null) {
      $xfer += $output->writeFieldBegin('idProductora', TType::STRING, 5);
      $xfer += $output->writeString($this->idProductora);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idSalaMapa !== null) {
      $xfer += $output->writeFieldBegin('idSalaMapa', TType::STRING, 6);
      $xfer += $output->writeString($this->idSalaMapa);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idTipoEvento !== null) {
      $xfer += $output->writeFieldBegin('idTipoEvento', TType::STRING, 7);
      $xfer += $output->writeString($this->idTipoEvento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idTipoEspectaculo !== null) {
      $xfer += $output->writeFieldBegin('idTipoEspectaculo', TType::STRING, 8);
      $xfer += $output->writeString($this->idTipoEspectaculo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idCategoria !== null) {
      $xfer += $output->writeFieldBegin('idCategoria', TType::STRING, 9);
      $xfer += $output->writeString($this->idCategoria);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idClasificacion !== null) {
      $xfer += $output->writeFieldBegin('idClasificacion', TType::STRING, 10);
      $xfer += $output->writeString($this->idClasificacion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idProcedencia !== null) {
      $xfer += $output->writeFieldBegin('idProcedencia', TType::STRING, 11);
      $xfer += $output->writeString($this->idProcedencia);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aforo !== null) {
      $xfer += $output->writeFieldBegin('aforo', TType::STRING, 12);
      $xfer += $output->writeString($this->aforo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipoEvento !== null) {
      $xfer += $output->writeFieldBegin('tipoEvento', TType::STRING, 13);
      $xfer += $output->writeString($this->tipoEvento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 14);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idEvento !== null) {
      $xfer += $output->writeFieldBegin('idEvento', TType::STRING, 15);
      $xfer += $output->writeString($this->idEvento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->preventa !== null) {
      $xfer += $output->writeFieldBegin('preventa', TType::STRING, 16);
      $xfer += $output->writeString($this->preventa);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 17);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEvento_informacion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEvento_informacion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEvento_informacion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEvento_sinopsis_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'tipoEvento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'idEvento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $tipoEvento = null;
  /**
   * @var string
   */
  public $idEvento = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['tipoEvento'])) {
        $this->tipoEvento = $vals['tipoEvento'];
      }
      if (isset($vals['idEvento'])) {
        $this->idEvento = $vals['idEvento'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEvento_sinopsis_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipoEvento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idEvento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEvento_sinopsis_args');
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 1);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipoEvento !== null) {
      $xfer += $output->writeFieldBegin('tipoEvento', TType::STRING, 2);
      $xfer += $output->writeString($this->tipoEvento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idEvento !== null) {
      $xfer += $output->writeFieldBegin('idEvento', TType::STRING, 3);
      $xfer += $output->writeString($this->idEvento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 4);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEvento_sinopsis_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEvento_sinopsis_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEvento_sinopsis_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEvento_multimedia_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'video',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'tipoEvento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'idEvento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $video = null;
  /**
   * @var string
   */
  public $tipoEvento = null;
  /**
   * @var string
   */
  public $idEvento = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['video'])) {
        $this->video = $vals['video'];
      }
      if (isset($vals['tipoEvento'])) {
        $this->tipoEvento = $vals['tipoEvento'];
      }
      if (isset($vals['idEvento'])) {
        $this->idEvento = $vals['idEvento'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEvento_multimedia_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->video);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipoEvento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idEvento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEvento_multimedia_args');
    if ($this->video !== null) {
      $xfer += $output->writeFieldBegin('video', TType::STRING, 1);
      $xfer += $output->writeString($this->video);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipoEvento !== null) {
      $xfer += $output->writeFieldBegin('tipoEvento', TType::STRING, 3);
      $xfer += $output->writeString($this->tipoEvento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idEvento !== null) {
      $xfer += $output->writeFieldBegin('idEvento', TType::STRING, 4);
      $xfer += $output->writeString($this->idEvento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 5);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEvento_multimedia_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEvento_multimedia_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEvento_multimedia_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertEvento_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'duracion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'fechaInicial',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'fechaFinal',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'idProductora',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'idSalaMapa',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'idTipoEvento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'idTipoEspectaculo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'idCategoria',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    10 => array(
      'var' => 'idClasificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    11 => array(
      'var' => 'idProcedencia',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    12 => array(
      'var' => 'aforo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    13 => array(
      'var' => 'productora',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    144 => array(
      'var' => 'tipoEvento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    15 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    16 => array(
      'var' => 'usuarioCreacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $duracion = null;
  /**
   * @var string
   */
  public $fechaInicial = null;
  /**
   * @var string
   */
  public $fechaFinal = null;
  /**
   * @var string
   */
  public $idProductora = null;
  /**
   * @var string
   */
  public $idSalaMapa = null;
  /**
   * @var string
   */
  public $idTipoEvento = null;
  /**
   * @var string
   */
  public $idTipoEspectaculo = null;
  /**
   * @var string
   */
  public $idCategoria = null;
  /**
   * @var string
   */
  public $idClasificacion = null;
  /**
   * @var string
   */
  public $idProcedencia = null;
  /**
   * @var string
   */
  public $aforo = null;
  /**
   * @var string
   */
  public $productora = null;
  /**
   * @var string
   */
  public $tipoEvento = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuarioCreacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['duracion'])) {
        $this->duracion = $vals['duracion'];
      }
      if (isset($vals['fechaInicial'])) {
        $this->fechaInicial = $vals['fechaInicial'];
      }
      if (isset($vals['fechaFinal'])) {
        $this->fechaFinal = $vals['fechaFinal'];
      }
      if (isset($vals['idProductora'])) {
        $this->idProductora = $vals['idProductora'];
      }
      if (isset($vals['idSalaMapa'])) {
        $this->idSalaMapa = $vals['idSalaMapa'];
      }
      if (isset($vals['idTipoEvento'])) {
        $this->idTipoEvento = $vals['idTipoEvento'];
      }
      if (isset($vals['idTipoEspectaculo'])) {
        $this->idTipoEspectaculo = $vals['idTipoEspectaculo'];
      }
      if (isset($vals['idCategoria'])) {
        $this->idCategoria = $vals['idCategoria'];
      }
      if (isset($vals['idClasificacion'])) {
        $this->idClasificacion = $vals['idClasificacion'];
      }
      if (isset($vals['idProcedencia'])) {
        $this->idProcedencia = $vals['idProcedencia'];
      }
      if (isset($vals['aforo'])) {
        $this->aforo = $vals['aforo'];
      }
      if (isset($vals['productora'])) {
        $this->productora = $vals['productora'];
      }
      if (isset($vals['tipoEvento'])) {
        $this->tipoEvento = $vals['tipoEvento'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuarioCreacion'])) {
        $this->usuarioCreacion = $vals['usuarioCreacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertEvento_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->duracion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fechaInicial);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fechaFinal);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idProductora);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idSalaMapa);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idTipoEvento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idTipoEspectaculo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idCategoria);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idClasificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idProcedencia);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->aforo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->productora);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 144:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipoEvento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuarioCreacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertEvento_args');
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 1);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->duracion !== null) {
      $xfer += $output->writeFieldBegin('duracion', TType::STRING, 2);
      $xfer += $output->writeString($this->duracion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fechaInicial !== null) {
      $xfer += $output->writeFieldBegin('fechaInicial', TType::STRING, 3);
      $xfer += $output->writeString($this->fechaInicial);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fechaFinal !== null) {
      $xfer += $output->writeFieldBegin('fechaFinal', TType::STRING, 4);
      $xfer += $output->writeString($this->fechaFinal);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idProductora !== null) {
      $xfer += $output->writeFieldBegin('idProductora', TType::STRING, 5);
      $xfer += $output->writeString($this->idProductora);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idSalaMapa !== null) {
      $xfer += $output->writeFieldBegin('idSalaMapa', TType::STRING, 6);
      $xfer += $output->writeString($this->idSalaMapa);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idTipoEvento !== null) {
      $xfer += $output->writeFieldBegin('idTipoEvento', TType::STRING, 7);
      $xfer += $output->writeString($this->idTipoEvento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idTipoEspectaculo !== null) {
      $xfer += $output->writeFieldBegin('idTipoEspectaculo', TType::STRING, 8);
      $xfer += $output->writeString($this->idTipoEspectaculo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idCategoria !== null) {
      $xfer += $output->writeFieldBegin('idCategoria', TType::STRING, 9);
      $xfer += $output->writeString($this->idCategoria);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idClasificacion !== null) {
      $xfer += $output->writeFieldBegin('idClasificacion', TType::STRING, 10);
      $xfer += $output->writeString($this->idClasificacion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idProcedencia !== null) {
      $xfer += $output->writeFieldBegin('idProcedencia', TType::STRING, 11);
      $xfer += $output->writeString($this->idProcedencia);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aforo !== null) {
      $xfer += $output->writeFieldBegin('aforo', TType::STRING, 12);
      $xfer += $output->writeString($this->aforo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->productora !== null) {
      $xfer += $output->writeFieldBegin('productora', TType::STRING, 13);
      $xfer += $output->writeString($this->productora);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 15);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuarioCreacion !== null) {
      $xfer += $output->writeFieldBegin('usuarioCreacion', TType::STRING, 16);
      $xfer += $output->writeString($this->usuarioCreacion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipoEvento !== null) {
      $xfer += $output->writeFieldBegin('tipoEvento', TType::STRING, 144);
      $xfer += $output->writeString($this->tipoEvento);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertEvento_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertEvento_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertEvento_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getEventoDestacado_args {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'CRUDServer_getEventoDestacado_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getEventoDestacado_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getEventoDestacado_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getEventoDestacado_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getEventoDestacado_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEventoDestacado_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEventoDestacado_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEventoDestacado_args');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 2);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEventoDestacado_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEventoDestacado_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEventoDestacado_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getContacto_args {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'CRUDServer_getContacto_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getContacto_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getContacto_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getContacto_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getContacto_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateContacto_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'celular',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'telefono',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'direccion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'correo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'pagina',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'facebook',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'instagram',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'twitter',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    10 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $celular = null;
  /**
   * @var string
   */
  public $telefono = null;
  /**
   * @var string
   */
  public $direccion = null;
  /**
   * @var string
   */
  public $correo = null;
  /**
   * @var string
   */
  public $pagina = null;
  /**
   * @var string
   */
  public $facebook = null;
  /**
   * @var string
   */
  public $instagram = null;
  /**
   * @var string
   */
  public $twitter = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['celular'])) {
        $this->celular = $vals['celular'];
      }
      if (isset($vals['telefono'])) {
        $this->telefono = $vals['telefono'];
      }
      if (isset($vals['direccion'])) {
        $this->direccion = $vals['direccion'];
      }
      if (isset($vals['correo'])) {
        $this->correo = $vals['correo'];
      }
      if (isset($vals['pagina'])) {
        $this->pagina = $vals['pagina'];
      }
      if (isset($vals['facebook'])) {
        $this->facebook = $vals['facebook'];
      }
      if (isset($vals['instagram'])) {
        $this->instagram = $vals['instagram'];
      }
      if (isset($vals['twitter'])) {
        $this->twitter = $vals['twitter'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateContacto_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->celular);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->telefono);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->direccion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->correo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pagina);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->facebook);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->instagram);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->twitter);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateContacto_args');
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 1);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->celular !== null) {
      $xfer += $output->writeFieldBegin('celular', TType::STRING, 2);
      $xfer += $output->writeString($this->celular);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->telefono !== null) {
      $xfer += $output->writeFieldBegin('telefono', TType::STRING, 3);
      $xfer += $output->writeString($this->telefono);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->direccion !== null) {
      $xfer += $output->writeFieldBegin('direccion', TType::STRING, 4);
      $xfer += $output->writeString($this->direccion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->correo !== null) {
      $xfer += $output->writeFieldBegin('correo', TType::STRING, 5);
      $xfer += $output->writeString($this->correo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pagina !== null) {
      $xfer += $output->writeFieldBegin('pagina', TType::STRING, 6);
      $xfer += $output->writeString($this->pagina);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->facebook !== null) {
      $xfer += $output->writeFieldBegin('facebook', TType::STRING, 7);
      $xfer += $output->writeString($this->facebook);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->instagram !== null) {
      $xfer += $output->writeFieldBegin('instagram', TType::STRING, 8);
      $xfer += $output->writeString($this->instagram);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->twitter !== null) {
      $xfer += $output->writeFieldBegin('twitter', TType::STRING, 9);
      $xfer += $output->writeString($this->twitter);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 10);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateContacto_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateContacto_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateContacto_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getFundacion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'CRUDServer_getFundacion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getFundacion_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getFundacion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getFundacion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getFundacion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateFundacion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'descripcion1',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'descripcion2',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'precio1',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'precio2',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'precio3',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'precio4',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'precio5',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'precio6',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    10 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $descripcion1 = null;
  /**
   * @var string
   */
  public $descripcion2 = null;
  /**
   * @var string
   */
  public $precio1 = null;
  /**
   * @var string
   */
  public $precio2 = null;
  /**
   * @var string
   */
  public $precio3 = null;
  /**
   * @var string
   */
  public $precio4 = null;
  /**
   * @var string
   */
  public $precio5 = null;
  /**
   * @var string
   */
  public $precio6 = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['descripcion1'])) {
        $this->descripcion1 = $vals['descripcion1'];
      }
      if (isset($vals['descripcion2'])) {
        $this->descripcion2 = $vals['descripcion2'];
      }
      if (isset($vals['precio1'])) {
        $this->precio1 = $vals['precio1'];
      }
      if (isset($vals['precio2'])) {
        $this->precio2 = $vals['precio2'];
      }
      if (isset($vals['precio3'])) {
        $this->precio3 = $vals['precio3'];
      }
      if (isset($vals['precio4'])) {
        $this->precio4 = $vals['precio4'];
      }
      if (isset($vals['precio5'])) {
        $this->precio5 = $vals['precio5'];
      }
      if (isset($vals['precio6'])) {
        $this->precio6 = $vals['precio6'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateFundacion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descripcion1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descripcion2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->precio1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->precio2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->precio3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->precio4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->precio5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->precio6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateFundacion_args');
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 1);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descripcion1 !== null) {
      $xfer += $output->writeFieldBegin('descripcion1', TType::STRING, 2);
      $xfer += $output->writeString($this->descripcion1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descripcion2 !== null) {
      $xfer += $output->writeFieldBegin('descripcion2', TType::STRING, 3);
      $xfer += $output->writeString($this->descripcion2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->precio1 !== null) {
      $xfer += $output->writeFieldBegin('precio1', TType::STRING, 4);
      $xfer += $output->writeString($this->precio1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->precio2 !== null) {
      $xfer += $output->writeFieldBegin('precio2', TType::STRING, 5);
      $xfer += $output->writeString($this->precio2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->precio3 !== null) {
      $xfer += $output->writeFieldBegin('precio3', TType::STRING, 6);
      $xfer += $output->writeString($this->precio3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->precio4 !== null) {
      $xfer += $output->writeFieldBegin('precio4', TType::STRING, 7);
      $xfer += $output->writeString($this->precio4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->precio5 !== null) {
      $xfer += $output->writeFieldBegin('precio5', TType::STRING, 8);
      $xfer += $output->writeString($this->precio5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->precio6 !== null) {
      $xfer += $output->writeFieldBegin('precio6', TType::STRING, 9);
      $xfer += $output->writeString($this->precio6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 10);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateFundacion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateFundacion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateFundacion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllBeneficios_args {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'CRUDServer_getAllBeneficios_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllBeneficios_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllBeneficios_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllBeneficios_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllBeneficios_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getBeneficio_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $id = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getBeneficio_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getBeneficio_args');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getBeneficio_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getBeneficio_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getBeneficio_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateBeneficio_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'beneficio',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $beneficio = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['beneficio'])) {
        $this->beneficio = $vals['beneficio'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateBeneficio_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->beneficio);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateBeneficio_args');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->beneficio !== null) {
      $xfer += $output->writeFieldBegin('beneficio', TType::STRING, 2);
      $xfer += $output->writeString($this->beneficio);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 3);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateBeneficio_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateBeneficio_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateBeneficio_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoBeneficio_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoBeneficio_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoBeneficio_args');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 2);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 3);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoBeneficio_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoBeneficio_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoBeneficio_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertBeneficio_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'beneficio',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'usuarioCreacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $beneficio = null;
  /**
   * @var string
   */
  public $usuarioCreacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['beneficio'])) {
        $this->beneficio = $vals['beneficio'];
      }
      if (isset($vals['usuarioCreacion'])) {
        $this->usuarioCreacion = $vals['usuarioCreacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertBeneficio_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->beneficio);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuarioCreacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertBeneficio_args');
    if ($this->beneficio !== null) {
      $xfer += $output->writeFieldBegin('beneficio', TType::STRING, 1);
      $xfer += $output->writeString($this->beneficio);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuarioCreacion !== null) {
      $xfer += $output->writeFieldBegin('usuarioCreacion', TType::STRING, 2);
      $xfer += $output->writeString($this->usuarioCreacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertBeneficio_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertBeneficio_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertBeneficio_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllPreguntas_args {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'CRUDServer_getAllPreguntas_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllPreguntas_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllPreguntas_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllPreguntas_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllPreguntas_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getPregunta_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $id = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getPregunta_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getPregunta_args');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getPregunta_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getPregunta_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getPregunta_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updatePregunta_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'pregunta',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'respuesta',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $pregunta = null;
  /**
   * @var string
   */
  public $respuesta = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['pregunta'])) {
        $this->pregunta = $vals['pregunta'];
      }
      if (isset($vals['respuesta'])) {
        $this->respuesta = $vals['respuesta'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updatePregunta_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pregunta);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->respuesta);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updatePregunta_args');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pregunta !== null) {
      $xfer += $output->writeFieldBegin('pregunta', TType::STRING, 2);
      $xfer += $output->writeString($this->pregunta);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->respuesta !== null) {
      $xfer += $output->writeFieldBegin('respuesta', TType::STRING, 3);
      $xfer += $output->writeString($this->respuesta);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 4);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updatePregunta_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updatePregunta_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updatePregunta_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertPregunta_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'pregunta',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'respuesta',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'usuarioCreacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $pregunta = null;
  /**
   * @var string
   */
  public $respuesta = null;
  /**
   * @var string
   */
  public $usuarioCreacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['pregunta'])) {
        $this->pregunta = $vals['pregunta'];
      }
      if (isset($vals['respuesta'])) {
        $this->respuesta = $vals['respuesta'];
      }
      if (isset($vals['usuarioCreacion'])) {
        $this->usuarioCreacion = $vals['usuarioCreacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertPregunta_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pregunta);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->respuesta);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuarioCreacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertPregunta_args');
    if ($this->pregunta !== null) {
      $xfer += $output->writeFieldBegin('pregunta', TType::STRING, 1);
      $xfer += $output->writeString($this->pregunta);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->respuesta !== null) {
      $xfer += $output->writeFieldBegin('respuesta', TType::STRING, 2);
      $xfer += $output->writeString($this->respuesta);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuarioCreacion !== null) {
      $xfer += $output->writeFieldBegin('usuarioCreacion', TType::STRING, 3);
      $xfer += $output->writeString($this->usuarioCreacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertPregunta_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertPregunta_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertPregunta_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoPregunta_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoPregunta_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoPregunta_args');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 2);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 3);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoPregunta_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoPregunta_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoPregunta_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getInformacion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'CRUDServer_getInformacion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getInformacion_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getInformacion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getInformacion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getInformacion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateInformacion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'Informacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $Informacion = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['Informacion'])) {
        $this->Informacion = $vals['Informacion'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateInformacion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Informacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateInformacion_args');
    if ($this->Informacion !== null) {
      $xfer += $output->writeFieldBegin('Informacion', TType::STRING, 1);
      $xfer += $output->writeString($this->Informacion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 2);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateInformacion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateInformacion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateInformacion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getFuncion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idFuncion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idFuncion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idFuncion'])) {
        $this->idFuncion = $vals['idFuncion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getFuncion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idFuncion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getFuncion_args');
    if ($this->idFuncion !== null) {
      $xfer += $output->writeFieldBegin('idFuncion', TType::STRING, 1);
      $xfer += $output->writeString($this->idFuncion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getFuncion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getFuncion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getFuncion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllFuncion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idEvento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idEvento = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idEvento'])) {
        $this->idEvento = $vals['idEvento'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllFuncion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idEvento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllFuncion_args');
    if ($this->idEvento !== null) {
      $xfer += $output->writeFieldBegin('idEvento', TType::STRING, 1);
      $xfer += $output->writeString($this->idEvento);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllFuncion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllFuncion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllFuncion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoFuncion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoFuncion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoFuncion_args');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 2);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 3);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoFuncion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoFuncion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoFuncion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateFuncion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'fecha',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'aforo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'idFuncion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $fecha = null;
  /**
   * @var string
   */
  public $aforo = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $idFuncion = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['fecha'])) {
        $this->fecha = $vals['fecha'];
      }
      if (isset($vals['aforo'])) {
        $this->aforo = $vals['aforo'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['idFuncion'])) {
        $this->idFuncion = $vals['idFuncion'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateFuncion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fecha);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->aforo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idFuncion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateFuncion_args');
    if ($this->fecha !== null) {
      $xfer += $output->writeFieldBegin('fecha', TType::STRING, 1);
      $xfer += $output->writeString($this->fecha);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aforo !== null) {
      $xfer += $output->writeFieldBegin('aforo', TType::STRING, 2);
      $xfer += $output->writeString($this->aforo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 3);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idFuncion !== null) {
      $xfer += $output->writeFieldBegin('idFuncion', TType::STRING, 4);
      $xfer += $output->writeString($this->idFuncion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 5);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateFuncion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateFuncion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateFuncion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertFuncion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'fecha',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'aforo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'idEvento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'usuarioCreacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $fecha = null;
  /**
   * @var string
   */
  public $aforo = null;
  /**
   * @var string
   */
  public $idEvento = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuarioCreacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['fecha'])) {
        $this->fecha = $vals['fecha'];
      }
      if (isset($vals['aforo'])) {
        $this->aforo = $vals['aforo'];
      }
      if (isset($vals['idEvento'])) {
        $this->idEvento = $vals['idEvento'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuarioCreacion'])) {
        $this->usuarioCreacion = $vals['usuarioCreacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertFuncion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fecha);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->aforo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idEvento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuarioCreacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertFuncion_args');
    if ($this->fecha !== null) {
      $xfer += $output->writeFieldBegin('fecha', TType::STRING, 1);
      $xfer += $output->writeString($this->fecha);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aforo !== null) {
      $xfer += $output->writeFieldBegin('aforo', TType::STRING, 2);
      $xfer += $output->writeString($this->aforo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idEvento !== null) {
      $xfer += $output->writeFieldBegin('idEvento', TType::STRING, 3);
      $xfer += $output->writeString($this->idEvento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 4);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuarioCreacion !== null) {
      $xfer += $output->writeFieldBegin('usuarioCreacion', TType::STRING, 5);
      $xfer += $output->writeString($this->usuarioCreacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertFuncion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertFuncion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertFuncion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getMapa_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idMapa',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idMapa = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idMapa'])) {
        $this->idMapa = $vals['idMapa'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getMapa_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idMapa);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getMapa_args');
    if ($this->idMapa !== null) {
      $xfer += $output->writeFieldBegin('idMapa', TType::STRING, 1);
      $xfer += $output->writeString($this->idMapa);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getMapa_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getMapa_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getMapa_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllMapa_args {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'CRUDServer_getAllMapa_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllMapa_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllMapa_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllMapa_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllMapa_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoMapa_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoMapa_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoMapa_args');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 2);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 3);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoMapa_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoMapa_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoMapa_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateMapa_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'distribucion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'rutaImagen',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'idMapa',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $distribucion = null;
  /**
   * @var string
   */
  public $rutaImagen = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $idMapa = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['distribucion'])) {
        $this->distribucion = $vals['distribucion'];
      }
      if (isset($vals['rutaImagen'])) {
        $this->rutaImagen = $vals['rutaImagen'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['idMapa'])) {
        $this->idMapa = $vals['idMapa'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateMapa_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->distribucion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->rutaImagen);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idMapa);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateMapa_args');
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 1);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->distribucion !== null) {
      $xfer += $output->writeFieldBegin('distribucion', TType::STRING, 2);
      $xfer += $output->writeString($this->distribucion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rutaImagen !== null) {
      $xfer += $output->writeFieldBegin('rutaImagen', TType::STRING, 3);
      $xfer += $output->writeString($this->rutaImagen);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 4);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idMapa !== null) {
      $xfer += $output->writeFieldBegin('idMapa', TType::STRING, 5);
      $xfer += $output->writeString($this->idMapa);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 6);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateMapa_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateMapa_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateMapa_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertMapa_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'distribucion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'rutaImagen',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'usuarioCreacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $distribucion = null;
  /**
   * @var string
   */
  public $rutaImagen = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuarioCreacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['distribucion'])) {
        $this->distribucion = $vals['distribucion'];
      }
      if (isset($vals['rutaImagen'])) {
        $this->rutaImagen = $vals['rutaImagen'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuarioCreacion'])) {
        $this->usuarioCreacion = $vals['usuarioCreacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertMapa_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->distribucion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->rutaImagen);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuarioCreacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertMapa_args');
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 1);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->distribucion !== null) {
      $xfer += $output->writeFieldBegin('distribucion', TType::STRING, 2);
      $xfer += $output->writeString($this->distribucion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rutaImagen !== null) {
      $xfer += $output->writeFieldBegin('rutaImagen', TType::STRING, 3);
      $xfer += $output->writeString($this->rutaImagen);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 4);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuarioCreacion !== null) {
      $xfer += $output->writeFieldBegin('usuarioCreacion', TType::STRING, 5);
      $xfer += $output->writeString($this->usuarioCreacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertMapa_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertMapa_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertMapa_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getPerfil_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idPerfil',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idPerfil = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idPerfil'])) {
        $this->idPerfil = $vals['idPerfil'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getPerfil_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idPerfil);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getPerfil_args');
    if ($this->idPerfil !== null) {
      $xfer += $output->writeFieldBegin('idPerfil', TType::STRING, 1);
      $xfer += $output->writeString($this->idPerfil);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getPerfil_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getPerfil_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getPerfil_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllPerfil_args {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'CRUDServer_getAllPerfil_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllPerfil_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllPerfil_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllPerfil_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllPerfil_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoPerfil_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoPerfil_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoPerfil_args');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 2);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 3);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoPerfil_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoPerfil_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoPerfil_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updatePerfil_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'descripcion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'tipo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'idPerfil',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $descripcion = null;
  /**
   * @var string
   */
  public $tipo = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $idPerfil = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['descripcion'])) {
        $this->descripcion = $vals['descripcion'];
      }
      if (isset($vals['tipo'])) {
        $this->tipo = $vals['tipo'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['idPerfil'])) {
        $this->idPerfil = $vals['idPerfil'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updatePerfil_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descripcion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idPerfil);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updatePerfil_args');
    if ($this->descripcion !== null) {
      $xfer += $output->writeFieldBegin('descripcion', TType::STRING, 1);
      $xfer += $output->writeString($this->descripcion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipo !== null) {
      $xfer += $output->writeFieldBegin('tipo', TType::STRING, 2);
      $xfer += $output->writeString($this->tipo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 3);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idPerfil !== null) {
      $xfer += $output->writeFieldBegin('idPerfil', TType::STRING, 4);
      $xfer += $output->writeString($this->idPerfil);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 5);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updatePerfil_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updatePerfil_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updatePerfil_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertPerfil_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'descripcion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'tipo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'usuarioCreacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $descripcion = null;
  /**
   * @var string
   */
  public $tipo = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuarioCreacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['descripcion'])) {
        $this->descripcion = $vals['descripcion'];
      }
      if (isset($vals['tipo'])) {
        $this->tipo = $vals['tipo'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuarioCreacion'])) {
        $this->usuarioCreacion = $vals['usuarioCreacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertPerfil_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descripcion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuarioCreacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertPerfil_args');
    if ($this->descripcion !== null) {
      $xfer += $output->writeFieldBegin('descripcion', TType::STRING, 1);
      $xfer += $output->writeString($this->descripcion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipo !== null) {
      $xfer += $output->writeFieldBegin('tipo', TType::STRING, 2);
      $xfer += $output->writeString($this->tipo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 3);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuarioCreacion !== null) {
      $xfer += $output->writeFieldBegin('usuarioCreacion', TType::STRING, 4);
      $xfer += $output->writeString($this->usuarioCreacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertPerfil_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertPerfil_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertPerfil_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getPerfilRol_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idPerfil',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'idRol',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idPerfil = null;
  /**
   * @var string
   */
  public $idRol = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idPerfil'])) {
        $this->idPerfil = $vals['idPerfil'];
      }
      if (isset($vals['idRol'])) {
        $this->idRol = $vals['idRol'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getPerfilRol_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idPerfil);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idRol);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getPerfilRol_args');
    if ($this->idPerfil !== null) {
      $xfer += $output->writeFieldBegin('idPerfil', TType::STRING, 1);
      $xfer += $output->writeString($this->idPerfil);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idRol !== null) {
      $xfer += $output->writeFieldBegin('idRol', TType::STRING, 2);
      $xfer += $output->writeString($this->idRol);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getPerfilRol_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getPerfilRol_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getPerfilRol_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllPerfilRol_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idPerfil',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idPerfil = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idPerfil'])) {
        $this->idPerfil = $vals['idPerfil'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllPerfilRol_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idPerfil);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllPerfilRol_args');
    if ($this->idPerfil !== null) {
      $xfer += $output->writeFieldBegin('idPerfil', TType::STRING, 1);
      $xfer += $output->writeString($this->idPerfil);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllPerfilRol_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllPerfilRol_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllPerfilRol_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoPerfilRol_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoPerfilRol_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoPerfilRol_args');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 2);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 3);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoPerfilRol_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoPerfilRol_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoPerfilRol_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updatePerfilRol_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idPerfil',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'idRol',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'idPerfilRol',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idPerfil = null;
  /**
   * @var string
   */
  public $idRol = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $idPerfilRol = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idPerfil'])) {
        $this->idPerfil = $vals['idPerfil'];
      }
      if (isset($vals['idRol'])) {
        $this->idRol = $vals['idRol'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['idPerfilRol'])) {
        $this->idPerfilRol = $vals['idPerfilRol'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updatePerfilRol_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idPerfil);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idRol);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idPerfilRol);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updatePerfilRol_args');
    if ($this->idPerfil !== null) {
      $xfer += $output->writeFieldBegin('idPerfil', TType::STRING, 1);
      $xfer += $output->writeString($this->idPerfil);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idRol !== null) {
      $xfer += $output->writeFieldBegin('idRol', TType::STRING, 2);
      $xfer += $output->writeString($this->idRol);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 3);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idPerfilRol !== null) {
      $xfer += $output->writeFieldBegin('idPerfilRol', TType::STRING, 4);
      $xfer += $output->writeString($this->idPerfilRol);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 5);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updatePerfilRol_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updatePerfilRol_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updatePerfilRol_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertPerfilRol_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idPerfil',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'idRol',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'usuarioCreacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idPerfil = null;
  /**
   * @var string
   */
  public $idRol = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuarioCreacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idPerfil'])) {
        $this->idPerfil = $vals['idPerfil'];
      }
      if (isset($vals['idRol'])) {
        $this->idRol = $vals['idRol'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuarioCreacion'])) {
        $this->usuarioCreacion = $vals['usuarioCreacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertPerfilRol_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idPerfil);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idRol);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuarioCreacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertPerfilRol_args');
    if ($this->idPerfil !== null) {
      $xfer += $output->writeFieldBegin('idPerfil', TType::STRING, 1);
      $xfer += $output->writeString($this->idPerfil);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idRol !== null) {
      $xfer += $output->writeFieldBegin('idRol', TType::STRING, 2);
      $xfer += $output->writeString($this->idRol);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 3);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuarioCreacion !== null) {
      $xfer += $output->writeFieldBegin('usuarioCreacion', TType::STRING, 4);
      $xfer += $output->writeString($this->usuarioCreacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertPerfilRol_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertPerfilRol_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertPerfilRol_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_isPrincipal_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idEvento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idEvento = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idEvento'])) {
        $this->idEvento = $vals['idEvento'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_isPrincipal_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idEvento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_isPrincipal_args');
    if ($this->idEvento !== null) {
      $xfer += $output->writeFieldBegin('idEvento', TType::STRING, 1);
      $xfer += $output->writeString($this->idEvento);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_isPrincipal_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_isPrincipal_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_isPrincipal_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getPlatea_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idPlatea',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idPlatea = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idPlatea'])) {
        $this->idPlatea = $vals['idPlatea'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getPlatea_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idPlatea);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getPlatea_args');
    if ($this->idPlatea !== null) {
      $xfer += $output->writeFieldBegin('idPlatea', TType::STRING, 1);
      $xfer += $output->writeString($this->idPlatea);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getPlatea_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getPlatea_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getPlatea_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllPlatea_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idEvento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idEvento = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idEvento'])) {
        $this->idEvento = $vals['idEvento'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllPlatea_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idEvento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllPlatea_args');
    if ($this->idEvento !== null) {
      $xfer += $output->writeFieldBegin('idEvento', TType::STRING, 1);
      $xfer += $output->writeString($this->idEvento);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllPlatea_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllPlatea_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllPlatea_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getPlateaFuncion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idPlatea',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'idFuncion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idPlatea = null;
  /**
   * @var string
   */
  public $idFuncion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idPlatea'])) {
        $this->idPlatea = $vals['idPlatea'];
      }
      if (isset($vals['idFuncion'])) {
        $this->idFuncion = $vals['idFuncion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getPlateaFuncion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idPlatea);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idFuncion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getPlateaFuncion_args');
    if ($this->idPlatea !== null) {
      $xfer += $output->writeFieldBegin('idPlatea', TType::STRING, 1);
      $xfer += $output->writeString($this->idPlatea);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idFuncion !== null) {
      $xfer += $output->writeFieldBegin('idFuncion', TType::STRING, 2);
      $xfer += $output->writeString($this->idFuncion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getPlateaFuncion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getPlateaFuncion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getPlateaFuncion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoPlatea_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoPlatea_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoPlatea_args');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 2);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 3);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoPlatea_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoPlatea_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoPlatea_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updatePlatea_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'costo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'aforo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'idPlatea',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $costo = null;
  /**
   * @var string
   */
  public $aforo = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $idPlatea = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['costo'])) {
        $this->costo = $vals['costo'];
      }
      if (isset($vals['aforo'])) {
        $this->aforo = $vals['aforo'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['idPlatea'])) {
        $this->idPlatea = $vals['idPlatea'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updatePlatea_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->costo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->aforo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idPlatea);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updatePlatea_args');
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 1);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->costo !== null) {
      $xfer += $output->writeFieldBegin('costo', TType::STRING, 2);
      $xfer += $output->writeString($this->costo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aforo !== null) {
      $xfer += $output->writeFieldBegin('aforo', TType::STRING, 3);
      $xfer += $output->writeString($this->aforo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 4);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idPlatea !== null) {
      $xfer += $output->writeFieldBegin('idPlatea', TType::STRING, 5);
      $xfer += $output->writeString($this->idPlatea);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 6);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updatePlatea_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updatePlatea_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updatePlatea_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertPlatea_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'costo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'aforo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'idEvento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'usuarioCreacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $costo = null;
  /**
   * @var string
   */
  public $aforo = null;
  /**
   * @var string
   */
  public $idEvento = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuarioCreacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['costo'])) {
        $this->costo = $vals['costo'];
      }
      if (isset($vals['aforo'])) {
        $this->aforo = $vals['aforo'];
      }
      if (isset($vals['idEvento'])) {
        $this->idEvento = $vals['idEvento'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuarioCreacion'])) {
        $this->usuarioCreacion = $vals['usuarioCreacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertPlatea_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->costo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->aforo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idEvento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuarioCreacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertPlatea_args');
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 1);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->costo !== null) {
      $xfer += $output->writeFieldBegin('costo', TType::STRING, 2);
      $xfer += $output->writeString($this->costo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aforo !== null) {
      $xfer += $output->writeFieldBegin('aforo', TType::STRING, 3);
      $xfer += $output->writeString($this->aforo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idEvento !== null) {
      $xfer += $output->writeFieldBegin('idEvento', TType::STRING, 4);
      $xfer += $output->writeString($this->idEvento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 5);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuarioCreacion !== null) {
      $xfer += $output->writeFieldBegin('usuarioCreacion', TType::STRING, 6);
      $xfer += $output->writeString($this->usuarioCreacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertPlatea_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertPlatea_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertPlatea_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getProcedencia_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idProcedencia',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idProcedencia = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idProcedencia'])) {
        $this->idProcedencia = $vals['idProcedencia'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getProcedencia_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idProcedencia);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getProcedencia_args');
    if ($this->idProcedencia !== null) {
      $xfer += $output->writeFieldBegin('idProcedencia', TType::STRING, 1);
      $xfer += $output->writeString($this->idProcedencia);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getProcedencia_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getProcedencia_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getProcedencia_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllProcedencia_args {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'CRUDServer_getAllProcedencia_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllProcedencia_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllProcedencia_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllProcedencia_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllProcedencia_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoProcedencia_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoProcedencia_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoProcedencia_args');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 2);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 3);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoProcedencia_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoProcedencia_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoProcedencia_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateProcedencia_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'descripcion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'idProcedencia',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $descripcion = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $idProcedencia = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['descripcion'])) {
        $this->descripcion = $vals['descripcion'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['idProcedencia'])) {
        $this->idProcedencia = $vals['idProcedencia'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateProcedencia_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descripcion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idProcedencia);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateProcedencia_args');
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 1);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descripcion !== null) {
      $xfer += $output->writeFieldBegin('descripcion', TType::STRING, 2);
      $xfer += $output->writeString($this->descripcion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 3);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idProcedencia !== null) {
      $xfer += $output->writeFieldBegin('idProcedencia', TType::STRING, 4);
      $xfer += $output->writeString($this->idProcedencia);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 5);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateProcedencia_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateProcedencia_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateProcedencia_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertProcedencia_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'descripcion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'usuarioCreacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $descripcion = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuarioCreacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['descripcion'])) {
        $this->descripcion = $vals['descripcion'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuarioCreacion'])) {
        $this->usuarioCreacion = $vals['usuarioCreacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertProcedencia_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descripcion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuarioCreacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertProcedencia_args');
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 1);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descripcion !== null) {
      $xfer += $output->writeFieldBegin('descripcion', TType::STRING, 2);
      $xfer += $output->writeString($this->descripcion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 3);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuarioCreacion !== null) {
      $xfer += $output->writeFieldBegin('usuarioCreacion', TType::STRING, 4);
      $xfer += $output->writeString($this->usuarioCreacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertProcedencia_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertProcedencia_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertProcedencia_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getProductora_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idProductora',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idProductora = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idProductora'])) {
        $this->idProductora = $vals['idProductora'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getProductora_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idProductora);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getProductora_args');
    if ($this->idProductora !== null) {
      $xfer += $output->writeFieldBegin('idProductora', TType::STRING, 1);
      $xfer += $output->writeString($this->idProductora);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getProductora_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getProductora_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getProductora_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllProductora_args {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'CRUDServer_getAllProductora_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllProductora_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllProductora_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllProductora_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllProductora_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoProductora_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoProductora_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoProductora_args');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 2);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 3);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoProductora_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoProductora_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoProductora_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateProductora_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'descripcion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'idProductora',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $descripcion = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $idProductora = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['descripcion'])) {
        $this->descripcion = $vals['descripcion'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['idProductora'])) {
        $this->idProductora = $vals['idProductora'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateProductora_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descripcion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idProductora);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateProductora_args');
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 1);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descripcion !== null) {
      $xfer += $output->writeFieldBegin('descripcion', TType::STRING, 2);
      $xfer += $output->writeString($this->descripcion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 3);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idProductora !== null) {
      $xfer += $output->writeFieldBegin('idProductora', TType::STRING, 4);
      $xfer += $output->writeString($this->idProductora);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 5);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateProductora_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateProductora_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateProductora_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertProductora_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'descripcion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'usuarioCreacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $descripcion = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuarioCreacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['descripcion'])) {
        $this->descripcion = $vals['descripcion'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuarioCreacion'])) {
        $this->usuarioCreacion = $vals['usuarioCreacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertProductora_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descripcion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuarioCreacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertProductora_args');
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 1);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descripcion !== null) {
      $xfer += $output->writeFieldBegin('descripcion', TType::STRING, 2);
      $xfer += $output->writeString($this->descripcion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 3);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuarioCreacion !== null) {
      $xfer += $output->writeFieldBegin('usuarioCreacion', TType::STRING, 4);
      $xfer += $output->writeString($this->usuarioCreacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertProductora_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertProductora_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertProductora_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllCortesia_args {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'CRUDServer_getAllCortesia_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllCortesia_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllCortesia_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllCortesia_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllCortesia_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getCortesia_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id_cortesia',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $id_cortesia = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id_cortesia'])) {
        $this->id_cortesia = $vals['id_cortesia'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getCortesia_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id_cortesia);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getCortesia_args');
    if ($this->id_cortesia !== null) {
      $xfer += $output->writeFieldBegin('id_cortesia', TType::STRING, 1);
      $xfer += $output->writeString($this->id_cortesia);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getCortesia_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getCortesia_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getCortesia_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoCortesia_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoCortesia_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoCortesia_args');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 2);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 3);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoCortesia_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoCortesia_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoCortesia_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_deleteCortesia_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idTicketAsiento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'idTicket',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idTicketAsiento = null;
  /**
   * @var string
   */
  public $idTicket = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idTicketAsiento'])) {
        $this->idTicketAsiento = $vals['idTicketAsiento'];
      }
      if (isset($vals['idTicket'])) {
        $this->idTicket = $vals['idTicket'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_deleteCortesia_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idTicketAsiento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idTicket);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_deleteCortesia_args');
    if ($this->idTicketAsiento !== null) {
      $xfer += $output->writeFieldBegin('idTicketAsiento', TType::STRING, 1);
      $xfer += $output->writeString($this->idTicketAsiento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idTicket !== null) {
      $xfer += $output->writeFieldBegin('idTicket', TType::STRING, 2);
      $xfer += $output->writeString($this->idTicket);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 3);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_deleteCortesia_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_deleteCortesia_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_deleteCortesia_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_bloqueo_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idFuncion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'idPlatea',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'tipo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'fila',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'desde',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'hasta',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'correo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'descripcion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    10 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    11 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idFuncion = null;
  /**
   * @var string
   */
  public $idPlatea = null;
  /**
   * @var string
   */
  public $tipo = null;
  /**
   * @var string
   */
  public $fila = null;
  /**
   * @var string
   */
  public $desde = null;
  /**
   * @var string
   */
  public $hasta = null;
  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $correo = null;
  /**
   * @var string
   */
  public $descripcion = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idFuncion'])) {
        $this->idFuncion = $vals['idFuncion'];
      }
      if (isset($vals['idPlatea'])) {
        $this->idPlatea = $vals['idPlatea'];
      }
      if (isset($vals['tipo'])) {
        $this->tipo = $vals['tipo'];
      }
      if (isset($vals['fila'])) {
        $this->fila = $vals['fila'];
      }
      if (isset($vals['desde'])) {
        $this->desde = $vals['desde'];
      }
      if (isset($vals['hasta'])) {
        $this->hasta = $vals['hasta'];
      }
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['correo'])) {
        $this->correo = $vals['correo'];
      }
      if (isset($vals['descripcion'])) {
        $this->descripcion = $vals['descripcion'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_bloqueo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idFuncion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idPlatea);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fila);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desde);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->hasta);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->correo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descripcion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_bloqueo_args');
    if ($this->idFuncion !== null) {
      $xfer += $output->writeFieldBegin('idFuncion', TType::STRING, 1);
      $xfer += $output->writeString($this->idFuncion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idPlatea !== null) {
      $xfer += $output->writeFieldBegin('idPlatea', TType::STRING, 2);
      $xfer += $output->writeString($this->idPlatea);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipo !== null) {
      $xfer += $output->writeFieldBegin('tipo', TType::STRING, 3);
      $xfer += $output->writeString($this->tipo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fila !== null) {
      $xfer += $output->writeFieldBegin('fila', TType::STRING, 4);
      $xfer += $output->writeString($this->fila);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desde !== null) {
      $xfer += $output->writeFieldBegin('desde', TType::STRING, 5);
      $xfer += $output->writeString($this->desde);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hasta !== null) {
      $xfer += $output->writeFieldBegin('hasta', TType::STRING, 6);
      $xfer += $output->writeString($this->hasta);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 7);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->correo !== null) {
      $xfer += $output->writeFieldBegin('correo', TType::STRING, 8);
      $xfer += $output->writeString($this->correo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descripcion !== null) {
      $xfer += $output->writeFieldBegin('descripcion', TType::STRING, 9);
      $xfer += $output->writeString($this->descripcion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 10);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 11);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_bloqueo_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_bloqueo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_bloqueo_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertReserva_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idFuncion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'idEvento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'idUsuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'asientos',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'tipo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'usuarioCreacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idFuncion = null;
  /**
   * @var string
   */
  public $idEvento = null;
  /**
   * @var string
   */
  public $idUsuario = null;
  /**
   * @var string
   */
  public $asientos = null;
  /**
   * @var string
   */
  public $tipo = null;
  /**
   * @var string
   */
  public $usuarioCreacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idFuncion'])) {
        $this->idFuncion = $vals['idFuncion'];
      }
      if (isset($vals['idEvento'])) {
        $this->idEvento = $vals['idEvento'];
      }
      if (isset($vals['idUsuario'])) {
        $this->idUsuario = $vals['idUsuario'];
      }
      if (isset($vals['asientos'])) {
        $this->asientos = $vals['asientos'];
      }
      if (isset($vals['tipo'])) {
        $this->tipo = $vals['tipo'];
      }
      if (isset($vals['usuarioCreacion'])) {
        $this->usuarioCreacion = $vals['usuarioCreacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertReserva_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idFuncion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idEvento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idUsuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->asientos);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuarioCreacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertReserva_args');
    if ($this->idFuncion !== null) {
      $xfer += $output->writeFieldBegin('idFuncion', TType::STRING, 1);
      $xfer += $output->writeString($this->idFuncion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idEvento !== null) {
      $xfer += $output->writeFieldBegin('idEvento', TType::STRING, 2);
      $xfer += $output->writeString($this->idEvento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idUsuario !== null) {
      $xfer += $output->writeFieldBegin('idUsuario', TType::STRING, 3);
      $xfer += $output->writeString($this->idUsuario);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->asientos !== null) {
      $xfer += $output->writeFieldBegin('asientos', TType::STRING, 4);
      $xfer += $output->writeString($this->asientos);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipo !== null) {
      $xfer += $output->writeFieldBegin('tipo', TType::STRING, 5);
      $xfer += $output->writeString($this->tipo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuarioCreacion !== null) {
      $xfer += $output->writeFieldBegin('usuarioCreacion', TType::STRING, 6);
      $xfer += $output->writeString($this->usuarioCreacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertReserva_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertReserva_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertReserva_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllReserva_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idUsuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idUsuario = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idUsuario'])) {
        $this->idUsuario = $vals['idUsuario'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllReserva_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idUsuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllReserva_args');
    if ($this->idUsuario !== null) {
      $xfer += $output->writeFieldBegin('idUsuario', TType::STRING, 1);
      $xfer += $output->writeString($this->idUsuario);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllReserva_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllReserva_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllReserva_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_deleteReserva_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'reserva',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'idUsuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $reserva = null;
  /**
   * @var string
   */
  public $idUsuario = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['reserva'])) {
        $this->reserva = $vals['reserva'];
      }
      if (isset($vals['idUsuario'])) {
        $this->idUsuario = $vals['idUsuario'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_deleteReserva_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reserva);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idUsuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_deleteReserva_args');
    if ($this->reserva !== null) {
      $xfer += $output->writeFieldBegin('reserva', TType::STRING, 1);
      $xfer += $output->writeString($this->reserva);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idUsuario !== null) {
      $xfer += $output->writeFieldBegin('idUsuario', TType::STRING, 2);
      $xfer += $output->writeString($this->idUsuario);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_deleteReserva_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_deleteReserva_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_deleteReserva_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getPromocion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idPromocion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'idTipoPromocion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'tipo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idPromocion = null;
  /**
   * @var string
   */
  public $idTipoPromocion = null;
  /**
   * @var string
   */
  public $tipo = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idPromocion'])) {
        $this->idPromocion = $vals['idPromocion'];
      }
      if (isset($vals['idTipoPromocion'])) {
        $this->idTipoPromocion = $vals['idTipoPromocion'];
      }
      if (isset($vals['tipo'])) {
        $this->tipo = $vals['tipo'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getPromocion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idPromocion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idTipoPromocion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getPromocion_args');
    if ($this->idPromocion !== null) {
      $xfer += $output->writeFieldBegin('idPromocion', TType::STRING, 1);
      $xfer += $output->writeString($this->idPromocion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idTipoPromocion !== null) {
      $xfer += $output->writeFieldBegin('idTipoPromocion', TType::STRING, 2);
      $xfer += $output->writeString($this->idTipoPromocion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipo !== null) {
      $xfer += $output->writeFieldBegin('tipo', TType::STRING, 3);
      $xfer += $output->writeString($this->tipo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getPromocion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getPromocion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getPromocion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllPromociones_args {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'CRUDServer_getAllPromociones_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllPromociones_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllPromociones_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllPromociones_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllPromociones_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllPromocion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idEvento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'tipo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idEvento = null;
  /**
   * @var string
   */
  public $tipo = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idEvento'])) {
        $this->idEvento = $vals['idEvento'];
      }
      if (isset($vals['tipo'])) {
        $this->tipo = $vals['tipo'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllPromocion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idEvento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllPromocion_args');
    if ($this->idEvento !== null) {
      $xfer += $output->writeFieldBegin('idEvento', TType::STRING, 1);
      $xfer += $output->writeString($this->idEvento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipo !== null) {
      $xfer += $output->writeFieldBegin('tipo', TType::STRING, 2);
      $xfer += $output->writeString($this->tipo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllPromocion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllPromocion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllPromocion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoPromocion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'tipo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $tipo = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['tipo'])) {
        $this->tipo = $vals['tipo'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoPromocion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoPromocion_args');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 2);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipo !== null) {
      $xfer += $output->writeFieldBegin('tipo', TType::STRING, 3);
      $xfer += $output->writeString($this->tipo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 4);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoPromocion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoPromocion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoPromocion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updatePromocion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idPromocion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'idPromocion2',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'descripcion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'amigoTeatro',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'idEvento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'idPlatea',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'idFuncion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'General',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    10 => array(
      'var' => 'Web',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    11 => array(
      'var' => 'App',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    12 => array(
      'var' => 'Taquilla',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    13 => array(
      'var' => 'idTipoPromocion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    14 => array(
      'var' => 'fechaInicio',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    15 => array(
      'var' => 'fechaFin',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    16 => array(
      'var' => 'TipoPromocion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    17 => array(
      'var' => 'var1',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    18 => array(
      'var' => 'var2',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    19 => array(
      'var' => 'descuento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    20 => array(
      'var' => 'Cmaxima',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    21 => array(
      'var' => 'var3',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    22 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idPromocion = null;
  /**
   * @var string
   */
  public $idPromocion2 = null;
  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $descripcion = null;
  /**
   * @var string
   */
  public $amigoTeatro = null;
  /**
   * @var string
   */
  public $idEvento = null;
  /**
   * @var string
   */
  public $idPlatea = null;
  /**
   * @var string
   */
  public $idFuncion = null;
  /**
   * @var string
   */
  public $General = null;
  /**
   * @var string
   */
  public $Web = null;
  /**
   * @var string
   */
  public $App = null;
  /**
   * @var string
   */
  public $Taquilla = null;
  /**
   * @var string
   */
  public $idTipoPromocion = null;
  /**
   * @var string
   */
  public $fechaInicio = null;
  /**
   * @var string
   */
  public $fechaFin = null;
  /**
   * @var string
   */
  public $TipoPromocion = null;
  /**
   * @var string
   */
  public $var1 = null;
  /**
   * @var string
   */
  public $var2 = null;
  /**
   * @var string
   */
  public $descuento = null;
  /**
   * @var string
   */
  public $Cmaxima = null;
  /**
   * @var string
   */
  public $var3 = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idPromocion'])) {
        $this->idPromocion = $vals['idPromocion'];
      }
      if (isset($vals['idPromocion2'])) {
        $this->idPromocion2 = $vals['idPromocion2'];
      }
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['descripcion'])) {
        $this->descripcion = $vals['descripcion'];
      }
      if (isset($vals['amigoTeatro'])) {
        $this->amigoTeatro = $vals['amigoTeatro'];
      }
      if (isset($vals['idEvento'])) {
        $this->idEvento = $vals['idEvento'];
      }
      if (isset($vals['idPlatea'])) {
        $this->idPlatea = $vals['idPlatea'];
      }
      if (isset($vals['idFuncion'])) {
        $this->idFuncion = $vals['idFuncion'];
      }
      if (isset($vals['General'])) {
        $this->General = $vals['General'];
      }
      if (isset($vals['Web'])) {
        $this->Web = $vals['Web'];
      }
      if (isset($vals['App'])) {
        $this->App = $vals['App'];
      }
      if (isset($vals['Taquilla'])) {
        $this->Taquilla = $vals['Taquilla'];
      }
      if (isset($vals['idTipoPromocion'])) {
        $this->idTipoPromocion = $vals['idTipoPromocion'];
      }
      if (isset($vals['fechaInicio'])) {
        $this->fechaInicio = $vals['fechaInicio'];
      }
      if (isset($vals['fechaFin'])) {
        $this->fechaFin = $vals['fechaFin'];
      }
      if (isset($vals['TipoPromocion'])) {
        $this->TipoPromocion = $vals['TipoPromocion'];
      }
      if (isset($vals['var1'])) {
        $this->var1 = $vals['var1'];
      }
      if (isset($vals['var2'])) {
        $this->var2 = $vals['var2'];
      }
      if (isset($vals['descuento'])) {
        $this->descuento = $vals['descuento'];
      }
      if (isset($vals['Cmaxima'])) {
        $this->Cmaxima = $vals['Cmaxima'];
      }
      if (isset($vals['var3'])) {
        $this->var3 = $vals['var3'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updatePromocion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idPromocion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idPromocion2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descripcion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->amigoTeatro);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idEvento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idPlatea);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idFuncion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->General);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Web);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->App);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Taquilla);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idTipoPromocion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fechaInicio);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fechaFin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->TipoPromocion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->var1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->var2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descuento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Cmaxima);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->var3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updatePromocion_args');
    if ($this->idPromocion !== null) {
      $xfer += $output->writeFieldBegin('idPromocion', TType::STRING, 1);
      $xfer += $output->writeString($this->idPromocion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idPromocion2 !== null) {
      $xfer += $output->writeFieldBegin('idPromocion2', TType::STRING, 2);
      $xfer += $output->writeString($this->idPromocion2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 3);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descripcion !== null) {
      $xfer += $output->writeFieldBegin('descripcion', TType::STRING, 4);
      $xfer += $output->writeString($this->descripcion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amigoTeatro !== null) {
      $xfer += $output->writeFieldBegin('amigoTeatro', TType::STRING, 5);
      $xfer += $output->writeString($this->amigoTeatro);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idEvento !== null) {
      $xfer += $output->writeFieldBegin('idEvento', TType::STRING, 6);
      $xfer += $output->writeString($this->idEvento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idPlatea !== null) {
      $xfer += $output->writeFieldBegin('idPlatea', TType::STRING, 7);
      $xfer += $output->writeString($this->idPlatea);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idFuncion !== null) {
      $xfer += $output->writeFieldBegin('idFuncion', TType::STRING, 8);
      $xfer += $output->writeString($this->idFuncion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->General !== null) {
      $xfer += $output->writeFieldBegin('General', TType::STRING, 9);
      $xfer += $output->writeString($this->General);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Web !== null) {
      $xfer += $output->writeFieldBegin('Web', TType::STRING, 10);
      $xfer += $output->writeString($this->Web);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->App !== null) {
      $xfer += $output->writeFieldBegin('App', TType::STRING, 11);
      $xfer += $output->writeString($this->App);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Taquilla !== null) {
      $xfer += $output->writeFieldBegin('Taquilla', TType::STRING, 12);
      $xfer += $output->writeString($this->Taquilla);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idTipoPromocion !== null) {
      $xfer += $output->writeFieldBegin('idTipoPromocion', TType::STRING, 13);
      $xfer += $output->writeString($this->idTipoPromocion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fechaInicio !== null) {
      $xfer += $output->writeFieldBegin('fechaInicio', TType::STRING, 14);
      $xfer += $output->writeString($this->fechaInicio);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fechaFin !== null) {
      $xfer += $output->writeFieldBegin('fechaFin', TType::STRING, 15);
      $xfer += $output->writeString($this->fechaFin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->TipoPromocion !== null) {
      $xfer += $output->writeFieldBegin('TipoPromocion', TType::STRING, 16);
      $xfer += $output->writeString($this->TipoPromocion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->var1 !== null) {
      $xfer += $output->writeFieldBegin('var1', TType::STRING, 17);
      $xfer += $output->writeString($this->var1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->var2 !== null) {
      $xfer += $output->writeFieldBegin('var2', TType::STRING, 18);
      $xfer += $output->writeString($this->var2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descuento !== null) {
      $xfer += $output->writeFieldBegin('descuento', TType::STRING, 19);
      $xfer += $output->writeString($this->descuento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Cmaxima !== null) {
      $xfer += $output->writeFieldBegin('Cmaxima', TType::STRING, 20);
      $xfer += $output->writeString($this->Cmaxima);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->var3 !== null) {
      $xfer += $output->writeFieldBegin('var3', TType::STRING, 21);
      $xfer += $output->writeString($this->var3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 22);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updatePromocion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updatePromocion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updatePromocion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertPromocion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'descripcion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'amigoTeatro',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'idEvento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'idPlatea',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'idFuncion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'General',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'Web',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'App',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    10 => array(
      'var' => 'Taquilla',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    11 => array(
      'var' => 'idTipoPromocion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    12 => array(
      'var' => 'fechaInicio',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    13 => array(
      'var' => 'fechaFin',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    14 => array(
      'var' => 'TipoPromocion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    15 => array(
      'var' => 'var1',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    16 => array(
      'var' => 'var2',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    17 => array(
      'var' => 'descuento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    18 => array(
      'var' => 'Cmaxima',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    19 => array(
      'var' => 'var3',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    20 => array(
      'var' => 'usuarioCreacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $descripcion = null;
  /**
   * @var string
   */
  public $amigoTeatro = null;
  /**
   * @var string
   */
  public $idEvento = null;
  /**
   * @var string
   */
  public $idPlatea = null;
  /**
   * @var string
   */
  public $idFuncion = null;
  /**
   * @var string
   */
  public $General = null;
  /**
   * @var string
   */
  public $Web = null;
  /**
   * @var string
   */
  public $App = null;
  /**
   * @var string
   */
  public $Taquilla = null;
  /**
   * @var string
   */
  public $idTipoPromocion = null;
  /**
   * @var string
   */
  public $fechaInicio = null;
  /**
   * @var string
   */
  public $fechaFin = null;
  /**
   * @var string
   */
  public $TipoPromocion = null;
  /**
   * @var string
   */
  public $var1 = null;
  /**
   * @var string
   */
  public $var2 = null;
  /**
   * @var string
   */
  public $descuento = null;
  /**
   * @var string
   */
  public $Cmaxima = null;
  /**
   * @var string
   */
  public $var3 = null;
  /**
   * @var string
   */
  public $usuarioCreacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['descripcion'])) {
        $this->descripcion = $vals['descripcion'];
      }
      if (isset($vals['amigoTeatro'])) {
        $this->amigoTeatro = $vals['amigoTeatro'];
      }
      if (isset($vals['idEvento'])) {
        $this->idEvento = $vals['idEvento'];
      }
      if (isset($vals['idPlatea'])) {
        $this->idPlatea = $vals['idPlatea'];
      }
      if (isset($vals['idFuncion'])) {
        $this->idFuncion = $vals['idFuncion'];
      }
      if (isset($vals['General'])) {
        $this->General = $vals['General'];
      }
      if (isset($vals['Web'])) {
        $this->Web = $vals['Web'];
      }
      if (isset($vals['App'])) {
        $this->App = $vals['App'];
      }
      if (isset($vals['Taquilla'])) {
        $this->Taquilla = $vals['Taquilla'];
      }
      if (isset($vals['idTipoPromocion'])) {
        $this->idTipoPromocion = $vals['idTipoPromocion'];
      }
      if (isset($vals['fechaInicio'])) {
        $this->fechaInicio = $vals['fechaInicio'];
      }
      if (isset($vals['fechaFin'])) {
        $this->fechaFin = $vals['fechaFin'];
      }
      if (isset($vals['TipoPromocion'])) {
        $this->TipoPromocion = $vals['TipoPromocion'];
      }
      if (isset($vals['var1'])) {
        $this->var1 = $vals['var1'];
      }
      if (isset($vals['var2'])) {
        $this->var2 = $vals['var2'];
      }
      if (isset($vals['descuento'])) {
        $this->descuento = $vals['descuento'];
      }
      if (isset($vals['Cmaxima'])) {
        $this->Cmaxima = $vals['Cmaxima'];
      }
      if (isset($vals['var3'])) {
        $this->var3 = $vals['var3'];
      }
      if (isset($vals['usuarioCreacion'])) {
        $this->usuarioCreacion = $vals['usuarioCreacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertPromocion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descripcion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->amigoTeatro);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idEvento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idPlatea);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idFuncion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->General);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Web);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->App);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Taquilla);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idTipoPromocion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fechaInicio);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fechaFin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->TipoPromocion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->var1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->var2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descuento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Cmaxima);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->var3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuarioCreacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertPromocion_args');
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 1);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descripcion !== null) {
      $xfer += $output->writeFieldBegin('descripcion', TType::STRING, 2);
      $xfer += $output->writeString($this->descripcion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amigoTeatro !== null) {
      $xfer += $output->writeFieldBegin('amigoTeatro', TType::STRING, 3);
      $xfer += $output->writeString($this->amigoTeatro);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idEvento !== null) {
      $xfer += $output->writeFieldBegin('idEvento', TType::STRING, 4);
      $xfer += $output->writeString($this->idEvento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idPlatea !== null) {
      $xfer += $output->writeFieldBegin('idPlatea', TType::STRING, 5);
      $xfer += $output->writeString($this->idPlatea);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idFuncion !== null) {
      $xfer += $output->writeFieldBegin('idFuncion', TType::STRING, 6);
      $xfer += $output->writeString($this->idFuncion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->General !== null) {
      $xfer += $output->writeFieldBegin('General', TType::STRING, 7);
      $xfer += $output->writeString($this->General);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Web !== null) {
      $xfer += $output->writeFieldBegin('Web', TType::STRING, 8);
      $xfer += $output->writeString($this->Web);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->App !== null) {
      $xfer += $output->writeFieldBegin('App', TType::STRING, 9);
      $xfer += $output->writeString($this->App);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Taquilla !== null) {
      $xfer += $output->writeFieldBegin('Taquilla', TType::STRING, 10);
      $xfer += $output->writeString($this->Taquilla);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idTipoPromocion !== null) {
      $xfer += $output->writeFieldBegin('idTipoPromocion', TType::STRING, 11);
      $xfer += $output->writeString($this->idTipoPromocion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fechaInicio !== null) {
      $xfer += $output->writeFieldBegin('fechaInicio', TType::STRING, 12);
      $xfer += $output->writeString($this->fechaInicio);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fechaFin !== null) {
      $xfer += $output->writeFieldBegin('fechaFin', TType::STRING, 13);
      $xfer += $output->writeString($this->fechaFin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->TipoPromocion !== null) {
      $xfer += $output->writeFieldBegin('TipoPromocion', TType::STRING, 14);
      $xfer += $output->writeString($this->TipoPromocion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->var1 !== null) {
      $xfer += $output->writeFieldBegin('var1', TType::STRING, 15);
      $xfer += $output->writeString($this->var1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->var2 !== null) {
      $xfer += $output->writeFieldBegin('var2', TType::STRING, 16);
      $xfer += $output->writeString($this->var2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descuento !== null) {
      $xfer += $output->writeFieldBegin('descuento', TType::STRING, 17);
      $xfer += $output->writeString($this->descuento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Cmaxima !== null) {
      $xfer += $output->writeFieldBegin('Cmaxima', TType::STRING, 18);
      $xfer += $output->writeString($this->Cmaxima);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->var3 !== null) {
      $xfer += $output->writeFieldBegin('var3', TType::STRING, 19);
      $xfer += $output->writeString($this->var3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuarioCreacion !== null) {
      $xfer += $output->writeFieldBegin('usuarioCreacion', TType::STRING, 20);
      $xfer += $output->writeString($this->usuarioCreacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertPromocion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertPromocion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertPromocion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getNombrePromocion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idNombrePromocion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idNombrePromocion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idNombrePromocion'])) {
        $this->idNombrePromocion = $vals['idNombrePromocion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getNombrePromocion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idNombrePromocion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getNombrePromocion_args');
    if ($this->idNombrePromocion !== null) {
      $xfer += $output->writeFieldBegin('idNombrePromocion', TType::STRING, 1);
      $xfer += $output->writeString($this->idNombrePromocion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getNombrePromocion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getNombrePromocion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getNombrePromocion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllNombrePromocion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'CRUDServer_getAllNombrePromocion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllNombrePromocion_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllNombrePromocion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllNombrePromocion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllNombrePromocion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoNombrePromocion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoNombrePromocion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoNombrePromocion_args');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 2);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 3);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoNombrePromocion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoNombrePromocion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoNombrePromocion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateNombrePromocion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'descripcion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'idNombrePromocion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $descripcion = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $idNombrePromocion = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['descripcion'])) {
        $this->descripcion = $vals['descripcion'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['idNombrePromocion'])) {
        $this->idNombrePromocion = $vals['idNombrePromocion'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateNombrePromocion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descripcion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idNombrePromocion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateNombrePromocion_args');
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 1);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descripcion !== null) {
      $xfer += $output->writeFieldBegin('descripcion', TType::STRING, 2);
      $xfer += $output->writeString($this->descripcion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 3);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idNombrePromocion !== null) {
      $xfer += $output->writeFieldBegin('idNombrePromocion', TType::STRING, 4);
      $xfer += $output->writeString($this->idNombrePromocion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 5);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateNombrePromocion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateNombrePromocion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateNombrePromocion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertNombrePromocion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'descripcion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'usuarioCreacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $descripcion = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuarioCreacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['descripcion'])) {
        $this->descripcion = $vals['descripcion'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuarioCreacion'])) {
        $this->usuarioCreacion = $vals['usuarioCreacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertNombrePromocion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descripcion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuarioCreacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertNombrePromocion_args');
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 1);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descripcion !== null) {
      $xfer += $output->writeFieldBegin('descripcion', TType::STRING, 2);
      $xfer += $output->writeString($this->descripcion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 3);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuarioCreacion !== null) {
      $xfer += $output->writeFieldBegin('usuarioCreacion', TType::STRING, 4);
      $xfer += $output->writeString($this->usuarioCreacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertNombrePromocion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertNombrePromocion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertNombrePromocion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getRol_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idRol',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idRol = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idRol'])) {
        $this->idRol = $vals['idRol'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getRol_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idRol);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getRol_args');
    if ($this->idRol !== null) {
      $xfer += $output->writeFieldBegin('idRol', TType::STRING, 1);
      $xfer += $output->writeString($this->idRol);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getRol_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getRol_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getRol_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllRol_args {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'CRUDServer_getAllRol_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllRol_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllRol_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllRol_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllRol_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoRol_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoRol_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoRol_args');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 2);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 3);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoRol_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoRol_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoRol_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateRol_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'descripcion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'modulo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'idRol',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $descripcion = null;
  /**
   * @var string
   */
  public $modulo = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $idRol = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['descripcion'])) {
        $this->descripcion = $vals['descripcion'];
      }
      if (isset($vals['modulo'])) {
        $this->modulo = $vals['modulo'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['idRol'])) {
        $this->idRol = $vals['idRol'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateRol_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descripcion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->modulo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idRol);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateRol_args');
    if ($this->descripcion !== null) {
      $xfer += $output->writeFieldBegin('descripcion', TType::STRING, 1);
      $xfer += $output->writeString($this->descripcion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->modulo !== null) {
      $xfer += $output->writeFieldBegin('modulo', TType::STRING, 2);
      $xfer += $output->writeString($this->modulo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 3);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idRol !== null) {
      $xfer += $output->writeFieldBegin('idRol', TType::STRING, 4);
      $xfer += $output->writeString($this->idRol);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 5);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateRol_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateRol_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateRol_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertRol_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'descripcion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'modulo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'usuarioCreacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $descripcion = null;
  /**
   * @var string
   */
  public $modulo = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuarioCreacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['descripcion'])) {
        $this->descripcion = $vals['descripcion'];
      }
      if (isset($vals['modulo'])) {
        $this->modulo = $vals['modulo'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuarioCreacion'])) {
        $this->usuarioCreacion = $vals['usuarioCreacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertRol_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descripcion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->modulo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuarioCreacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertRol_args');
    if ($this->descripcion !== null) {
      $xfer += $output->writeFieldBegin('descripcion', TType::STRING, 1);
      $xfer += $output->writeString($this->descripcion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->modulo !== null) {
      $xfer += $output->writeFieldBegin('modulo', TType::STRING, 2);
      $xfer += $output->writeString($this->modulo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 3);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuarioCreacion !== null) {
      $xfer += $output->writeFieldBegin('usuarioCreacion', TType::STRING, 4);
      $xfer += $output->writeString($this->usuarioCreacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertRol_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertRol_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertRol_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getSala_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idSala',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idSala = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idSala'])) {
        $this->idSala = $vals['idSala'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getSala_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idSala);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getSala_args');
    if ($this->idSala !== null) {
      $xfer += $output->writeFieldBegin('idSala', TType::STRING, 1);
      $xfer += $output->writeString($this->idSala);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getSala_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getSala_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getSala_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllSala_args {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'CRUDServer_getAllSala_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllSala_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllSala_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllSala_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllSala_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoSala_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoSala_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoSala_args');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 2);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 3);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoSala_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoSala_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoSala_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateSala_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'descripcion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'capacidad',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'rutaImagen',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'idSala',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $descripcion = null;
  /**
   * @var string
   */
  public $capacidad = null;
  /**
   * @var string
   */
  public $rutaImagen = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $idSala = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['descripcion'])) {
        $this->descripcion = $vals['descripcion'];
      }
      if (isset($vals['capacidad'])) {
        $this->capacidad = $vals['capacidad'];
      }
      if (isset($vals['rutaImagen'])) {
        $this->rutaImagen = $vals['rutaImagen'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['idSala'])) {
        $this->idSala = $vals['idSala'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateSala_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descripcion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->capacidad);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->rutaImagen);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idSala);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateSala_args');
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 1);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descripcion !== null) {
      $xfer += $output->writeFieldBegin('descripcion', TType::STRING, 2);
      $xfer += $output->writeString($this->descripcion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->capacidad !== null) {
      $xfer += $output->writeFieldBegin('capacidad', TType::STRING, 3);
      $xfer += $output->writeString($this->capacidad);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rutaImagen !== null) {
      $xfer += $output->writeFieldBegin('rutaImagen', TType::STRING, 4);
      $xfer += $output->writeString($this->rutaImagen);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 5);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idSala !== null) {
      $xfer += $output->writeFieldBegin('idSala', TType::STRING, 6);
      $xfer += $output->writeString($this->idSala);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 7);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateSala_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateSala_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateSala_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertSala_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'descripcion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'capacidad',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'rutaImagen',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'usuarioCreacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $descripcion = null;
  /**
   * @var string
   */
  public $capacidad = null;
  /**
   * @var string
   */
  public $rutaImagen = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuarioCreacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['descripcion'])) {
        $this->descripcion = $vals['descripcion'];
      }
      if (isset($vals['capacidad'])) {
        $this->capacidad = $vals['capacidad'];
      }
      if (isset($vals['rutaImagen'])) {
        $this->rutaImagen = $vals['rutaImagen'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuarioCreacion'])) {
        $this->usuarioCreacion = $vals['usuarioCreacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertSala_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descripcion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->capacidad);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->rutaImagen);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuarioCreacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertSala_args');
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 1);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descripcion !== null) {
      $xfer += $output->writeFieldBegin('descripcion', TType::STRING, 2);
      $xfer += $output->writeString($this->descripcion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->capacidad !== null) {
      $xfer += $output->writeFieldBegin('capacidad', TType::STRING, 3);
      $xfer += $output->writeString($this->capacidad);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rutaImagen !== null) {
      $xfer += $output->writeFieldBegin('rutaImagen', TType::STRING, 4);
      $xfer += $output->writeString($this->rutaImagen);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 5);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuarioCreacion !== null) {
      $xfer += $output->writeFieldBegin('usuarioCreacion', TType::STRING, 6);
      $xfer += $output->writeString($this->usuarioCreacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertSala_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertSala_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertSala_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getSalaMapa_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idSalaMapa',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'tipo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idSalaMapa = null;
  /**
   * @var string
   */
  public $tipo = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idSalaMapa'])) {
        $this->idSalaMapa = $vals['idSalaMapa'];
      }
      if (isset($vals['tipo'])) {
        $this->tipo = $vals['tipo'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getSalaMapa_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idSalaMapa);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getSalaMapa_args');
    if ($this->idSalaMapa !== null) {
      $xfer += $output->writeFieldBegin('idSalaMapa', TType::STRING, 1);
      $xfer += $output->writeString($this->idSalaMapa);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipo !== null) {
      $xfer += $output->writeFieldBegin('tipo', TType::STRING, 2);
      $xfer += $output->writeString($this->tipo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getSalaMapa_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getSalaMapa_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getSalaMapa_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllSalaMapa_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'tipo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $tipo = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['tipo'])) {
        $this->tipo = $vals['tipo'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllSalaMapa_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllSalaMapa_args');
    if ($this->tipo !== null) {
      $xfer += $output->writeFieldBegin('tipo', TType::STRING, 1);
      $xfer += $output->writeString($this->tipo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllSalaMapa_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllSalaMapa_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllSalaMapa_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoSalaMapa_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'tipo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;
  /**
   * @var string
   */
  public $tipo = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
      if (isset($vals['tipo'])) {
        $this->tipo = $vals['tipo'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoSalaMapa_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoSalaMapa_args');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 2);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 3);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipo !== null) {
      $xfer += $output->writeFieldBegin('tipo', TType::STRING, 4);
      $xfer += $output->writeString($this->tipo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoSalaMapa_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoSalaMapa_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoSalaMapa_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateSalaMapa_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idSalaMapa',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'idMapa',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'rutaImagen',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idSalaMapa = null;
  /**
   * @var string
   */
  public $idMapa = null;
  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $rutaImagen = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idSalaMapa'])) {
        $this->idSalaMapa = $vals['idSalaMapa'];
      }
      if (isset($vals['idMapa'])) {
        $this->idMapa = $vals['idMapa'];
      }
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['rutaImagen'])) {
        $this->rutaImagen = $vals['rutaImagen'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateSalaMapa_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idSalaMapa);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idMapa);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->rutaImagen);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateSalaMapa_args');
    if ($this->idSalaMapa !== null) {
      $xfer += $output->writeFieldBegin('idSalaMapa', TType::STRING, 1);
      $xfer += $output->writeString($this->idSalaMapa);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idMapa !== null) {
      $xfer += $output->writeFieldBegin('idMapa', TType::STRING, 2);
      $xfer += $output->writeString($this->idMapa);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 3);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rutaImagen !== null) {
      $xfer += $output->writeFieldBegin('rutaImagen', TType::STRING, 4);
      $xfer += $output->writeString($this->rutaImagen);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 5);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 6);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateSalaMapa_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateSalaMapa_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateSalaMapa_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertSalaMapa_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idSala',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'rutaImagen',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'usuarioCreacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idSala = null;
  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $rutaImagen = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuarioCreacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idSala'])) {
        $this->idSala = $vals['idSala'];
      }
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['rutaImagen'])) {
        $this->rutaImagen = $vals['rutaImagen'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuarioCreacion'])) {
        $this->usuarioCreacion = $vals['usuarioCreacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertSalaMapa_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idSala);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->rutaImagen);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuarioCreacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertSalaMapa_args');
    if ($this->idSala !== null) {
      $xfer += $output->writeFieldBegin('idSala', TType::STRING, 1);
      $xfer += $output->writeString($this->idSala);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 2);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rutaImagen !== null) {
      $xfer += $output->writeFieldBegin('rutaImagen', TType::STRING, 3);
      $xfer += $output->writeString($this->rutaImagen);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 4);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuarioCreacion !== null) {
      $xfer += $output->writeFieldBegin('usuarioCreacion', TType::STRING, 5);
      $xfer += $output->writeString($this->usuarioCreacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertSalaMapa_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertSalaMapa_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertSalaMapa_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getTarjeta_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idTarjeta',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idTarjeta = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idTarjeta'])) {
        $this->idTarjeta = $vals['idTarjeta'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getTarjeta_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idTarjeta);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getTarjeta_args');
    if ($this->idTarjeta !== null) {
      $xfer += $output->writeFieldBegin('idTarjeta', TType::STRING, 1);
      $xfer += $output->writeString($this->idTarjeta);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getTarjeta_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getTarjeta_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getTarjeta_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllTarjeta_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'tipo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $tipo = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['tipo'])) {
        $this->tipo = $vals['tipo'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllTarjeta_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllTarjeta_args');
    if ($this->tipo !== null) {
      $xfer += $output->writeFieldBegin('tipo', TType::STRING, 1);
      $xfer += $output->writeString($this->tipo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllTarjeta_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllTarjeta_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllTarjeta_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoTarjeta_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoTarjeta_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoTarjeta_args');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 2);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 3);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoTarjeta_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoTarjeta_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoTarjeta_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateTarjeta_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'tipo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'idTarjeta',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $tipo = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $idTarjeta = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['tipo'])) {
        $this->tipo = $vals['tipo'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['idTarjeta'])) {
        $this->idTarjeta = $vals['idTarjeta'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateTarjeta_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idTarjeta);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateTarjeta_args');
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 1);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipo !== null) {
      $xfer += $output->writeFieldBegin('tipo', TType::STRING, 2);
      $xfer += $output->writeString($this->tipo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 3);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idTarjeta !== null) {
      $xfer += $output->writeFieldBegin('idTarjeta', TType::STRING, 4);
      $xfer += $output->writeString($this->idTarjeta);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 5);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateTarjeta_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateTarjeta_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateTarjeta_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertTarjeta_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'tipo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'usuarioCreacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $tipo = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuarioCreacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['tipo'])) {
        $this->tipo = $vals['tipo'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuarioCreacion'])) {
        $this->usuarioCreacion = $vals['usuarioCreacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertTarjeta_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuarioCreacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertTarjeta_args');
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 1);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipo !== null) {
      $xfer += $output->writeFieldBegin('tipo', TType::STRING, 2);
      $xfer += $output->writeString($this->tipo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 3);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuarioCreacion !== null) {
      $xfer += $output->writeFieldBegin('usuarioCreacion', TType::STRING, 4);
      $xfer += $output->writeString($this->usuarioCreacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertTarjeta_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertTarjeta_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertTarjeta_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getTipoEspectaculo_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idTipoEspectaculo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idTipoEspectaculo = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idTipoEspectaculo'])) {
        $this->idTipoEspectaculo = $vals['idTipoEspectaculo'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getTipoEspectaculo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idTipoEspectaculo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getTipoEspectaculo_args');
    if ($this->idTipoEspectaculo !== null) {
      $xfer += $output->writeFieldBegin('idTipoEspectaculo', TType::STRING, 1);
      $xfer += $output->writeString($this->idTipoEspectaculo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getTipoEspectaculo_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getTipoEspectaculo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getTipoEspectaculo_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllTipoEspectaculo_args {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'CRUDServer_getAllTipoEspectaculo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllTipoEspectaculo_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllTipoEspectaculo_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllTipoEspectaculo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllTipoEspectaculo_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoTipoEspectaculo_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoTipoEspectaculo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoTipoEspectaculo_args');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 2);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 3);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoTipoEspectaculo_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoTipoEspectaculo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoTipoEspectaculo_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateTipoEspectaculo_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'descripcion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'idTipoEspectaculo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $descripcion = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $idTipoEspectaculo = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['descripcion'])) {
        $this->descripcion = $vals['descripcion'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['idTipoEspectaculo'])) {
        $this->idTipoEspectaculo = $vals['idTipoEspectaculo'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateTipoEspectaculo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descripcion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idTipoEspectaculo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateTipoEspectaculo_args');
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 1);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descripcion !== null) {
      $xfer += $output->writeFieldBegin('descripcion', TType::STRING, 2);
      $xfer += $output->writeString($this->descripcion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 3);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idTipoEspectaculo !== null) {
      $xfer += $output->writeFieldBegin('idTipoEspectaculo', TType::STRING, 4);
      $xfer += $output->writeString($this->idTipoEspectaculo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 5);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateTipoEspectaculo_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateTipoEspectaculo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateTipoEspectaculo_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertTipoEspectaculo_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'descripcion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'usuarioCreacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $descripcion = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuarioCreacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['descripcion'])) {
        $this->descripcion = $vals['descripcion'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuarioCreacion'])) {
        $this->usuarioCreacion = $vals['usuarioCreacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertTipoEspectaculo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descripcion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuarioCreacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertTipoEspectaculo_args');
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 1);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descripcion !== null) {
      $xfer += $output->writeFieldBegin('descripcion', TType::STRING, 2);
      $xfer += $output->writeString($this->descripcion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 3);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuarioCreacion !== null) {
      $xfer += $output->writeFieldBegin('usuarioCreacion', TType::STRING, 4);
      $xfer += $output->writeString($this->usuarioCreacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertTipoEspectaculo_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertTipoEspectaculo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertTipoEspectaculo_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getTipoEvento_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idTipoEvento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idTipoEvento = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idTipoEvento'])) {
        $this->idTipoEvento = $vals['idTipoEvento'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getTipoEvento_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idTipoEvento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getTipoEvento_args');
    if ($this->idTipoEvento !== null) {
      $xfer += $output->writeFieldBegin('idTipoEvento', TType::STRING, 1);
      $xfer += $output->writeString($this->idTipoEvento);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getTipoEvento_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getTipoEvento_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getTipoEvento_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllTipoEvento_args {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'CRUDServer_getAllTipoEvento_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllTipoEvento_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllTipoEvento_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllTipoEvento_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllTipoEvento_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoTipoEvento_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoTipoEvento_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoTipoEvento_args');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 2);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 3);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoTipoEvento_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoTipoEvento_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoTipoEvento_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateTipoEvento_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'descripcion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'idTipoEvento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $descripcion = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $idTipoEvento = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['descripcion'])) {
        $this->descripcion = $vals['descripcion'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['idTipoEvento'])) {
        $this->idTipoEvento = $vals['idTipoEvento'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateTipoEvento_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descripcion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idTipoEvento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateTipoEvento_args');
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 1);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descripcion !== null) {
      $xfer += $output->writeFieldBegin('descripcion', TType::STRING, 2);
      $xfer += $output->writeString($this->descripcion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 3);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idTipoEvento !== null) {
      $xfer += $output->writeFieldBegin('idTipoEvento', TType::STRING, 4);
      $xfer += $output->writeString($this->idTipoEvento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 5);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateTipoEvento_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateTipoEvento_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateTipoEvento_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertTipoEvento_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'descripcion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'usuarioCreacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $descripcion = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuarioCreacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['descripcion'])) {
        $this->descripcion = $vals['descripcion'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuarioCreacion'])) {
        $this->usuarioCreacion = $vals['usuarioCreacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertTipoEvento_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descripcion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuarioCreacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertTipoEvento_args');
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 1);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descripcion !== null) {
      $xfer += $output->writeFieldBegin('descripcion', TType::STRING, 2);
      $xfer += $output->writeString($this->descripcion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 3);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuarioCreacion !== null) {
      $xfer += $output->writeFieldBegin('usuarioCreacion', TType::STRING, 4);
      $xfer += $output->writeString($this->usuarioCreacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertTipoEvento_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertTipoEvento_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertTipoEvento_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllCaja_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idUsuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idUsuario = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idUsuario'])) {
        $this->idUsuario = $vals['idUsuario'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllCaja_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idUsuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllCaja_args');
    if ($this->idUsuario !== null) {
      $xfer += $output->writeFieldBegin('idUsuario', TType::STRING, 1);
      $xfer += $output->writeString($this->idUsuario);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllCaja_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllCaja_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllCaja_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getCompraReserva_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idUsuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idUsuario = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idUsuario'])) {
        $this->idUsuario = $vals['idUsuario'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getCompraReserva_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idUsuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getCompraReserva_args');
    if ($this->idUsuario !== null) {
      $xfer += $output->writeFieldBegin('idUsuario', TType::STRING, 1);
      $xfer += $output->writeString($this->idUsuario);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getCompraReserva_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getCompraReserva_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getCompraReserva_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateCompraReserva_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idUsuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'sub_total',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'donacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'dolares_canjeados',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'descuento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'total',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idUsuario = null;
  /**
   * @var string
   */
  public $sub_total = null;
  /**
   * @var string
   */
  public $donacion = null;
  /**
   * @var string
   */
  public $dolares_canjeados = null;
  /**
   * @var string
   */
  public $descuento = null;
  /**
   * @var string
   */
  public $total = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idUsuario'])) {
        $this->idUsuario = $vals['idUsuario'];
      }
      if (isset($vals['sub_total'])) {
        $this->sub_total = $vals['sub_total'];
      }
      if (isset($vals['donacion'])) {
        $this->donacion = $vals['donacion'];
      }
      if (isset($vals['dolares_canjeados'])) {
        $this->dolares_canjeados = $vals['dolares_canjeados'];
      }
      if (isset($vals['descuento'])) {
        $this->descuento = $vals['descuento'];
      }
      if (isset($vals['total'])) {
        $this->total = $vals['total'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateCompraReserva_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idUsuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sub_total);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->donacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dolares_canjeados);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descuento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->total);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateCompraReserva_args');
    if ($this->idUsuario !== null) {
      $xfer += $output->writeFieldBegin('idUsuario', TType::STRING, 1);
      $xfer += $output->writeString($this->idUsuario);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sub_total !== null) {
      $xfer += $output->writeFieldBegin('sub_total', TType::STRING, 2);
      $xfer += $output->writeString($this->sub_total);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->donacion !== null) {
      $xfer += $output->writeFieldBegin('donacion', TType::STRING, 3);
      $xfer += $output->writeString($this->donacion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dolares_canjeados !== null) {
      $xfer += $output->writeFieldBegin('dolares_canjeados', TType::STRING, 4);
      $xfer += $output->writeString($this->dolares_canjeados);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descuento !== null) {
      $xfer += $output->writeFieldBegin('descuento', TType::STRING, 5);
      $xfer += $output->writeString($this->descuento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total !== null) {
      $xfer += $output->writeFieldBegin('total', TType::STRING, 6);
      $xfer += $output->writeString($this->total);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 7);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateCompraReserva_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateCompraReserva_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateCompraReserva_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertEsperaPago_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idUsuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'tipo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'id_tarjeta',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'id_banco',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'lote',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'monto',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idUsuario = null;
  /**
   * @var string
   */
  public $tipo = null;
  /**
   * @var string
   */
  public $id_tarjeta = null;
  /**
   * @var string
   */
  public $id_banco = null;
  /**
   * @var string
   */
  public $lote = null;
  /**
   * @var string
   */
  public $monto = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idUsuario'])) {
        $this->idUsuario = $vals['idUsuario'];
      }
      if (isset($vals['tipo'])) {
        $this->tipo = $vals['tipo'];
      }
      if (isset($vals['id_tarjeta'])) {
        $this->id_tarjeta = $vals['id_tarjeta'];
      }
      if (isset($vals['id_banco'])) {
        $this->id_banco = $vals['id_banco'];
      }
      if (isset($vals['lote'])) {
        $this->lote = $vals['lote'];
      }
      if (isset($vals['monto'])) {
        $this->monto = $vals['monto'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertEsperaPago_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idUsuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id_tarjeta);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id_banco);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lote);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->monto);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertEsperaPago_args');
    if ($this->idUsuario !== null) {
      $xfer += $output->writeFieldBegin('idUsuario', TType::STRING, 1);
      $xfer += $output->writeString($this->idUsuario);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipo !== null) {
      $xfer += $output->writeFieldBegin('tipo', TType::STRING, 2);
      $xfer += $output->writeString($this->tipo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id_tarjeta !== null) {
      $xfer += $output->writeFieldBegin('id_tarjeta', TType::STRING, 3);
      $xfer += $output->writeString($this->id_tarjeta);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id_banco !== null) {
      $xfer += $output->writeFieldBegin('id_banco', TType::STRING, 4);
      $xfer += $output->writeString($this->id_banco);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lote !== null) {
      $xfer += $output->writeFieldBegin('lote', TType::STRING, 5);
      $xfer += $output->writeString($this->lote);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->monto !== null) {
      $xfer += $output->writeFieldBegin('monto', TType::STRING, 6);
      $xfer += $output->writeString($this->monto);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 7);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertEsperaPago_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertEsperaPago_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertEsperaPago_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllEsperaPago_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idUsuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idUsuario = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idUsuario'])) {
        $this->idUsuario = $vals['idUsuario'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllEsperaPago_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idUsuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllEsperaPago_args');
    if ($this->idUsuario !== null) {
      $xfer += $output->writeFieldBegin('idUsuario', TType::STRING, 1);
      $xfer += $output->writeString($this->idUsuario);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllEsperaPago_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllEsperaPago_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllEsperaPago_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_deleteEsperaPago_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idUsuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'idEsperaPago',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idUsuario = null;
  /**
   * @var string
   */
  public $idEsperaPago = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idUsuario'])) {
        $this->idUsuario = $vals['idUsuario'];
      }
      if (isset($vals['idEsperaPago'])) {
        $this->idEsperaPago = $vals['idEsperaPago'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_deleteEsperaPago_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idUsuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idEsperaPago);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_deleteEsperaPago_args');
    if ($this->idUsuario !== null) {
      $xfer += $output->writeFieldBegin('idUsuario', TType::STRING, 1);
      $xfer += $output->writeString($this->idUsuario);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idEsperaPago !== null) {
      $xfer += $output->writeFieldBegin('idEsperaPago', TType::STRING, 2);
      $xfer += $output->writeString($this->idEsperaPago);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_deleteEsperaPago_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_deleteEsperaPago_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_deleteEsperaPago_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllPuntos_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idUsuarioCliente',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idUsuarioCliente = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idUsuarioCliente'])) {
        $this->idUsuarioCliente = $vals['idUsuarioCliente'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllPuntos_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idUsuarioCliente);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllPuntos_args');
    if ($this->idUsuarioCliente !== null) {
      $xfer += $output->writeFieldBegin('idUsuarioCliente', TType::STRING, 1);
      $xfer += $output->writeString($this->idUsuarioCliente);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllPuntos_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllPuntos_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllPuntos_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertDonacion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idUsuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'idUsuarioCliente',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'donacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'puntos_canjeados',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idUsuario = null;
  /**
   * @var string
   */
  public $idUsuarioCliente = null;
  /**
   * @var string
   */
  public $donacion = null;
  /**
   * @var string
   */
  public $puntos_canjeados = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idUsuario'])) {
        $this->idUsuario = $vals['idUsuario'];
      }
      if (isset($vals['idUsuarioCliente'])) {
        $this->idUsuarioCliente = $vals['idUsuarioCliente'];
      }
      if (isset($vals['donacion'])) {
        $this->donacion = $vals['donacion'];
      }
      if (isset($vals['puntos_canjeados'])) {
        $this->puntos_canjeados = $vals['puntos_canjeados'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertDonacion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idUsuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idUsuarioCliente);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->donacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->puntos_canjeados);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertDonacion_args');
    if ($this->idUsuario !== null) {
      $xfer += $output->writeFieldBegin('idUsuario', TType::STRING, 1);
      $xfer += $output->writeString($this->idUsuario);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idUsuarioCliente !== null) {
      $xfer += $output->writeFieldBegin('idUsuarioCliente', TType::STRING, 2);
      $xfer += $output->writeString($this->idUsuarioCliente);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->donacion !== null) {
      $xfer += $output->writeFieldBegin('donacion', TType::STRING, 3);
      $xfer += $output->writeString($this->donacion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->puntos_canjeados !== null) {
      $xfer += $output->writeFieldBegin('puntos_canjeados', TType::STRING, 4);
      $xfer += $output->writeString($this->puntos_canjeados);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertDonacion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertDonacion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertDonacion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getCaja_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idCaja',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'idUsuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idCaja = null;
  /**
   * @var string
   */
  public $idUsuario = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idCaja'])) {
        $this->idCaja = $vals['idCaja'];
      }
      if (isset($vals['idUsuario'])) {
        $this->idUsuario = $vals['idUsuario'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getCaja_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idCaja);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idUsuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getCaja_args');
    if ($this->idCaja !== null) {
      $xfer += $output->writeFieldBegin('idCaja', TType::STRING, 1);
      $xfer += $output->writeString($this->idCaja);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idUsuario !== null) {
      $xfer += $output->writeFieldBegin('idUsuario', TType::STRING, 2);
      $xfer += $output->writeString($this->idUsuario);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getCaja_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getCaja_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getCaja_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_editarCaja_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idUsuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'idCaja',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idUsuario = null;
  /**
   * @var string
   */
  public $idCaja = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idUsuario'])) {
        $this->idUsuario = $vals['idUsuario'];
      }
      if (isset($vals['idCaja'])) {
        $this->idCaja = $vals['idCaja'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_editarCaja_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idUsuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idCaja);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_editarCaja_args');
    if ($this->idUsuario !== null) {
      $xfer += $output->writeFieldBegin('idUsuario', TType::STRING, 1);
      $xfer += $output->writeString($this->idUsuario);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idCaja !== null) {
      $xfer += $output->writeFieldBegin('idCaja', TType::STRING, 2);
      $xfer += $output->writeString($this->idCaja);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_editarCaja_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_editarCaja_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_editarCaja_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_abrirCaja_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idUsuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'Usuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idUsuario = null;
  /**
   * @var string
   */
  public $Usuario = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idUsuario'])) {
        $this->idUsuario = $vals['idUsuario'];
      }
      if (isset($vals['Usuario'])) {
        $this->Usuario = $vals['Usuario'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_abrirCaja_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idUsuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Usuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_abrirCaja_args');
    if ($this->idUsuario !== null) {
      $xfer += $output->writeFieldBegin('idUsuario', TType::STRING, 1);
      $xfer += $output->writeString($this->idUsuario);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Usuario !== null) {
      $xfer += $output->writeFieldBegin('Usuario', TType::STRING, 2);
      $xfer += $output->writeString($this->Usuario);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_abrirCaja_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_abrirCaja_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_abrirCaja_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_actualizarReserva_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idUsuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idUsuario = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idUsuario'])) {
        $this->idUsuario = $vals['idUsuario'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_actualizarReserva_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idUsuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_actualizarReserva_args');
    if ($this->idUsuario !== null) {
      $xfer += $output->writeFieldBegin('idUsuario', TType::STRING, 1);
      $xfer += $output->writeString($this->idUsuario);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_actualizarReserva_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_actualizarReserva_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_actualizarReserva_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoCaja_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoCaja_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoCaja_args');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 2);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 3);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoCaja_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoCaja_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoCaja_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getFacturacion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idFacturacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idFacturacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idFacturacion'])) {
        $this->idFacturacion = $vals['idFacturacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getFacturacion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idFacturacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getFacturacion_args');
    if ($this->idFacturacion !== null) {
      $xfer += $output->writeFieldBegin('idFacturacion', TType::STRING, 1);
      $xfer += $output->writeString($this->idFacturacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getFacturacion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getFacturacion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getFacturacion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllFacturacion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idUsuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idUsuario = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idUsuario'])) {
        $this->idUsuario = $vals['idUsuario'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllFacturacion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idUsuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllFacturacion_args');
    if ($this->idUsuario !== null) {
      $xfer += $output->writeFieldBegin('idUsuario', TType::STRING, 1);
      $xfer += $output->writeString($this->idUsuario);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllFacturacion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllFacturacion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllFacturacion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoFacturacion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoFacturacion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoFacturacion_args');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 2);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 3);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoFacturacion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoFacturacion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoFacturacion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateFacturacion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'nombres',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'apellidos',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'tipo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'cedula',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'razon',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'direccion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'correo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'idUsuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    10 => array(
      'var' => 'idFacturacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    11 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $nombres = null;
  /**
   * @var string
   */
  public $apellidos = null;
  /**
   * @var string
   */
  public $tipo = null;
  /**
   * @var string
   */
  public $cedula = null;
  /**
   * @var string
   */
  public $razon = null;
  /**
   * @var string
   */
  public $direccion = null;
  /**
   * @var string
   */
  public $correo = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $idUsuario = null;
  /**
   * @var string
   */
  public $idFacturacion = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['nombres'])) {
        $this->nombres = $vals['nombres'];
      }
      if (isset($vals['apellidos'])) {
        $this->apellidos = $vals['apellidos'];
      }
      if (isset($vals['tipo'])) {
        $this->tipo = $vals['tipo'];
      }
      if (isset($vals['cedula'])) {
        $this->cedula = $vals['cedula'];
      }
      if (isset($vals['razon'])) {
        $this->razon = $vals['razon'];
      }
      if (isset($vals['direccion'])) {
        $this->direccion = $vals['direccion'];
      }
      if (isset($vals['correo'])) {
        $this->correo = $vals['correo'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['idUsuario'])) {
        $this->idUsuario = $vals['idUsuario'];
      }
      if (isset($vals['idFacturacion'])) {
        $this->idFacturacion = $vals['idFacturacion'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateFacturacion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombres);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apellidos);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cedula);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->razon);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->direccion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->correo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idUsuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idFacturacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateFacturacion_args');
    if ($this->nombres !== null) {
      $xfer += $output->writeFieldBegin('nombres', TType::STRING, 1);
      $xfer += $output->writeString($this->nombres);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->apellidos !== null) {
      $xfer += $output->writeFieldBegin('apellidos', TType::STRING, 2);
      $xfer += $output->writeString($this->apellidos);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipo !== null) {
      $xfer += $output->writeFieldBegin('tipo', TType::STRING, 3);
      $xfer += $output->writeString($this->tipo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cedula !== null) {
      $xfer += $output->writeFieldBegin('cedula', TType::STRING, 4);
      $xfer += $output->writeString($this->cedula);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->razon !== null) {
      $xfer += $output->writeFieldBegin('razon', TType::STRING, 5);
      $xfer += $output->writeString($this->razon);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->direccion !== null) {
      $xfer += $output->writeFieldBegin('direccion', TType::STRING, 6);
      $xfer += $output->writeString($this->direccion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->correo !== null) {
      $xfer += $output->writeFieldBegin('correo', TType::STRING, 7);
      $xfer += $output->writeString($this->correo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 8);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idUsuario !== null) {
      $xfer += $output->writeFieldBegin('idUsuario', TType::STRING, 9);
      $xfer += $output->writeString($this->idUsuario);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idFacturacion !== null) {
      $xfer += $output->writeFieldBegin('idFacturacion', TType::STRING, 10);
      $xfer += $output->writeString($this->idFacturacion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 11);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateFacturacion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateFacturacion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateFacturacion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertFacturacion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'nombres',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'apellidos',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'tipo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'cedula',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'razon',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'direccion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'correo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'idUsuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    10 => array(
      'var' => 'usuarioCreacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $nombres = null;
  /**
   * @var string
   */
  public $apellidos = null;
  /**
   * @var string
   */
  public $tipo = null;
  /**
   * @var string
   */
  public $cedula = null;
  /**
   * @var string
   */
  public $razon = null;
  /**
   * @var string
   */
  public $direccion = null;
  /**
   * @var string
   */
  public $correo = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $idUsuario = null;
  /**
   * @var string
   */
  public $usuarioCreacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['nombres'])) {
        $this->nombres = $vals['nombres'];
      }
      if (isset($vals['apellidos'])) {
        $this->apellidos = $vals['apellidos'];
      }
      if (isset($vals['tipo'])) {
        $this->tipo = $vals['tipo'];
      }
      if (isset($vals['cedula'])) {
        $this->cedula = $vals['cedula'];
      }
      if (isset($vals['razon'])) {
        $this->razon = $vals['razon'];
      }
      if (isset($vals['direccion'])) {
        $this->direccion = $vals['direccion'];
      }
      if (isset($vals['correo'])) {
        $this->correo = $vals['correo'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['idUsuario'])) {
        $this->idUsuario = $vals['idUsuario'];
      }
      if (isset($vals['usuarioCreacion'])) {
        $this->usuarioCreacion = $vals['usuarioCreacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertFacturacion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombres);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apellidos);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cedula);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->razon);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->direccion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->correo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idUsuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuarioCreacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertFacturacion_args');
    if ($this->nombres !== null) {
      $xfer += $output->writeFieldBegin('nombres', TType::STRING, 1);
      $xfer += $output->writeString($this->nombres);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->apellidos !== null) {
      $xfer += $output->writeFieldBegin('apellidos', TType::STRING, 2);
      $xfer += $output->writeString($this->apellidos);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipo !== null) {
      $xfer += $output->writeFieldBegin('tipo', TType::STRING, 3);
      $xfer += $output->writeString($this->tipo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cedula !== null) {
      $xfer += $output->writeFieldBegin('cedula', TType::STRING, 4);
      $xfer += $output->writeString($this->cedula);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->razon !== null) {
      $xfer += $output->writeFieldBegin('razon', TType::STRING, 5);
      $xfer += $output->writeString($this->razon);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->direccion !== null) {
      $xfer += $output->writeFieldBegin('direccion', TType::STRING, 6);
      $xfer += $output->writeString($this->direccion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->correo !== null) {
      $xfer += $output->writeFieldBegin('correo', TType::STRING, 7);
      $xfer += $output->writeString($this->correo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 8);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idUsuario !== null) {
      $xfer += $output->writeFieldBegin('idUsuario', TType::STRING, 9);
      $xfer += $output->writeString($this->idUsuario);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuarioCreacion !== null) {
      $xfer += $output->writeFieldBegin('usuarioCreacion', TType::STRING, 10);
      $xfer += $output->writeString($this->usuarioCreacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertFacturacion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertFacturacion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertFacturacion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getUsuario_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idUsuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idUsuario = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idUsuario'])) {
        $this->idUsuario = $vals['idUsuario'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getUsuario_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idUsuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getUsuario_args');
    if ($this->idUsuario !== null) {
      $xfer += $output->writeFieldBegin('idUsuario', TType::STRING, 1);
      $xfer += $output->writeString($this->idUsuario);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getUsuario_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getUsuario_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getUsuario_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllUsuario_args {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'CRUDServer_getAllUsuario_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllUsuario_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllUsuario_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllUsuario_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllUsuario_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoUsuario_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idUsuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idUsuario = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idUsuario'])) {
        $this->idUsuario = $vals['idUsuario'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoUsuario_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idUsuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoUsuario_args');
    if ($this->idUsuario !== null) {
      $xfer += $output->writeFieldBegin('idUsuario', TType::STRING, 1);
      $xfer += $output->writeString($this->idUsuario);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 2);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 3);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoUsuario_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoUsuario_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoUsuario_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateUsuario_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'nombres',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'apellidos',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'usuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'cedula',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'sexo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'correo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'celular',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'contrasena',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'idPerfil',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    10 => array(
      'var' => 'fechaNacimiento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    11 => array(
      'var' => 'direccion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    12 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    13 => array(
      'var' => 'idUsuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    14 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $nombres = null;
  /**
   * @var string
   */
  public $apellidos = null;
  /**
   * @var string
   */
  public $usuario = null;
  /**
   * @var string
   */
  public $cedula = null;
  /**
   * @var string
   */
  public $sexo = null;
  /**
   * @var string
   */
  public $correo = null;
  /**
   * @var string
   */
  public $celular = null;
  /**
   * @var string
   */
  public $contrasena = null;
  /**
   * @var string
   */
  public $idPerfil = null;
  /**
   * @var string
   */
  public $fechaNacimiento = null;
  /**
   * @var string
   */
  public $direccion = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $idUsuario = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['nombres'])) {
        $this->nombres = $vals['nombres'];
      }
      if (isset($vals['apellidos'])) {
        $this->apellidos = $vals['apellidos'];
      }
      if (isset($vals['usuario'])) {
        $this->usuario = $vals['usuario'];
      }
      if (isset($vals['cedula'])) {
        $this->cedula = $vals['cedula'];
      }
      if (isset($vals['sexo'])) {
        $this->sexo = $vals['sexo'];
      }
      if (isset($vals['correo'])) {
        $this->correo = $vals['correo'];
      }
      if (isset($vals['celular'])) {
        $this->celular = $vals['celular'];
      }
      if (isset($vals['contrasena'])) {
        $this->contrasena = $vals['contrasena'];
      }
      if (isset($vals['idPerfil'])) {
        $this->idPerfil = $vals['idPerfil'];
      }
      if (isset($vals['fechaNacimiento'])) {
        $this->fechaNacimiento = $vals['fechaNacimiento'];
      }
      if (isset($vals['direccion'])) {
        $this->direccion = $vals['direccion'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['idUsuario'])) {
        $this->idUsuario = $vals['idUsuario'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateUsuario_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombres);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apellidos);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cedula);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sexo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->correo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->celular);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->contrasena);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idPerfil);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fechaNacimiento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->direccion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idUsuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateUsuario_args');
    if ($this->nombres !== null) {
      $xfer += $output->writeFieldBegin('nombres', TType::STRING, 1);
      $xfer += $output->writeString($this->nombres);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->apellidos !== null) {
      $xfer += $output->writeFieldBegin('apellidos', TType::STRING, 2);
      $xfer += $output->writeString($this->apellidos);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario !== null) {
      $xfer += $output->writeFieldBegin('usuario', TType::STRING, 3);
      $xfer += $output->writeString($this->usuario);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cedula !== null) {
      $xfer += $output->writeFieldBegin('cedula', TType::STRING, 4);
      $xfer += $output->writeString($this->cedula);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sexo !== null) {
      $xfer += $output->writeFieldBegin('sexo', TType::STRING, 5);
      $xfer += $output->writeString($this->sexo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->correo !== null) {
      $xfer += $output->writeFieldBegin('correo', TType::STRING, 6);
      $xfer += $output->writeString($this->correo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->celular !== null) {
      $xfer += $output->writeFieldBegin('celular', TType::STRING, 7);
      $xfer += $output->writeString($this->celular);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contrasena !== null) {
      $xfer += $output->writeFieldBegin('contrasena', TType::STRING, 8);
      $xfer += $output->writeString($this->contrasena);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idPerfil !== null) {
      $xfer += $output->writeFieldBegin('idPerfil', TType::STRING, 9);
      $xfer += $output->writeString($this->idPerfil);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fechaNacimiento !== null) {
      $xfer += $output->writeFieldBegin('fechaNacimiento', TType::STRING, 10);
      $xfer += $output->writeString($this->fechaNacimiento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->direccion !== null) {
      $xfer += $output->writeFieldBegin('direccion', TType::STRING, 11);
      $xfer += $output->writeString($this->direccion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 12);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idUsuario !== null) {
      $xfer += $output->writeFieldBegin('idUsuario', TType::STRING, 13);
      $xfer += $output->writeString($this->idUsuario);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 14);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateUsuario_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateUsuario_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateUsuario_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertUsuario_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'nombres',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'apellidos',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'usuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'cedula',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'sexo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'correo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'celular',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'contrasena',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'idPerfil',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    10 => array(
      'var' => 'fechaNacimiento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    11 => array(
      'var' => 'direccion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    12 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    13 => array(
      'var' => 'usuarioCreacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $nombres = null;
  /**
   * @var string
   */
  public $apellidos = null;
  /**
   * @var string
   */
  public $usuario = null;
  /**
   * @var string
   */
  public $cedula = null;
  /**
   * @var string
   */
  public $sexo = null;
  /**
   * @var string
   */
  public $correo = null;
  /**
   * @var string
   */
  public $celular = null;
  /**
   * @var string
   */
  public $contrasena = null;
  /**
   * @var string
   */
  public $idPerfil = null;
  /**
   * @var string
   */
  public $fechaNacimiento = null;
  /**
   * @var string
   */
  public $direccion = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuarioCreacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['nombres'])) {
        $this->nombres = $vals['nombres'];
      }
      if (isset($vals['apellidos'])) {
        $this->apellidos = $vals['apellidos'];
      }
      if (isset($vals['usuario'])) {
        $this->usuario = $vals['usuario'];
      }
      if (isset($vals['cedula'])) {
        $this->cedula = $vals['cedula'];
      }
      if (isset($vals['sexo'])) {
        $this->sexo = $vals['sexo'];
      }
      if (isset($vals['correo'])) {
        $this->correo = $vals['correo'];
      }
      if (isset($vals['celular'])) {
        $this->celular = $vals['celular'];
      }
      if (isset($vals['contrasena'])) {
        $this->contrasena = $vals['contrasena'];
      }
      if (isset($vals['idPerfil'])) {
        $this->idPerfil = $vals['idPerfil'];
      }
      if (isset($vals['fechaNacimiento'])) {
        $this->fechaNacimiento = $vals['fechaNacimiento'];
      }
      if (isset($vals['direccion'])) {
        $this->direccion = $vals['direccion'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuarioCreacion'])) {
        $this->usuarioCreacion = $vals['usuarioCreacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertUsuario_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombres);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apellidos);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cedula);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sexo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->correo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->celular);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->contrasena);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idPerfil);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fechaNacimiento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->direccion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuarioCreacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertUsuario_args');
    if ($this->nombres !== null) {
      $xfer += $output->writeFieldBegin('nombres', TType::STRING, 1);
      $xfer += $output->writeString($this->nombres);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->apellidos !== null) {
      $xfer += $output->writeFieldBegin('apellidos', TType::STRING, 2);
      $xfer += $output->writeString($this->apellidos);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario !== null) {
      $xfer += $output->writeFieldBegin('usuario', TType::STRING, 3);
      $xfer += $output->writeString($this->usuario);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cedula !== null) {
      $xfer += $output->writeFieldBegin('cedula', TType::STRING, 4);
      $xfer += $output->writeString($this->cedula);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sexo !== null) {
      $xfer += $output->writeFieldBegin('sexo', TType::STRING, 5);
      $xfer += $output->writeString($this->sexo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->correo !== null) {
      $xfer += $output->writeFieldBegin('correo', TType::STRING, 6);
      $xfer += $output->writeString($this->correo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->celular !== null) {
      $xfer += $output->writeFieldBegin('celular', TType::STRING, 7);
      $xfer += $output->writeString($this->celular);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contrasena !== null) {
      $xfer += $output->writeFieldBegin('contrasena', TType::STRING, 8);
      $xfer += $output->writeString($this->contrasena);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idPerfil !== null) {
      $xfer += $output->writeFieldBegin('idPerfil', TType::STRING, 9);
      $xfer += $output->writeString($this->idPerfil);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fechaNacimiento !== null) {
      $xfer += $output->writeFieldBegin('fechaNacimiento', TType::STRING, 10);
      $xfer += $output->writeString($this->fechaNacimiento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->direccion !== null) {
      $xfer += $output->writeFieldBegin('direccion', TType::STRING, 11);
      $xfer += $output->writeString($this->direccion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 12);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuarioCreacion !== null) {
      $xfer += $output->writeFieldBegin('usuarioCreacion', TType::STRING, 13);
      $xfer += $output->writeString($this->usuarioCreacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertUsuario_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertUsuario_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertUsuario_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getUsuarioCliente_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idUsuarioCliente',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idUsuarioCliente = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idUsuarioCliente'])) {
        $this->idUsuarioCliente = $vals['idUsuarioCliente'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getUsuarioCliente_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idUsuarioCliente);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getUsuarioCliente_args');
    if ($this->idUsuarioCliente !== null) {
      $xfer += $output->writeFieldBegin('idUsuarioCliente', TType::STRING, 1);
      $xfer += $output->writeString($this->idUsuarioCliente);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getUsuarioCliente_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getUsuarioCliente_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getUsuarioCliente_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllUsuarioCliente_args {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'CRUDServer_getAllUsuarioCliente_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllUsuarioCliente_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllUsuarioCliente_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllUsuarioCliente_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllUsuarioCliente_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoUsuarioCliente_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idUsuarioCliente',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idUsuarioCliente = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idUsuarioCliente'])) {
        $this->idUsuarioCliente = $vals['idUsuarioCliente'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoUsuarioCliente_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idUsuarioCliente);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoUsuarioCliente_args');
    if ($this->idUsuarioCliente !== null) {
      $xfer += $output->writeFieldBegin('idUsuarioCliente', TType::STRING, 1);
      $xfer += $output->writeString($this->idUsuarioCliente);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 2);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 3);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoUsuarioCliente_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoUsuarioCliente_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoUsuarioCliente_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateUsuarioCliente_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'nombres',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'apellidos',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'usuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'cedula',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'sexo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'correo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'celular',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'contrasena',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'fechaNacimiento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    10 => array(
      'var' => 'direccion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    11 => array(
      'var' => 'amigoTeatro',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    12 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    13 => array(
      'var' => 'idUsuarioCliente',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    14 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $nombres = null;
  /**
   * @var string
   */
  public $apellidos = null;
  /**
   * @var string
   */
  public $usuario = null;
  /**
   * @var string
   */
  public $cedula = null;
  /**
   * @var string
   */
  public $sexo = null;
  /**
   * @var string
   */
  public $correo = null;
  /**
   * @var string
   */
  public $celular = null;
  /**
   * @var string
   */
  public $contrasena = null;
  /**
   * @var string
   */
  public $fechaNacimiento = null;
  /**
   * @var string
   */
  public $direccion = null;
  /**
   * @var string
   */
  public $amigoTeatro = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $idUsuarioCliente = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['nombres'])) {
        $this->nombres = $vals['nombres'];
      }
      if (isset($vals['apellidos'])) {
        $this->apellidos = $vals['apellidos'];
      }
      if (isset($vals['usuario'])) {
        $this->usuario = $vals['usuario'];
      }
      if (isset($vals['cedula'])) {
        $this->cedula = $vals['cedula'];
      }
      if (isset($vals['sexo'])) {
        $this->sexo = $vals['sexo'];
      }
      if (isset($vals['correo'])) {
        $this->correo = $vals['correo'];
      }
      if (isset($vals['celular'])) {
        $this->celular = $vals['celular'];
      }
      if (isset($vals['contrasena'])) {
        $this->contrasena = $vals['contrasena'];
      }
      if (isset($vals['fechaNacimiento'])) {
        $this->fechaNacimiento = $vals['fechaNacimiento'];
      }
      if (isset($vals['direccion'])) {
        $this->direccion = $vals['direccion'];
      }
      if (isset($vals['amigoTeatro'])) {
        $this->amigoTeatro = $vals['amigoTeatro'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['idUsuarioCliente'])) {
        $this->idUsuarioCliente = $vals['idUsuarioCliente'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateUsuarioCliente_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombres);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apellidos);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cedula);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sexo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->correo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->celular);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->contrasena);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fechaNacimiento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->direccion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->amigoTeatro);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idUsuarioCliente);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateUsuarioCliente_args');
    if ($this->nombres !== null) {
      $xfer += $output->writeFieldBegin('nombres', TType::STRING, 1);
      $xfer += $output->writeString($this->nombres);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->apellidos !== null) {
      $xfer += $output->writeFieldBegin('apellidos', TType::STRING, 2);
      $xfer += $output->writeString($this->apellidos);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario !== null) {
      $xfer += $output->writeFieldBegin('usuario', TType::STRING, 3);
      $xfer += $output->writeString($this->usuario);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cedula !== null) {
      $xfer += $output->writeFieldBegin('cedula', TType::STRING, 4);
      $xfer += $output->writeString($this->cedula);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sexo !== null) {
      $xfer += $output->writeFieldBegin('sexo', TType::STRING, 5);
      $xfer += $output->writeString($this->sexo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->correo !== null) {
      $xfer += $output->writeFieldBegin('correo', TType::STRING, 6);
      $xfer += $output->writeString($this->correo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->celular !== null) {
      $xfer += $output->writeFieldBegin('celular', TType::STRING, 7);
      $xfer += $output->writeString($this->celular);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contrasena !== null) {
      $xfer += $output->writeFieldBegin('contrasena', TType::STRING, 8);
      $xfer += $output->writeString($this->contrasena);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fechaNacimiento !== null) {
      $xfer += $output->writeFieldBegin('fechaNacimiento', TType::STRING, 9);
      $xfer += $output->writeString($this->fechaNacimiento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->direccion !== null) {
      $xfer += $output->writeFieldBegin('direccion', TType::STRING, 10);
      $xfer += $output->writeString($this->direccion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amigoTeatro !== null) {
      $xfer += $output->writeFieldBegin('amigoTeatro', TType::STRING, 11);
      $xfer += $output->writeString($this->amigoTeatro);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 12);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idUsuarioCliente !== null) {
      $xfer += $output->writeFieldBegin('idUsuarioCliente', TType::STRING, 13);
      $xfer += $output->writeString($this->idUsuarioCliente);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 14);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateUsuarioCliente_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateUsuarioCliente_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateUsuarioCliente_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertUsuarioCliente_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'nombres',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'apellidos',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'usuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'cedula',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'sexo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'correo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'celular',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'contrasena',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'fechaNacimiento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    10 => array(
      'var' => 'direccion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    11 => array(
      'var' => 'amigoTeatro',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    12 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    13 => array(
      'var' => 'usuarioCreacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $nombres = null;
  /**
   * @var string
   */
  public $apellidos = null;
  /**
   * @var string
   */
  public $usuario = null;
  /**
   * @var string
   */
  public $cedula = null;
  /**
   * @var string
   */
  public $sexo = null;
  /**
   * @var string
   */
  public $correo = null;
  /**
   * @var string
   */
  public $celular = null;
  /**
   * @var string
   */
  public $contrasena = null;
  /**
   * @var string
   */
  public $fechaNacimiento = null;
  /**
   * @var string
   */
  public $direccion = null;
  /**
   * @var string
   */
  public $amigoTeatro = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuarioCreacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['nombres'])) {
        $this->nombres = $vals['nombres'];
      }
      if (isset($vals['apellidos'])) {
        $this->apellidos = $vals['apellidos'];
      }
      if (isset($vals['usuario'])) {
        $this->usuario = $vals['usuario'];
      }
      if (isset($vals['cedula'])) {
        $this->cedula = $vals['cedula'];
      }
      if (isset($vals['sexo'])) {
        $this->sexo = $vals['sexo'];
      }
      if (isset($vals['correo'])) {
        $this->correo = $vals['correo'];
      }
      if (isset($vals['celular'])) {
        $this->celular = $vals['celular'];
      }
      if (isset($vals['contrasena'])) {
        $this->contrasena = $vals['contrasena'];
      }
      if (isset($vals['fechaNacimiento'])) {
        $this->fechaNacimiento = $vals['fechaNacimiento'];
      }
      if (isset($vals['direccion'])) {
        $this->direccion = $vals['direccion'];
      }
      if (isset($vals['amigoTeatro'])) {
        $this->amigoTeatro = $vals['amigoTeatro'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuarioCreacion'])) {
        $this->usuarioCreacion = $vals['usuarioCreacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertUsuarioCliente_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombres);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apellidos);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cedula);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sexo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->correo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->celular);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->contrasena);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fechaNacimiento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->direccion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->amigoTeatro);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuarioCreacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertUsuarioCliente_args');
    if ($this->nombres !== null) {
      $xfer += $output->writeFieldBegin('nombres', TType::STRING, 1);
      $xfer += $output->writeString($this->nombres);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->apellidos !== null) {
      $xfer += $output->writeFieldBegin('apellidos', TType::STRING, 2);
      $xfer += $output->writeString($this->apellidos);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario !== null) {
      $xfer += $output->writeFieldBegin('usuario', TType::STRING, 3);
      $xfer += $output->writeString($this->usuario);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cedula !== null) {
      $xfer += $output->writeFieldBegin('cedula', TType::STRING, 4);
      $xfer += $output->writeString($this->cedula);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sexo !== null) {
      $xfer += $output->writeFieldBegin('sexo', TType::STRING, 5);
      $xfer += $output->writeString($this->sexo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->correo !== null) {
      $xfer += $output->writeFieldBegin('correo', TType::STRING, 6);
      $xfer += $output->writeString($this->correo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->celular !== null) {
      $xfer += $output->writeFieldBegin('celular', TType::STRING, 7);
      $xfer += $output->writeString($this->celular);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contrasena !== null) {
      $xfer += $output->writeFieldBegin('contrasena', TType::STRING, 8);
      $xfer += $output->writeString($this->contrasena);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fechaNacimiento !== null) {
      $xfer += $output->writeFieldBegin('fechaNacimiento', TType::STRING, 9);
      $xfer += $output->writeString($this->fechaNacimiento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->direccion !== null) {
      $xfer += $output->writeFieldBegin('direccion', TType::STRING, 10);
      $xfer += $output->writeString($this->direccion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amigoTeatro !== null) {
      $xfer += $output->writeFieldBegin('amigoTeatro', TType::STRING, 11);
      $xfer += $output->writeString($this->amigoTeatro);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 12);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuarioCreacion !== null) {
      $xfer += $output->writeFieldBegin('usuarioCreacion', TType::STRING, 13);
      $xfer += $output->writeString($this->usuarioCreacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertUsuarioCliente_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertUsuarioCliente_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertUsuarioCliente_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getUsuarioEvento_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idUsuarioEvento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idUsuarioEvento = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idUsuarioEvento'])) {
        $this->idUsuarioEvento = $vals['idUsuarioEvento'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getUsuarioEvento_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idUsuarioEvento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getUsuarioEvento_args');
    if ($this->idUsuarioEvento !== null) {
      $xfer += $output->writeFieldBegin('idUsuarioEvento', TType::STRING, 1);
      $xfer += $output->writeString($this->idUsuarioEvento);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getUsuarioEvento_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getUsuarioEvento_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getUsuarioEvento_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllUsuarioEvento_args {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'CRUDServer_getAllUsuarioEvento_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllUsuarioEvento_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllUsuarioEvento_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllUsuarioEvento_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllUsuarioEvento_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoUsuarioEvento_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idUsuarioEvento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idUsuarioEvento = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idUsuarioEvento'])) {
        $this->idUsuarioEvento = $vals['idUsuarioEvento'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoUsuarioEvento_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idUsuarioEvento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoUsuarioEvento_args');
    if ($this->idUsuarioEvento !== null) {
      $xfer += $output->writeFieldBegin('idUsuarioEvento', TType::STRING, 1);
      $xfer += $output->writeString($this->idUsuarioEvento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 2);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 3);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoUsuarioEvento_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoUsuarioEvento_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoUsuarioEvento_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateUsuarioEvento_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'nombres',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'apellidos',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'usuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'cedula',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'sexo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'correo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'celular',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'contrasena',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'idPerfil',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    10 => array(
      'var' => 'fechaNacimiento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    11 => array(
      'var' => 'direccion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    12 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    13 => array(
      'var' => 'idUsuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    14 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $nombres = null;
  /**
   * @var string
   */
  public $apellidos = null;
  /**
   * @var string
   */
  public $usuario = null;
  /**
   * @var string
   */
  public $cedula = null;
  /**
   * @var string
   */
  public $sexo = null;
  /**
   * @var string
   */
  public $correo = null;
  /**
   * @var string
   */
  public $celular = null;
  /**
   * @var string
   */
  public $contrasena = null;
  /**
   * @var string
   */
  public $idPerfil = null;
  /**
   * @var string
   */
  public $fechaNacimiento = null;
  /**
   * @var string
   */
  public $direccion = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $idUsuario = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['nombres'])) {
        $this->nombres = $vals['nombres'];
      }
      if (isset($vals['apellidos'])) {
        $this->apellidos = $vals['apellidos'];
      }
      if (isset($vals['usuario'])) {
        $this->usuario = $vals['usuario'];
      }
      if (isset($vals['cedula'])) {
        $this->cedula = $vals['cedula'];
      }
      if (isset($vals['sexo'])) {
        $this->sexo = $vals['sexo'];
      }
      if (isset($vals['correo'])) {
        $this->correo = $vals['correo'];
      }
      if (isset($vals['celular'])) {
        $this->celular = $vals['celular'];
      }
      if (isset($vals['contrasena'])) {
        $this->contrasena = $vals['contrasena'];
      }
      if (isset($vals['idPerfil'])) {
        $this->idPerfil = $vals['idPerfil'];
      }
      if (isset($vals['fechaNacimiento'])) {
        $this->fechaNacimiento = $vals['fechaNacimiento'];
      }
      if (isset($vals['direccion'])) {
        $this->direccion = $vals['direccion'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['idUsuario'])) {
        $this->idUsuario = $vals['idUsuario'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateUsuarioEvento_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombres);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apellidos);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cedula);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sexo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->correo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->celular);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->contrasena);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idPerfil);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fechaNacimiento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->direccion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idUsuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateUsuarioEvento_args');
    if ($this->nombres !== null) {
      $xfer += $output->writeFieldBegin('nombres', TType::STRING, 1);
      $xfer += $output->writeString($this->nombres);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->apellidos !== null) {
      $xfer += $output->writeFieldBegin('apellidos', TType::STRING, 2);
      $xfer += $output->writeString($this->apellidos);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario !== null) {
      $xfer += $output->writeFieldBegin('usuario', TType::STRING, 3);
      $xfer += $output->writeString($this->usuario);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cedula !== null) {
      $xfer += $output->writeFieldBegin('cedula', TType::STRING, 4);
      $xfer += $output->writeString($this->cedula);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sexo !== null) {
      $xfer += $output->writeFieldBegin('sexo', TType::STRING, 5);
      $xfer += $output->writeString($this->sexo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->correo !== null) {
      $xfer += $output->writeFieldBegin('correo', TType::STRING, 6);
      $xfer += $output->writeString($this->correo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->celular !== null) {
      $xfer += $output->writeFieldBegin('celular', TType::STRING, 7);
      $xfer += $output->writeString($this->celular);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contrasena !== null) {
      $xfer += $output->writeFieldBegin('contrasena', TType::STRING, 8);
      $xfer += $output->writeString($this->contrasena);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idPerfil !== null) {
      $xfer += $output->writeFieldBegin('idPerfil', TType::STRING, 9);
      $xfer += $output->writeString($this->idPerfil);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fechaNacimiento !== null) {
      $xfer += $output->writeFieldBegin('fechaNacimiento', TType::STRING, 10);
      $xfer += $output->writeString($this->fechaNacimiento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->direccion !== null) {
      $xfer += $output->writeFieldBegin('direccion', TType::STRING, 11);
      $xfer += $output->writeString($this->direccion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 12);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idUsuario !== null) {
      $xfer += $output->writeFieldBegin('idUsuario', TType::STRING, 13);
      $xfer += $output->writeString($this->idUsuario);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 14);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateUsuarioEvento_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateUsuarioEvento_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateUsuarioEvento_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertUsuarioEvento_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'nombres',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'apellidos',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'usuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'cedula',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'sexo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'correo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'celular',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'contrasena',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'idPerfil',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    10 => array(
      'var' => 'fechaNacimiento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    11 => array(
      'var' => 'direccion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    12 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    13 => array(
      'var' => 'usuarioCreacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $nombres = null;
  /**
   * @var string
   */
  public $apellidos = null;
  /**
   * @var string
   */
  public $usuario = null;
  /**
   * @var string
   */
  public $cedula = null;
  /**
   * @var string
   */
  public $sexo = null;
  /**
   * @var string
   */
  public $correo = null;
  /**
   * @var string
   */
  public $celular = null;
  /**
   * @var string
   */
  public $contrasena = null;
  /**
   * @var string
   */
  public $idPerfil = null;
  /**
   * @var string
   */
  public $fechaNacimiento = null;
  /**
   * @var string
   */
  public $direccion = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuarioCreacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['nombres'])) {
        $this->nombres = $vals['nombres'];
      }
      if (isset($vals['apellidos'])) {
        $this->apellidos = $vals['apellidos'];
      }
      if (isset($vals['usuario'])) {
        $this->usuario = $vals['usuario'];
      }
      if (isset($vals['cedula'])) {
        $this->cedula = $vals['cedula'];
      }
      if (isset($vals['sexo'])) {
        $this->sexo = $vals['sexo'];
      }
      if (isset($vals['correo'])) {
        $this->correo = $vals['correo'];
      }
      if (isset($vals['celular'])) {
        $this->celular = $vals['celular'];
      }
      if (isset($vals['contrasena'])) {
        $this->contrasena = $vals['contrasena'];
      }
      if (isset($vals['idPerfil'])) {
        $this->idPerfil = $vals['idPerfil'];
      }
      if (isset($vals['fechaNacimiento'])) {
        $this->fechaNacimiento = $vals['fechaNacimiento'];
      }
      if (isset($vals['direccion'])) {
        $this->direccion = $vals['direccion'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuarioCreacion'])) {
        $this->usuarioCreacion = $vals['usuarioCreacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertUsuarioEvento_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombres);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apellidos);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cedula);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sexo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->correo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->celular);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->contrasena);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idPerfil);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fechaNacimiento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->direccion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuarioCreacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertUsuarioEvento_args');
    if ($this->nombres !== null) {
      $xfer += $output->writeFieldBegin('nombres', TType::STRING, 1);
      $xfer += $output->writeString($this->nombres);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->apellidos !== null) {
      $xfer += $output->writeFieldBegin('apellidos', TType::STRING, 2);
      $xfer += $output->writeString($this->apellidos);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario !== null) {
      $xfer += $output->writeFieldBegin('usuario', TType::STRING, 3);
      $xfer += $output->writeString($this->usuario);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cedula !== null) {
      $xfer += $output->writeFieldBegin('cedula', TType::STRING, 4);
      $xfer += $output->writeString($this->cedula);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sexo !== null) {
      $xfer += $output->writeFieldBegin('sexo', TType::STRING, 5);
      $xfer += $output->writeString($this->sexo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->correo !== null) {
      $xfer += $output->writeFieldBegin('correo', TType::STRING, 6);
      $xfer += $output->writeString($this->correo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->celular !== null) {
      $xfer += $output->writeFieldBegin('celular', TType::STRING, 7);
      $xfer += $output->writeString($this->celular);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contrasena !== null) {
      $xfer += $output->writeFieldBegin('contrasena', TType::STRING, 8);
      $xfer += $output->writeString($this->contrasena);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idPerfil !== null) {
      $xfer += $output->writeFieldBegin('idPerfil', TType::STRING, 9);
      $xfer += $output->writeString($this->idPerfil);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fechaNacimiento !== null) {
      $xfer += $output->writeFieldBegin('fechaNacimiento', TType::STRING, 10);
      $xfer += $output->writeString($this->fechaNacimiento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->direccion !== null) {
      $xfer += $output->writeFieldBegin('direccion', TType::STRING, 11);
      $xfer += $output->writeString($this->direccion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 12);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuarioCreacion !== null) {
      $xfer += $output->writeFieldBegin('usuarioCreacion', TType::STRING, 13);
      $xfer += $output->writeString($this->usuarioCreacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertUsuarioEvento_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertUsuarioEvento_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertUsuarioEvento_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_login_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'usuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'contrasena',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $usuario = null;
  /**
   * @var string
   */
  public $contrasena = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['usuario'])) {
        $this->usuario = $vals['usuario'];
      }
      if (isset($vals['contrasena'])) {
        $this->contrasena = $vals['contrasena'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_login_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->contrasena);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_login_args');
    if ($this->usuario !== null) {
      $xfer += $output->writeFieldBegin('usuario', TType::STRING, 1);
      $xfer += $output->writeString($this->usuario);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contrasena !== null) {
      $xfer += $output->writeFieldBegin('contrasena', TType::STRING, 2);
      $xfer += $output->writeString($this->contrasena);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_login_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_login_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_login_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_generarCodigo_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'celular',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'correo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $celular = null;
  /**
   * @var string
   */
  public $correo = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['celular'])) {
        $this->celular = $vals['celular'];
      }
      if (isset($vals['correo'])) {
        $this->correo = $vals['correo'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_generarCodigo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->celular);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->correo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_generarCodigo_args');
    if ($this->celular !== null) {
      $xfer += $output->writeFieldBegin('celular', TType::STRING, 1);
      $xfer += $output->writeString($this->celular);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->correo !== null) {
      $xfer += $output->writeFieldBegin('correo', TType::STRING, 2);
      $xfer += $output->writeString($this->correo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_generarCodigo_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_generarCodigo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_generarCodigo_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_validadCodigo_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'celular',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'codigo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'clave',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $celular = null;
  /**
   * @var string
   */
  public $codigo = null;
  /**
   * @var string
   */
  public $clave = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['celular'])) {
        $this->celular = $vals['celular'];
      }
      if (isset($vals['codigo'])) {
        $this->codigo = $vals['codigo'];
      }
      if (isset($vals['clave'])) {
        $this->clave = $vals['clave'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_validadCodigo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->celular);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->codigo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clave);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_validadCodigo_args');
    if ($this->celular !== null) {
      $xfer += $output->writeFieldBegin('celular', TType::STRING, 1);
      $xfer += $output->writeString($this->celular);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->codigo !== null) {
      $xfer += $output->writeFieldBegin('codigo', TType::STRING, 2);
      $xfer += $output->writeString($this->codigo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clave !== null) {
      $xfer += $output->writeFieldBegin('clave', TType::STRING, 3);
      $xfer += $output->writeString($this->clave);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_validadCodigo_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_validadCodigo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_validadCodigo_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


