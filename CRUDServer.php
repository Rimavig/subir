<?php
/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface CRUDServerIf {
  /**
   * @param string $usuario
   * @param string $contrasena
   * @return string
   */
  public function login($usuario, $contrasena);
  /**
   * @param string $usuario
   * @return string
   */
  public function getAllResidentes($usuario);
  /**
   * @param string $usuario
   * @return string
   */
  public function getAllVisitantes($usuario);
  /**
   * @param string $usuario
   * @return string
   */
  public function getAllAprobaciones($usuario);
  /**
   * @param string $usuario
   * @return string
   */
  public function getAllCiudadelas($usuario);
  /**
   * @param string $usuario
   * @return string
   */
  public function getAllIngresoR($usuario);
  /**
   * @param string $usuario
   * @return string
   */
  public function getAllIngresoV($usuario);
  /**
   * @param string $usuario
   * @return string
   */
  public function getAllInvitacionR($usuario);
  /**
   * @param string $usuario
   * @return string
   */
  public function getAllInvitacionV($usuario);
  /**
   * @param string $idUsuario
   * @return string
   */
  public function getVisitante($idUsuario);
  /**
   * @param string $idUsuario
   * @return string
   */
  public function getResidente($idUsuario);
  /**
   * @param string $nombre
   * @param string $apellido
   * @param string $celular
   * @param string $cedula
   * @param string $correo
   * @param string $ingreso
   * @param string $invitacion
   * @param string $id_ciudadela
   * @return string
   */
  public function insertResidente($nombre, $apellido, $celular, $cedula, $correo, $ingreso, $invitacion, $id_ciudadela);
  /**
   * @param string $idUsuario
   * @param string $nombre
   * @param string $apellido
   * @param string $celular
   * @param string $cedula
   * @param string $correo
   * @param string $ingreso
   * @param string $invitacion
   * @return string
   */
  public function updateResidente($idUsuario, $nombre, $apellido, $celular, $cedula, $correo, $ingreso, $invitacion);
  /**
   * @param string $nombre
   * @param string $apellido
   * @param string $celular
   * @param string $contrasena
   * @return string
   */
  public function insertVisitante($nombre, $apellido, $celular, $contrasena);
  /**
   * @param string $idUsuario
   * @param string $nombre
   * @param string $apellido
   * @param string $contrasena
   * @return string
   */
  public function updateVisitante($idUsuario, $nombre, $apellido, $contrasena);
  /**
   * @param string $idUsuario
   * @return string
   */
  public function updateEstadoResidente($idUsuario);
  /**
   * @param string $idUsuario
   * @param string $estado
   * @return string
   */
  public function updateEstadoVisitante($idUsuario, $estado);
  /**
   * @param string $idUsuario
   * @return string
   */
  public function deleteResidente($idUsuario);
  /**
   * @param string $idUsuario
   * @return string
   */
  public function deleteVisitante($idUsuario);
  /**
   * @param string $celular
   * @param string $correo
   * @return string
   */
  public function generarCodigo($celular, $correo);
  /**
   * @param string $celular
   * @param string $codigo
   * @param string $clave
   * @return string
   */
  public function validadCodigo($celular, $codigo, $clave);
}


class CRUDServerClient implements \CRUDServerIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function login($usuario, $contrasena)
  {
    $this->send_login($usuario, $contrasena);
    return $this->recv_login();
  }

  public function send_login($usuario, $contrasena)
  {
    $args = new \CRUDServer_login_args();
    $args->usuario = $usuario;
    $args->contrasena = $contrasena;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'login', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('login', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_login()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_login_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_login_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("login failed: unknown result");
  }

  public function getAllResidentes($usuario)
  {
    $this->send_getAllResidentes($usuario);
    return $this->recv_getAllResidentes();
  }

  public function send_getAllResidentes($usuario)
  {
    $args = new \CRUDServer_getAllResidentes_args();
    $args->usuario = $usuario;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllResidentes', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllResidentes', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllResidentes()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAllResidentes_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAllResidentes_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllResidentes failed: unknown result");
  }

  public function getAllVisitantes($usuario)
  {
    $this->send_getAllVisitantes($usuario);
    return $this->recv_getAllVisitantes();
  }

  public function send_getAllVisitantes($usuario)
  {
    $args = new \CRUDServer_getAllVisitantes_args();
    $args->usuario = $usuario;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllVisitantes', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllVisitantes', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllVisitantes()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAllVisitantes_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAllVisitantes_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllVisitantes failed: unknown result");
  }

  public function getAllAprobaciones($usuario)
  {
    $this->send_getAllAprobaciones($usuario);
    return $this->recv_getAllAprobaciones();
  }

  public function send_getAllAprobaciones($usuario)
  {
    $args = new \CRUDServer_getAllAprobaciones_args();
    $args->usuario = $usuario;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllAprobaciones', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllAprobaciones', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllAprobaciones()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAllAprobaciones_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAllAprobaciones_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllAprobaciones failed: unknown result");
  }

  public function getAllCiudadelas($usuario)
  {
    $this->send_getAllCiudadelas($usuario);
    return $this->recv_getAllCiudadelas();
  }

  public function send_getAllCiudadelas($usuario)
  {
    $args = new \CRUDServer_getAllCiudadelas_args();
    $args->usuario = $usuario;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllCiudadelas', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllCiudadelas', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllCiudadelas()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAllCiudadelas_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAllCiudadelas_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllCiudadelas failed: unknown result");
  }

  public function getAllIngresoR($usuario)
  {
    $this->send_getAllIngresoR($usuario);
    return $this->recv_getAllIngresoR();
  }

  public function send_getAllIngresoR($usuario)
  {
    $args = new \CRUDServer_getAllIngresoR_args();
    $args->usuario = $usuario;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllIngresoR', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllIngresoR', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllIngresoR()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAllIngresoR_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAllIngresoR_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllIngresoR failed: unknown result");
  }

  public function getAllIngresoV($usuario)
  {
    $this->send_getAllIngresoV($usuario);
    return $this->recv_getAllIngresoV();
  }

  public function send_getAllIngresoV($usuario)
  {
    $args = new \CRUDServer_getAllIngresoV_args();
    $args->usuario = $usuario;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllIngresoV', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllIngresoV', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllIngresoV()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAllIngresoV_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAllIngresoV_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllIngresoV failed: unknown result");
  }

  public function getAllInvitacionR($usuario)
  {
    $this->send_getAllInvitacionR($usuario);
    return $this->recv_getAllInvitacionR();
  }

  public function send_getAllInvitacionR($usuario)
  {
    $args = new \CRUDServer_getAllInvitacionR_args();
    $args->usuario = $usuario;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllInvitacionR', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllInvitacionR', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllInvitacionR()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAllInvitacionR_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAllInvitacionR_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllInvitacionR failed: unknown result");
  }

  public function getAllInvitacionV($usuario)
  {
    $this->send_getAllInvitacionV($usuario);
    return $this->recv_getAllInvitacionV();
  }

  public function send_getAllInvitacionV($usuario)
  {
    $args = new \CRUDServer_getAllInvitacionV_args();
    $args->usuario = $usuario;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllInvitacionV', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllInvitacionV', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllInvitacionV()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getAllInvitacionV_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getAllInvitacionV_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllInvitacionV failed: unknown result");
  }

  public function getVisitante($idUsuario)
  {
    $this->send_getVisitante($idUsuario);
    return $this->recv_getVisitante();
  }

  public function send_getVisitante($idUsuario)
  {
    $args = new \CRUDServer_getVisitante_args();
    $args->idUsuario = $idUsuario;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getVisitante', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getVisitante', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getVisitante()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getVisitante_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getVisitante_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getVisitante failed: unknown result");
  }

  public function getResidente($idUsuario)
  {
    $this->send_getResidente($idUsuario);
    return $this->recv_getResidente();
  }

  public function send_getResidente($idUsuario)
  {
    $args = new \CRUDServer_getResidente_args();
    $args->idUsuario = $idUsuario;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getResidente', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getResidente', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getResidente()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_getResidente_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_getResidente_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getResidente failed: unknown result");
  }

  public function insertResidente($nombre, $apellido, $celular, $cedula, $correo, $ingreso, $invitacion, $id_ciudadela)
  {
    $this->send_insertResidente($nombre, $apellido, $celular, $cedula, $correo, $ingreso, $invitacion, $id_ciudadela);
    return $this->recv_insertResidente();
  }

  public function send_insertResidente($nombre, $apellido, $celular, $cedula, $correo, $ingreso, $invitacion, $id_ciudadela)
  {
    $args = new \CRUDServer_insertResidente_args();
    $args->nombre = $nombre;
    $args->apellido = $apellido;
    $args->celular = $celular;
    $args->cedula = $cedula;
    $args->correo = $correo;
    $args->ingreso = $ingreso;
    $args->invitacion = $invitacion;
    $args->id_ciudadela = $id_ciudadela;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertResidente', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertResidente', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertResidente()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_insertResidente_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_insertResidente_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertResidente failed: unknown result");
  }

  public function updateResidente($idUsuario, $nombre, $apellido, $celular, $cedula, $correo, $ingreso, $invitacion)
  {
    $this->send_updateResidente($idUsuario, $nombre, $apellido, $celular, $cedula, $correo, $ingreso, $invitacion);
    return $this->recv_updateResidente();
  }

  public function send_updateResidente($idUsuario, $nombre, $apellido, $celular, $cedula, $correo, $ingreso, $invitacion)
  {
    $args = new \CRUDServer_updateResidente_args();
    $args->idUsuario = $idUsuario;
    $args->nombre = $nombre;
    $args->apellido = $apellido;
    $args->celular = $celular;
    $args->cedula = $cedula;
    $args->correo = $correo;
    $args->ingreso = $ingreso;
    $args->invitacion = $invitacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateResidente', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateResidente', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateResidente()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateResidente_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateResidente_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateResidente failed: unknown result");
  }

  public function insertVisitante($nombre, $apellido, $celular, $contrasena)
  {
    $this->send_insertVisitante($nombre, $apellido, $celular, $contrasena);
    return $this->recv_insertVisitante();
  }

  public function send_insertVisitante($nombre, $apellido, $celular, $contrasena)
  {
    $args = new \CRUDServer_insertVisitante_args();
    $args->nombre = $nombre;
    $args->apellido = $apellido;
    $args->celular = $celular;
    $args->contrasena = $contrasena;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertVisitante', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertVisitante', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertVisitante()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_insertVisitante_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_insertVisitante_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertVisitante failed: unknown result");
  }

  public function updateVisitante($idUsuario, $nombre, $apellido, $contrasena)
  {
    $this->send_updateVisitante($idUsuario, $nombre, $apellido, $contrasena);
    return $this->recv_updateVisitante();
  }

  public function send_updateVisitante($idUsuario, $nombre, $apellido, $contrasena)
  {
    $args = new \CRUDServer_updateVisitante_args();
    $args->idUsuario = $idUsuario;
    $args->nombre = $nombre;
    $args->apellido = $apellido;
    $args->contrasena = $contrasena;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateVisitante', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateVisitante', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateVisitante()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateVisitante_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateVisitante_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateVisitante failed: unknown result");
  }

  public function updateEstadoResidente($idUsuario)
  {
    $this->send_updateEstadoResidente($idUsuario);
    return $this->recv_updateEstadoResidente();
  }

  public function send_updateEstadoResidente($idUsuario)
  {
    $args = new \CRUDServer_updateEstadoResidente_args();
    $args->idUsuario = $idUsuario;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoResidente', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoResidente', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoResidente()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateEstadoResidente_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateEstadoResidente_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoResidente failed: unknown result");
  }

  public function updateEstadoVisitante($idUsuario, $estado)
  {
    $this->send_updateEstadoVisitante($idUsuario, $estado);
    return $this->recv_updateEstadoVisitante();
  }

  public function send_updateEstadoVisitante($idUsuario, $estado)
  {
    $args = new \CRUDServer_updateEstadoVisitante_args();
    $args->idUsuario = $idUsuario;
    $args->estado = $estado;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoVisitante', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoVisitante', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoVisitante()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_updateEstadoVisitante_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_updateEstadoVisitante_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoVisitante failed: unknown result");
  }

  public function deleteResidente($idUsuario)
  {
    $this->send_deleteResidente($idUsuario);
    return $this->recv_deleteResidente();
  }

  public function send_deleteResidente($idUsuario)
  {
    $args = new \CRUDServer_deleteResidente_args();
    $args->idUsuario = $idUsuario;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deleteResidente', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deleteResidente', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deleteResidente()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_deleteResidente_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_deleteResidente_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("deleteResidente failed: unknown result");
  }

  public function deleteVisitante($idUsuario)
  {
    $this->send_deleteVisitante($idUsuario);
    return $this->recv_deleteVisitante();
  }

  public function send_deleteVisitante($idUsuario)
  {
    $args = new \CRUDServer_deleteVisitante_args();
    $args->idUsuario = $idUsuario;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deleteVisitante', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deleteVisitante', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deleteVisitante()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_deleteVisitante_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_deleteVisitante_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("deleteVisitante failed: unknown result");
  }

  public function generarCodigo($celular, $correo)
  {
    $this->send_generarCodigo($celular, $correo);
    return $this->recv_generarCodigo();
  }

  public function send_generarCodigo($celular, $correo)
  {
    $args = new \CRUDServer_generarCodigo_args();
    $args->celular = $celular;
    $args->correo = $correo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'generarCodigo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('generarCodigo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_generarCodigo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_generarCodigo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_generarCodigo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("generarCodigo failed: unknown result");
  }

  public function validadCodigo($celular, $codigo, $clave)
  {
    $this->send_validadCodigo($celular, $codigo, $clave);
    return $this->recv_validadCodigo();
  }

  public function send_validadCodigo($celular, $codigo, $clave)
  {
    $args = new \CRUDServer_validadCodigo_args();
    $args->celular = $celular;
    $args->codigo = $codigo;
    $args->clave = $clave;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'validadCodigo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('validadCodigo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_validadCodigo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CRUDServer_validadCodigo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CRUDServer_validadCodigo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("validadCodigo failed: unknown result");
  }

}


// HELPER FUNCTIONS AND STRUCTURES

class CRUDServer_login_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'usuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'contrasena',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $usuario = null;
  /**
   * @var string
   */
  public $contrasena = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['usuario'])) {
        $this->usuario = $vals['usuario'];
      }
      if (isset($vals['contrasena'])) {
        $this->contrasena = $vals['contrasena'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_login_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->contrasena);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_login_args');
    if ($this->usuario !== null) {
      $xfer += $output->writeFieldBegin('usuario', TType::STRING, 1);
      $xfer += $output->writeString($this->usuario);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contrasena !== null) {
      $xfer += $output->writeFieldBegin('contrasena', TType::STRING, 2);
      $xfer += $output->writeString($this->contrasena);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_login_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_login_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_login_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllResidentes_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'usuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $usuario = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['usuario'])) {
        $this->usuario = $vals['usuario'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllResidentes_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllResidentes_args');
    if ($this->usuario !== null) {
      $xfer += $output->writeFieldBegin('usuario', TType::STRING, 1);
      $xfer += $output->writeString($this->usuario);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllResidentes_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllResidentes_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllResidentes_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllVisitantes_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'usuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $usuario = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['usuario'])) {
        $this->usuario = $vals['usuario'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllVisitantes_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllVisitantes_args');
    if ($this->usuario !== null) {
      $xfer += $output->writeFieldBegin('usuario', TType::STRING, 1);
      $xfer += $output->writeString($this->usuario);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllVisitantes_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllVisitantes_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllVisitantes_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllAprobaciones_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'usuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $usuario = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['usuario'])) {
        $this->usuario = $vals['usuario'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllAprobaciones_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllAprobaciones_args');
    if ($this->usuario !== null) {
      $xfer += $output->writeFieldBegin('usuario', TType::STRING, 1);
      $xfer += $output->writeString($this->usuario);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllAprobaciones_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllAprobaciones_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllAprobaciones_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllCiudadelas_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'usuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $usuario = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['usuario'])) {
        $this->usuario = $vals['usuario'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllCiudadelas_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllCiudadelas_args');
    if ($this->usuario !== null) {
      $xfer += $output->writeFieldBegin('usuario', TType::STRING, 1);
      $xfer += $output->writeString($this->usuario);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllCiudadelas_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllCiudadelas_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllCiudadelas_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllIngresoR_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'usuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $usuario = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['usuario'])) {
        $this->usuario = $vals['usuario'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllIngresoR_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllIngresoR_args');
    if ($this->usuario !== null) {
      $xfer += $output->writeFieldBegin('usuario', TType::STRING, 1);
      $xfer += $output->writeString($this->usuario);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllIngresoR_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllIngresoR_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllIngresoR_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllIngresoV_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'usuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $usuario = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['usuario'])) {
        $this->usuario = $vals['usuario'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllIngresoV_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllIngresoV_args');
    if ($this->usuario !== null) {
      $xfer += $output->writeFieldBegin('usuario', TType::STRING, 1);
      $xfer += $output->writeString($this->usuario);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllIngresoV_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllIngresoV_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllIngresoV_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllInvitacionR_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'usuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $usuario = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['usuario'])) {
        $this->usuario = $vals['usuario'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllInvitacionR_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllInvitacionR_args');
    if ($this->usuario !== null) {
      $xfer += $output->writeFieldBegin('usuario', TType::STRING, 1);
      $xfer += $output->writeString($this->usuario);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllInvitacionR_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllInvitacionR_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllInvitacionR_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllInvitacionV_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'usuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $usuario = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['usuario'])) {
        $this->usuario = $vals['usuario'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllInvitacionV_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllInvitacionV_args');
    if ($this->usuario !== null) {
      $xfer += $output->writeFieldBegin('usuario', TType::STRING, 1);
      $xfer += $output->writeString($this->usuario);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getAllInvitacionV_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getAllInvitacionV_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getAllInvitacionV_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getVisitante_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idUsuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idUsuario = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idUsuario'])) {
        $this->idUsuario = $vals['idUsuario'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getVisitante_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idUsuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getVisitante_args');
    if ($this->idUsuario !== null) {
      $xfer += $output->writeFieldBegin('idUsuario', TType::STRING, 1);
      $xfer += $output->writeString($this->idUsuario);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getVisitante_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getVisitante_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getVisitante_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getResidente_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idUsuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idUsuario = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idUsuario'])) {
        $this->idUsuario = $vals['idUsuario'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getResidente_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idUsuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getResidente_args');
    if ($this->idUsuario !== null) {
      $xfer += $output->writeFieldBegin('idUsuario', TType::STRING, 1);
      $xfer += $output->writeString($this->idUsuario);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_getResidente_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_getResidente_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_getResidente_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertResidente_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'apellido',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'celular',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'cedula',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'correo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'ingreso',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'invitacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'id_ciudadela',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $apellido = null;
  /**
   * @var string
   */
  public $celular = null;
  /**
   * @var string
   */
  public $cedula = null;
  /**
   * @var string
   */
  public $correo = null;
  /**
   * @var string
   */
  public $ingreso = null;
  /**
   * @var string
   */
  public $invitacion = null;
  /**
   * @var string
   */
  public $id_ciudadela = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['apellido'])) {
        $this->apellido = $vals['apellido'];
      }
      if (isset($vals['celular'])) {
        $this->celular = $vals['celular'];
      }
      if (isset($vals['cedula'])) {
        $this->cedula = $vals['cedula'];
      }
      if (isset($vals['correo'])) {
        $this->correo = $vals['correo'];
      }
      if (isset($vals['ingreso'])) {
        $this->ingreso = $vals['ingreso'];
      }
      if (isset($vals['invitacion'])) {
        $this->invitacion = $vals['invitacion'];
      }
      if (isset($vals['id_ciudadela'])) {
        $this->id_ciudadela = $vals['id_ciudadela'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertResidente_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apellido);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->celular);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cedula);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->correo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ingreso);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->invitacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id_ciudadela);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertResidente_args');
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 1);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->apellido !== null) {
      $xfer += $output->writeFieldBegin('apellido', TType::STRING, 2);
      $xfer += $output->writeString($this->apellido);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->celular !== null) {
      $xfer += $output->writeFieldBegin('celular', TType::STRING, 3);
      $xfer += $output->writeString($this->celular);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cedula !== null) {
      $xfer += $output->writeFieldBegin('cedula', TType::STRING, 4);
      $xfer += $output->writeString($this->cedula);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->correo !== null) {
      $xfer += $output->writeFieldBegin('correo', TType::STRING, 5);
      $xfer += $output->writeString($this->correo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ingreso !== null) {
      $xfer += $output->writeFieldBegin('ingreso', TType::STRING, 6);
      $xfer += $output->writeString($this->ingreso);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invitacion !== null) {
      $xfer += $output->writeFieldBegin('invitacion', TType::STRING, 7);
      $xfer += $output->writeString($this->invitacion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id_ciudadela !== null) {
      $xfer += $output->writeFieldBegin('id_ciudadela', TType::STRING, 8);
      $xfer += $output->writeString($this->id_ciudadela);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertResidente_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertResidente_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertResidente_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateResidente_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idUsuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'apellido',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'celular',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'cedula',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'correo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'ingreso',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'invitacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idUsuario = null;
  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $apellido = null;
  /**
   * @var string
   */
  public $celular = null;
  /**
   * @var string
   */
  public $cedula = null;
  /**
   * @var string
   */
  public $correo = null;
  /**
   * @var string
   */
  public $ingreso = null;
  /**
   * @var string
   */
  public $invitacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idUsuario'])) {
        $this->idUsuario = $vals['idUsuario'];
      }
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['apellido'])) {
        $this->apellido = $vals['apellido'];
      }
      if (isset($vals['celular'])) {
        $this->celular = $vals['celular'];
      }
      if (isset($vals['cedula'])) {
        $this->cedula = $vals['cedula'];
      }
      if (isset($vals['correo'])) {
        $this->correo = $vals['correo'];
      }
      if (isset($vals['ingreso'])) {
        $this->ingreso = $vals['ingreso'];
      }
      if (isset($vals['invitacion'])) {
        $this->invitacion = $vals['invitacion'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateResidente_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idUsuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apellido);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->celular);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cedula);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->correo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ingreso);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->invitacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateResidente_args');
    if ($this->idUsuario !== null) {
      $xfer += $output->writeFieldBegin('idUsuario', TType::STRING, 1);
      $xfer += $output->writeString($this->idUsuario);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 2);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->apellido !== null) {
      $xfer += $output->writeFieldBegin('apellido', TType::STRING, 3);
      $xfer += $output->writeString($this->apellido);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->celular !== null) {
      $xfer += $output->writeFieldBegin('celular', TType::STRING, 4);
      $xfer += $output->writeString($this->celular);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cedula !== null) {
      $xfer += $output->writeFieldBegin('cedula', TType::STRING, 5);
      $xfer += $output->writeString($this->cedula);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->correo !== null) {
      $xfer += $output->writeFieldBegin('correo', TType::STRING, 6);
      $xfer += $output->writeString($this->correo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ingreso !== null) {
      $xfer += $output->writeFieldBegin('ingreso', TType::STRING, 7);
      $xfer += $output->writeString($this->ingreso);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invitacion !== null) {
      $xfer += $output->writeFieldBegin('invitacion', TType::STRING, 8);
      $xfer += $output->writeString($this->invitacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateResidente_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateResidente_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateResidente_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertVisitante_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'apellido',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'celular',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'contrasena',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $apellido = null;
  /**
   * @var string
   */
  public $celular = null;
  /**
   * @var string
   */
  public $contrasena = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['apellido'])) {
        $this->apellido = $vals['apellido'];
      }
      if (isset($vals['celular'])) {
        $this->celular = $vals['celular'];
      }
      if (isset($vals['contrasena'])) {
        $this->contrasena = $vals['contrasena'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertVisitante_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apellido);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->celular);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->contrasena);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertVisitante_args');
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 1);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->apellido !== null) {
      $xfer += $output->writeFieldBegin('apellido', TType::STRING, 2);
      $xfer += $output->writeString($this->apellido);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->celular !== null) {
      $xfer += $output->writeFieldBegin('celular', TType::STRING, 3);
      $xfer += $output->writeString($this->celular);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contrasena !== null) {
      $xfer += $output->writeFieldBegin('contrasena', TType::STRING, 4);
      $xfer += $output->writeString($this->contrasena);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_insertVisitante_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_insertVisitante_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_insertVisitante_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateVisitante_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idUsuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'apellido',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'contrasena',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idUsuario = null;
  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $apellido = null;
  /**
   * @var string
   */
  public $contrasena = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idUsuario'])) {
        $this->idUsuario = $vals['idUsuario'];
      }
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['apellido'])) {
        $this->apellido = $vals['apellido'];
      }
      if (isset($vals['contrasena'])) {
        $this->contrasena = $vals['contrasena'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateVisitante_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idUsuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apellido);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->contrasena);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateVisitante_args');
    if ($this->idUsuario !== null) {
      $xfer += $output->writeFieldBegin('idUsuario', TType::STRING, 1);
      $xfer += $output->writeString($this->idUsuario);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 2);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->apellido !== null) {
      $xfer += $output->writeFieldBegin('apellido', TType::STRING, 3);
      $xfer += $output->writeString($this->apellido);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contrasena !== null) {
      $xfer += $output->writeFieldBegin('contrasena', TType::STRING, 4);
      $xfer += $output->writeString($this->contrasena);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateVisitante_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateVisitante_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateVisitante_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoResidente_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idUsuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idUsuario = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idUsuario'])) {
        $this->idUsuario = $vals['idUsuario'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoResidente_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idUsuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoResidente_args');
    if ($this->idUsuario !== null) {
      $xfer += $output->writeFieldBegin('idUsuario', TType::STRING, 1);
      $xfer += $output->writeString($this->idUsuario);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoResidente_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoResidente_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoResidente_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoVisitante_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idUsuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idUsuario = null;
  /**
   * @var string
   */
  public $estado = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idUsuario'])) {
        $this->idUsuario = $vals['idUsuario'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoVisitante_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idUsuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoVisitante_args');
    if ($this->idUsuario !== null) {
      $xfer += $output->writeFieldBegin('idUsuario', TType::STRING, 1);
      $xfer += $output->writeString($this->idUsuario);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 2);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_updateEstadoVisitante_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_updateEstadoVisitante_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_updateEstadoVisitante_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_deleteResidente_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idUsuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idUsuario = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idUsuario'])) {
        $this->idUsuario = $vals['idUsuario'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_deleteResidente_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idUsuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_deleteResidente_args');
    if ($this->idUsuario !== null) {
      $xfer += $output->writeFieldBegin('idUsuario', TType::STRING, 1);
      $xfer += $output->writeString($this->idUsuario);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_deleteResidente_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_deleteResidente_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_deleteResidente_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_deleteVisitante_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idUsuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idUsuario = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idUsuario'])) {
        $this->idUsuario = $vals['idUsuario'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_deleteVisitante_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idUsuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_deleteVisitante_args');
    if ($this->idUsuario !== null) {
      $xfer += $output->writeFieldBegin('idUsuario', TType::STRING, 1);
      $xfer += $output->writeString($this->idUsuario);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_deleteVisitante_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_deleteVisitante_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_deleteVisitante_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_generarCodigo_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'celular',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'correo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $celular = null;
  /**
   * @var string
   */
  public $correo = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['celular'])) {
        $this->celular = $vals['celular'];
      }
      if (isset($vals['correo'])) {
        $this->correo = $vals['correo'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_generarCodigo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->celular);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->correo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_generarCodigo_args');
    if ($this->celular !== null) {
      $xfer += $output->writeFieldBegin('celular', TType::STRING, 1);
      $xfer += $output->writeString($this->celular);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->correo !== null) {
      $xfer += $output->writeFieldBegin('correo', TType::STRING, 2);
      $xfer += $output->writeString($this->correo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_generarCodigo_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_generarCodigo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_generarCodigo_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_validadCodigo_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'celular',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'codigo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'clave',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $celular = null;
  /**
   * @var string
   */
  public $codigo = null;
  /**
   * @var string
   */
  public $clave = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['celular'])) {
        $this->celular = $vals['celular'];
      }
      if (isset($vals['codigo'])) {
        $this->codigo = $vals['codigo'];
      }
      if (isset($vals['clave'])) {
        $this->clave = $vals['clave'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_validadCodigo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->celular);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->codigo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clave);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_validadCodigo_args');
    if ($this->celular !== null) {
      $xfer += $output->writeFieldBegin('celular', TType::STRING, 1);
      $xfer += $output->writeString($this->celular);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->codigo !== null) {
      $xfer += $output->writeFieldBegin('codigo', TType::STRING, 2);
      $xfer += $output->writeString($this->codigo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clave !== null) {
      $xfer += $output->writeFieldBegin('clave', TType::STRING, 3);
      $xfer += $output->writeString($this->clave);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CRUDServer_validadCodigo_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CRUDServer_validadCodigo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CRUDServer_validadCodigo_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


