//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

CRUDServer_getAsiento_args = function(args) {
  this.idAsiento = null;
  if (args) {
    if (args.idAsiento !== undefined && args.idAsiento !== null) {
      this.idAsiento = args.idAsiento;
    }
  }
};
CRUDServer_getAsiento_args.prototype = {};
CRUDServer_getAsiento_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.idAsiento = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAsiento_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAsiento_args');
  if (this.idAsiento !== null && this.idAsiento !== undefined) {
    output.writeFieldBegin('idAsiento', Thrift.Type.STRING, 1);
    output.writeString(this.idAsiento);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAsiento_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getAsiento_result.prototype = {};
CRUDServer_getAsiento_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAsiento_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAsiento_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllAsiento_args = function(args) {
};
CRUDServer_getAllAsiento_args.prototype = {};
CRUDServer_getAllAsiento_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllAsiento_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllAsiento_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllAsiento_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getAllAsiento_result.prototype = {};
CRUDServer_getAllAsiento_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllAsiento_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllAsiento_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateAsiento_args = function(args) {
  this.numero = null;
  this.fila = null;
  this.lateral = null;
  this.estado = null;
  this.idAsiento = null;
  if (args) {
    if (args.numero !== undefined && args.numero !== null) {
      this.numero = args.numero;
    }
    if (args.fila !== undefined && args.fila !== null) {
      this.fila = args.fila;
    }
    if (args.lateral !== undefined && args.lateral !== null) {
      this.lateral = args.lateral;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
    if (args.idAsiento !== undefined && args.idAsiento !== null) {
      this.idAsiento = args.idAsiento;
    }
  }
};
CRUDServer_updateAsiento_args.prototype = {};
CRUDServer_updateAsiento_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.numero = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.fila = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.lateral = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.idAsiento = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateAsiento_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateAsiento_args');
  if (this.numero !== null && this.numero !== undefined) {
    output.writeFieldBegin('numero', Thrift.Type.STRING, 1);
    output.writeString(this.numero);
    output.writeFieldEnd();
  }
  if (this.fila !== null && this.fila !== undefined) {
    output.writeFieldBegin('fila', Thrift.Type.STRING, 2);
    output.writeString(this.fila);
    output.writeFieldEnd();
  }
  if (this.lateral !== null && this.lateral !== undefined) {
    output.writeFieldBegin('lateral', Thrift.Type.STRING, 3);
    output.writeString(this.lateral);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 4);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  if (this.idAsiento !== null && this.idAsiento !== undefined) {
    output.writeFieldBegin('idAsiento', Thrift.Type.STRING, 5);
    output.writeString(this.idAsiento);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateAsiento_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_updateAsiento_result.prototype = {};
CRUDServer_updateAsiento_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateAsiento_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateAsiento_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertAsiento_args = function(args) {
  this.numero = null;
  this.fila = null;
  this.lateral = null;
  this.estado = null;
  if (args) {
    if (args.numero !== undefined && args.numero !== null) {
      this.numero = args.numero;
    }
    if (args.fila !== undefined && args.fila !== null) {
      this.fila = args.fila;
    }
    if (args.lateral !== undefined && args.lateral !== null) {
      this.lateral = args.lateral;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
  }
};
CRUDServer_insertAsiento_args.prototype = {};
CRUDServer_insertAsiento_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.numero = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.fila = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.lateral = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertAsiento_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertAsiento_args');
  if (this.numero !== null && this.numero !== undefined) {
    output.writeFieldBegin('numero', Thrift.Type.STRING, 1);
    output.writeString(this.numero);
    output.writeFieldEnd();
  }
  if (this.fila !== null && this.fila !== undefined) {
    output.writeFieldBegin('fila', Thrift.Type.STRING, 2);
    output.writeString(this.fila);
    output.writeFieldEnd();
  }
  if (this.lateral !== null && this.lateral !== undefined) {
    output.writeFieldBegin('lateral', Thrift.Type.STRING, 3);
    output.writeString(this.lateral);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 4);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertAsiento_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_insertAsiento_result.prototype = {};
CRUDServer_insertAsiento_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertAsiento_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertAsiento_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getBanco_args = function(args) {
  this.idBanco = null;
  if (args) {
    if (args.idBanco !== undefined && args.idBanco !== null) {
      this.idBanco = args.idBanco;
    }
  }
};
CRUDServer_getBanco_args.prototype = {};
CRUDServer_getBanco_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.idBanco = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getBanco_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getBanco_args');
  if (this.idBanco !== null && this.idBanco !== undefined) {
    output.writeFieldBegin('idBanco', Thrift.Type.STRING, 1);
    output.writeString(this.idBanco);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getBanco_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getBanco_result.prototype = {};
CRUDServer_getBanco_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getBanco_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getBanco_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllBanco_args = function(args) {
};
CRUDServer_getAllBanco_args.prototype = {};
CRUDServer_getAllBanco_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllBanco_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllBanco_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllBanco_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getAllBanco_result.prototype = {};
CRUDServer_getAllBanco_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllBanco_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllBanco_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateBanco_args = function(args) {
  this.nombre = null;
  this.estado = null;
  this.idBanco = null;
  if (args) {
    if (args.nombre !== undefined && args.nombre !== null) {
      this.nombre = args.nombre;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
    if (args.idBanco !== undefined && args.idBanco !== null) {
      this.idBanco = args.idBanco;
    }
  }
};
CRUDServer_updateBanco_args.prototype = {};
CRUDServer_updateBanco_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nombre = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.idBanco = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateBanco_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateBanco_args');
  if (this.nombre !== null && this.nombre !== undefined) {
    output.writeFieldBegin('nombre', Thrift.Type.STRING, 1);
    output.writeString(this.nombre);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 2);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  if (this.idBanco !== null && this.idBanco !== undefined) {
    output.writeFieldBegin('idBanco', Thrift.Type.STRING, 3);
    output.writeString(this.idBanco);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateBanco_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_updateBanco_result.prototype = {};
CRUDServer_updateBanco_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateBanco_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateBanco_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertBanco_args = function(args) {
  this.nombre = null;
  this.estado = null;
  if (args) {
    if (args.nombre !== undefined && args.nombre !== null) {
      this.nombre = args.nombre;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
  }
};
CRUDServer_insertBanco_args.prototype = {};
CRUDServer_insertBanco_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nombre = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertBanco_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertBanco_args');
  if (this.nombre !== null && this.nombre !== undefined) {
    output.writeFieldBegin('nombre', Thrift.Type.STRING, 1);
    output.writeString(this.nombre);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 2);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertBanco_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_insertBanco_result.prototype = {};
CRUDServer_insertBanco_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertBanco_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertBanco_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getBancoTarjeta_args = function(args) {
  this.idBancoTarjeta = null;
  if (args) {
    if (args.idBancoTarjeta !== undefined && args.idBancoTarjeta !== null) {
      this.idBancoTarjeta = args.idBancoTarjeta;
    }
  }
};
CRUDServer_getBancoTarjeta_args.prototype = {};
CRUDServer_getBancoTarjeta_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.idBancoTarjeta = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getBancoTarjeta_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getBancoTarjeta_args');
  if (this.idBancoTarjeta !== null && this.idBancoTarjeta !== undefined) {
    output.writeFieldBegin('idBancoTarjeta', Thrift.Type.STRING, 1);
    output.writeString(this.idBancoTarjeta);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getBancoTarjeta_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getBancoTarjeta_result.prototype = {};
CRUDServer_getBancoTarjeta_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getBancoTarjeta_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getBancoTarjeta_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllBancoTarjeta_args = function(args) {
};
CRUDServer_getAllBancoTarjeta_args.prototype = {};
CRUDServer_getAllBancoTarjeta_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllBancoTarjeta_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllBancoTarjeta_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllBancoTarjeta_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getAllBancoTarjeta_result.prototype = {};
CRUDServer_getAllBancoTarjeta_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllBancoTarjeta_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllBancoTarjeta_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateBancoTarjeta_args = function(args) {
  this.idBanco = null;
  this.idTarjeta = null;
  this.descuento = null;
  this.estado = null;
  this.idBancoTarjeta = null;
  if (args) {
    if (args.idBanco !== undefined && args.idBanco !== null) {
      this.idBanco = args.idBanco;
    }
    if (args.idTarjeta !== undefined && args.idTarjeta !== null) {
      this.idTarjeta = args.idTarjeta;
    }
    if (args.descuento !== undefined && args.descuento !== null) {
      this.descuento = args.descuento;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
    if (args.idBancoTarjeta !== undefined && args.idBancoTarjeta !== null) {
      this.idBancoTarjeta = args.idBancoTarjeta;
    }
  }
};
CRUDServer_updateBancoTarjeta_args.prototype = {};
CRUDServer_updateBancoTarjeta_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.idBanco = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.idTarjeta = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.descuento = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.idBancoTarjeta = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateBancoTarjeta_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateBancoTarjeta_args');
  if (this.idBanco !== null && this.idBanco !== undefined) {
    output.writeFieldBegin('idBanco', Thrift.Type.STRING, 1);
    output.writeString(this.idBanco);
    output.writeFieldEnd();
  }
  if (this.idTarjeta !== null && this.idTarjeta !== undefined) {
    output.writeFieldBegin('idTarjeta', Thrift.Type.STRING, 2);
    output.writeString(this.idTarjeta);
    output.writeFieldEnd();
  }
  if (this.descuento !== null && this.descuento !== undefined) {
    output.writeFieldBegin('descuento', Thrift.Type.STRING, 3);
    output.writeString(this.descuento);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 4);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  if (this.idBancoTarjeta !== null && this.idBancoTarjeta !== undefined) {
    output.writeFieldBegin('idBancoTarjeta', Thrift.Type.STRING, 5);
    output.writeString(this.idBancoTarjeta);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateBancoTarjeta_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_updateBancoTarjeta_result.prototype = {};
CRUDServer_updateBancoTarjeta_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateBancoTarjeta_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateBancoTarjeta_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertBancoTarjeta_args = function(args) {
  this.idBanco = null;
  this.idTarjeta = null;
  this.descuento = null;
  this.estado = null;
  if (args) {
    if (args.idBanco !== undefined && args.idBanco !== null) {
      this.idBanco = args.idBanco;
    }
    if (args.idTarjeta !== undefined && args.idTarjeta !== null) {
      this.idTarjeta = args.idTarjeta;
    }
    if (args.descuento !== undefined && args.descuento !== null) {
      this.descuento = args.descuento;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
  }
};
CRUDServer_insertBancoTarjeta_args.prototype = {};
CRUDServer_insertBancoTarjeta_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.idBanco = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.idTarjeta = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.descuento = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertBancoTarjeta_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertBancoTarjeta_args');
  if (this.idBanco !== null && this.idBanco !== undefined) {
    output.writeFieldBegin('idBanco', Thrift.Type.STRING, 1);
    output.writeString(this.idBanco);
    output.writeFieldEnd();
  }
  if (this.idTarjeta !== null && this.idTarjeta !== undefined) {
    output.writeFieldBegin('idTarjeta', Thrift.Type.STRING, 2);
    output.writeString(this.idTarjeta);
    output.writeFieldEnd();
  }
  if (this.descuento !== null && this.descuento !== undefined) {
    output.writeFieldBegin('descuento', Thrift.Type.STRING, 3);
    output.writeString(this.descuento);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 4);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertBancoTarjeta_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_insertBancoTarjeta_result.prototype = {};
CRUDServer_insertBancoTarjeta_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertBancoTarjeta_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertBancoTarjeta_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getCategoria_args = function(args) {
  this.idCategoria = null;
  if (args) {
    if (args.idCategoria !== undefined && args.idCategoria !== null) {
      this.idCategoria = args.idCategoria;
    }
  }
};
CRUDServer_getCategoria_args.prototype = {};
CRUDServer_getCategoria_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.idCategoria = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getCategoria_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getCategoria_args');
  if (this.idCategoria !== null && this.idCategoria !== undefined) {
    output.writeFieldBegin('idCategoria', Thrift.Type.STRING, 1);
    output.writeString(this.idCategoria);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getCategoria_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getCategoria_result.prototype = {};
CRUDServer_getCategoria_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getCategoria_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getCategoria_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllCategoria_args = function(args) {
};
CRUDServer_getAllCategoria_args.prototype = {};
CRUDServer_getAllCategoria_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllCategoria_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllCategoria_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllCategoria_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getAllCategoria_result.prototype = {};
CRUDServer_getAllCategoria_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllCategoria_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllCategoria_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateCategoria_args = function(args) {
  this.nombre = null;
  this.descripcion = null;
  this.estado = null;
  this.idCategoria = null;
  if (args) {
    if (args.nombre !== undefined && args.nombre !== null) {
      this.nombre = args.nombre;
    }
    if (args.descripcion !== undefined && args.descripcion !== null) {
      this.descripcion = args.descripcion;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
    if (args.idCategoria !== undefined && args.idCategoria !== null) {
      this.idCategoria = args.idCategoria;
    }
  }
};
CRUDServer_updateCategoria_args.prototype = {};
CRUDServer_updateCategoria_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nombre = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.descripcion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.idCategoria = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateCategoria_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateCategoria_args');
  if (this.nombre !== null && this.nombre !== undefined) {
    output.writeFieldBegin('nombre', Thrift.Type.STRING, 1);
    output.writeString(this.nombre);
    output.writeFieldEnd();
  }
  if (this.descripcion !== null && this.descripcion !== undefined) {
    output.writeFieldBegin('descripcion', Thrift.Type.STRING, 2);
    output.writeString(this.descripcion);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 3);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  if (this.idCategoria !== null && this.idCategoria !== undefined) {
    output.writeFieldBegin('idCategoria', Thrift.Type.STRING, 4);
    output.writeString(this.idCategoria);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateCategoria_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_updateCategoria_result.prototype = {};
CRUDServer_updateCategoria_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateCategoria_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateCategoria_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertCategoria_args = function(args) {
  this.nombre = null;
  this.descripcion = null;
  this.estado = null;
  if (args) {
    if (args.nombre !== undefined && args.nombre !== null) {
      this.nombre = args.nombre;
    }
    if (args.descripcion !== undefined && args.descripcion !== null) {
      this.descripcion = args.descripcion;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
  }
};
CRUDServer_insertCategoria_args.prototype = {};
CRUDServer_insertCategoria_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nombre = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.descripcion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertCategoria_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertCategoria_args');
  if (this.nombre !== null && this.nombre !== undefined) {
    output.writeFieldBegin('nombre', Thrift.Type.STRING, 1);
    output.writeString(this.nombre);
    output.writeFieldEnd();
  }
  if (this.descripcion !== null && this.descripcion !== undefined) {
    output.writeFieldBegin('descripcion', Thrift.Type.STRING, 2);
    output.writeString(this.descripcion);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 3);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertCategoria_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_insertCategoria_result.prototype = {};
CRUDServer_insertCategoria_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertCategoria_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertCategoria_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getClasificacion_args = function(args) {
  this.idClasificacion = null;
  if (args) {
    if (args.idClasificacion !== undefined && args.idClasificacion !== null) {
      this.idClasificacion = args.idClasificacion;
    }
  }
};
CRUDServer_getClasificacion_args.prototype = {};
CRUDServer_getClasificacion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.idClasificacion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getClasificacion_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getClasificacion_args');
  if (this.idClasificacion !== null && this.idClasificacion !== undefined) {
    output.writeFieldBegin('idClasificacion', Thrift.Type.STRING, 1);
    output.writeString(this.idClasificacion);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getClasificacion_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getClasificacion_result.prototype = {};
CRUDServer_getClasificacion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getClasificacion_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getClasificacion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllClasificacion_args = function(args) {
};
CRUDServer_getAllClasificacion_args.prototype = {};
CRUDServer_getAllClasificacion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllClasificacion_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllClasificacion_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllClasificacion_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getAllClasificacion_result.prototype = {};
CRUDServer_getAllClasificacion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllClasificacion_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllClasificacion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateClasificacion_args = function(args) {
  this.nombre = null;
  this.descripcion = null;
  this.estado = null;
  this.idClasificacion = null;
  if (args) {
    if (args.nombre !== undefined && args.nombre !== null) {
      this.nombre = args.nombre;
    }
    if (args.descripcion !== undefined && args.descripcion !== null) {
      this.descripcion = args.descripcion;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
    if (args.idClasificacion !== undefined && args.idClasificacion !== null) {
      this.idClasificacion = args.idClasificacion;
    }
  }
};
CRUDServer_updateClasificacion_args.prototype = {};
CRUDServer_updateClasificacion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nombre = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.descripcion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.idClasificacion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateClasificacion_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateClasificacion_args');
  if (this.nombre !== null && this.nombre !== undefined) {
    output.writeFieldBegin('nombre', Thrift.Type.STRING, 1);
    output.writeString(this.nombre);
    output.writeFieldEnd();
  }
  if (this.descripcion !== null && this.descripcion !== undefined) {
    output.writeFieldBegin('descripcion', Thrift.Type.STRING, 2);
    output.writeString(this.descripcion);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 3);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  if (this.idClasificacion !== null && this.idClasificacion !== undefined) {
    output.writeFieldBegin('idClasificacion', Thrift.Type.STRING, 4);
    output.writeString(this.idClasificacion);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateClasificacion_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_updateClasificacion_result.prototype = {};
CRUDServer_updateClasificacion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateClasificacion_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateClasificacion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertClasificacion_args = function(args) {
  this.nombre = null;
  this.descripcion = null;
  this.estado = null;
  if (args) {
    if (args.nombre !== undefined && args.nombre !== null) {
      this.nombre = args.nombre;
    }
    if (args.descripcion !== undefined && args.descripcion !== null) {
      this.descripcion = args.descripcion;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
  }
};
CRUDServer_insertClasificacion_args.prototype = {};
CRUDServer_insertClasificacion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nombre = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.descripcion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertClasificacion_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertClasificacion_args');
  if (this.nombre !== null && this.nombre !== undefined) {
    output.writeFieldBegin('nombre', Thrift.Type.STRING, 1);
    output.writeString(this.nombre);
    output.writeFieldEnd();
  }
  if (this.descripcion !== null && this.descripcion !== undefined) {
    output.writeFieldBegin('descripcion', Thrift.Type.STRING, 2);
    output.writeString(this.descripcion);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 3);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertClasificacion_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_insertClasificacion_result.prototype = {};
CRUDServer_insertClasificacion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertClasificacion_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertClasificacion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getCodigoPromocional_args = function(args) {
  this.idCodigoPromocional = null;
  if (args) {
    if (args.idCodigoPromocional !== undefined && args.idCodigoPromocional !== null) {
      this.idCodigoPromocional = args.idCodigoPromocional;
    }
  }
};
CRUDServer_getCodigoPromocional_args.prototype = {};
CRUDServer_getCodigoPromocional_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.idCodigoPromocional = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getCodigoPromocional_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getCodigoPromocional_args');
  if (this.idCodigoPromocional !== null && this.idCodigoPromocional !== undefined) {
    output.writeFieldBegin('idCodigoPromocional', Thrift.Type.STRING, 1);
    output.writeString(this.idCodigoPromocional);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getCodigoPromocional_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getCodigoPromocional_result.prototype = {};
CRUDServer_getCodigoPromocional_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getCodigoPromocional_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getCodigoPromocional_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllCodigoPromocional_args = function(args) {
};
CRUDServer_getAllCodigoPromocional_args.prototype = {};
CRUDServer_getAllCodigoPromocional_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllCodigoPromocional_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllCodigoPromocional_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllCodigoPromocional_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getAllCodigoPromocional_result.prototype = {};
CRUDServer_getAllCodigoPromocional_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllCodigoPromocional_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllCodigoPromocional_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateCodigoPromocional_args = function(args) {
  this.nombre = null;
  this.codigo = null;
  this.descuento = null;
  this.estado = null;
  this.idCodigoPromocional = null;
  if (args) {
    if (args.nombre !== undefined && args.nombre !== null) {
      this.nombre = args.nombre;
    }
    if (args.codigo !== undefined && args.codigo !== null) {
      this.codigo = args.codigo;
    }
    if (args.descuento !== undefined && args.descuento !== null) {
      this.descuento = args.descuento;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
    if (args.idCodigoPromocional !== undefined && args.idCodigoPromocional !== null) {
      this.idCodigoPromocional = args.idCodigoPromocional;
    }
  }
};
CRUDServer_updateCodigoPromocional_args.prototype = {};
CRUDServer_updateCodigoPromocional_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nombre = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.codigo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.descuento = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.idCodigoPromocional = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateCodigoPromocional_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateCodigoPromocional_args');
  if (this.nombre !== null && this.nombre !== undefined) {
    output.writeFieldBegin('nombre', Thrift.Type.STRING, 1);
    output.writeString(this.nombre);
    output.writeFieldEnd();
  }
  if (this.codigo !== null && this.codigo !== undefined) {
    output.writeFieldBegin('codigo', Thrift.Type.STRING, 2);
    output.writeString(this.codigo);
    output.writeFieldEnd();
  }
  if (this.descuento !== null && this.descuento !== undefined) {
    output.writeFieldBegin('descuento', Thrift.Type.STRING, 3);
    output.writeString(this.descuento);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 4);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  if (this.idCodigoPromocional !== null && this.idCodigoPromocional !== undefined) {
    output.writeFieldBegin('idCodigoPromocional', Thrift.Type.STRING, 5);
    output.writeString(this.idCodigoPromocional);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateCodigoPromocional_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_updateCodigoPromocional_result.prototype = {};
CRUDServer_updateCodigoPromocional_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateCodigoPromocional_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateCodigoPromocional_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertCodigoPromocional_args = function(args) {
  this.nombre = null;
  this.codigo = null;
  this.descuento = null;
  this.estado = null;
  if (args) {
    if (args.nombre !== undefined && args.nombre !== null) {
      this.nombre = args.nombre;
    }
    if (args.codigo !== undefined && args.codigo !== null) {
      this.codigo = args.codigo;
    }
    if (args.descuento !== undefined && args.descuento !== null) {
      this.descuento = args.descuento;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
  }
};
CRUDServer_insertCodigoPromocional_args.prototype = {};
CRUDServer_insertCodigoPromocional_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nombre = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.codigo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.descuento = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertCodigoPromocional_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertCodigoPromocional_args');
  if (this.nombre !== null && this.nombre !== undefined) {
    output.writeFieldBegin('nombre', Thrift.Type.STRING, 1);
    output.writeString(this.nombre);
    output.writeFieldEnd();
  }
  if (this.codigo !== null && this.codigo !== undefined) {
    output.writeFieldBegin('codigo', Thrift.Type.STRING, 2);
    output.writeString(this.codigo);
    output.writeFieldEnd();
  }
  if (this.descuento !== null && this.descuento !== undefined) {
    output.writeFieldBegin('descuento', Thrift.Type.STRING, 3);
    output.writeString(this.descuento);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 4);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertCodigoPromocional_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_insertCodigoPromocional_result.prototype = {};
CRUDServer_insertCodigoPromocional_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertCodigoPromocional_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertCodigoPromocional_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getDistribucion_args = function(args) {
  this.idDistribucion = null;
  if (args) {
    if (args.idDistribucion !== undefined && args.idDistribucion !== null) {
      this.idDistribucion = args.idDistribucion;
    }
  }
};
CRUDServer_getDistribucion_args.prototype = {};
CRUDServer_getDistribucion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.idDistribucion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getDistribucion_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getDistribucion_args');
  if (this.idDistribucion !== null && this.idDistribucion !== undefined) {
    output.writeFieldBegin('idDistribucion', Thrift.Type.STRING, 1);
    output.writeString(this.idDistribucion);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getDistribucion_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getDistribucion_result.prototype = {};
CRUDServer_getDistribucion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getDistribucion_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getDistribucion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllDistribucion_args = function(args) {
};
CRUDServer_getAllDistribucion_args.prototype = {};
CRUDServer_getAllDistribucion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllDistribucion_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllDistribucion_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllDistribucion_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getAllDistribucion_result.prototype = {};
CRUDServer_getAllDistribucion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllDistribucion_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllDistribucion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateDistribucion_args = function(args) {
  this.idEvento = null;
  this.idPlatea = null;
  this.idAsiento = null;
  this.tipo = null;
  this.estado = null;
  this.idDistribucion = null;
  if (args) {
    if (args.idEvento !== undefined && args.idEvento !== null) {
      this.idEvento = args.idEvento;
    }
    if (args.idPlatea !== undefined && args.idPlatea !== null) {
      this.idPlatea = args.idPlatea;
    }
    if (args.idAsiento !== undefined && args.idAsiento !== null) {
      this.idAsiento = args.idAsiento;
    }
    if (args.tipo !== undefined && args.tipo !== null) {
      this.tipo = args.tipo;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
    if (args.idDistribucion !== undefined && args.idDistribucion !== null) {
      this.idDistribucion = args.idDistribucion;
    }
  }
};
CRUDServer_updateDistribucion_args.prototype = {};
CRUDServer_updateDistribucion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.idEvento = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.idPlatea = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.idAsiento = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.tipo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.idDistribucion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateDistribucion_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateDistribucion_args');
  if (this.idEvento !== null && this.idEvento !== undefined) {
    output.writeFieldBegin('idEvento', Thrift.Type.STRING, 1);
    output.writeString(this.idEvento);
    output.writeFieldEnd();
  }
  if (this.idPlatea !== null && this.idPlatea !== undefined) {
    output.writeFieldBegin('idPlatea', Thrift.Type.STRING, 2);
    output.writeString(this.idPlatea);
    output.writeFieldEnd();
  }
  if (this.idAsiento !== null && this.idAsiento !== undefined) {
    output.writeFieldBegin('idAsiento', Thrift.Type.STRING, 3);
    output.writeString(this.idAsiento);
    output.writeFieldEnd();
  }
  if (this.tipo !== null && this.tipo !== undefined) {
    output.writeFieldBegin('tipo', Thrift.Type.STRING, 4);
    output.writeString(this.tipo);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 5);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  if (this.idDistribucion !== null && this.idDistribucion !== undefined) {
    output.writeFieldBegin('idDistribucion', Thrift.Type.STRING, 6);
    output.writeString(this.idDistribucion);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateDistribucion_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_updateDistribucion_result.prototype = {};
CRUDServer_updateDistribucion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateDistribucion_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateDistribucion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertDistribucion_args = function(args) {
  this.idEvento = null;
  this.idPlatea = null;
  this.idAsiento = null;
  this.tipo = null;
  this.estado = null;
  if (args) {
    if (args.idEvento !== undefined && args.idEvento !== null) {
      this.idEvento = args.idEvento;
    }
    if (args.idPlatea !== undefined && args.idPlatea !== null) {
      this.idPlatea = args.idPlatea;
    }
    if (args.idAsiento !== undefined && args.idAsiento !== null) {
      this.idAsiento = args.idAsiento;
    }
    if (args.tipo !== undefined && args.tipo !== null) {
      this.tipo = args.tipo;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
  }
};
CRUDServer_insertDistribucion_args.prototype = {};
CRUDServer_insertDistribucion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.idEvento = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.idPlatea = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.idAsiento = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.tipo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertDistribucion_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertDistribucion_args');
  if (this.idEvento !== null && this.idEvento !== undefined) {
    output.writeFieldBegin('idEvento', Thrift.Type.STRING, 1);
    output.writeString(this.idEvento);
    output.writeFieldEnd();
  }
  if (this.idPlatea !== null && this.idPlatea !== undefined) {
    output.writeFieldBegin('idPlatea', Thrift.Type.STRING, 2);
    output.writeString(this.idPlatea);
    output.writeFieldEnd();
  }
  if (this.idAsiento !== null && this.idAsiento !== undefined) {
    output.writeFieldBegin('idAsiento', Thrift.Type.STRING, 3);
    output.writeString(this.idAsiento);
    output.writeFieldEnd();
  }
  if (this.tipo !== null && this.tipo !== undefined) {
    output.writeFieldBegin('tipo', Thrift.Type.STRING, 4);
    output.writeString(this.tipo);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 5);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertDistribucion_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_insertDistribucion_result.prototype = {};
CRUDServer_insertDistribucion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertDistribucion_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertDistribucion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getEvento_args = function(args) {
  this.idEvento = null;
  if (args) {
    if (args.idEvento !== undefined && args.idEvento !== null) {
      this.idEvento = args.idEvento;
    }
  }
};
CRUDServer_getEvento_args.prototype = {};
CRUDServer_getEvento_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.idEvento = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getEvento_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getEvento_args');
  if (this.idEvento !== null && this.idEvento !== undefined) {
    output.writeFieldBegin('idEvento', Thrift.Type.STRING, 1);
    output.writeString(this.idEvento);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getEvento_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getEvento_result.prototype = {};
CRUDServer_getEvento_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getEvento_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getEvento_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllEvento_args = function(args) {
};
CRUDServer_getAllEvento_args.prototype = {};
CRUDServer_getAllEvento_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllEvento_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllEvento_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllEvento_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getAllEvento_result.prototype = {};
CRUDServer_getAllEvento_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllEvento_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllEvento_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateEvento_args = function(args) {
  this.nombre = null;
  this.duracion = null;
  this.fechaInicial = null;
  this.fechaFinal = null;
  this.idProductora = null;
  this.idSalaMapa = null;
  this.idTipoEvento = null;
  this.idTipoEspectaculo = null;
  this.idCategoria = null;
  this.idClasificacion = null;
  this.idProcedencia = null;
  this.idTipoPrecio = null;
  this.idFuncion = null;
  this.idPrecio = null;
  this.eventoDestacado = null;
  this.eventoOrden = null;
  this.aforo = null;
  this.sinopsis = null;
  this.productora = null;
  this.elenco = null;
  this.rutaImagen = null;
  this.rutaVideo = null;
  this.tipoEvento = null;
  this.rutaFormulario = null;
  this.estado = null;
  this.idEvento = null;
  if (args) {
    if (args.nombre !== undefined && args.nombre !== null) {
      this.nombre = args.nombre;
    }
    if (args.duracion !== undefined && args.duracion !== null) {
      this.duracion = args.duracion;
    }
    if (args.fechaInicial !== undefined && args.fechaInicial !== null) {
      this.fechaInicial = args.fechaInicial;
    }
    if (args.fechaFinal !== undefined && args.fechaFinal !== null) {
      this.fechaFinal = args.fechaFinal;
    }
    if (args.idProductora !== undefined && args.idProductora !== null) {
      this.idProductora = args.idProductora;
    }
    if (args.idSalaMapa !== undefined && args.idSalaMapa !== null) {
      this.idSalaMapa = args.idSalaMapa;
    }
    if (args.idTipoEvento !== undefined && args.idTipoEvento !== null) {
      this.idTipoEvento = args.idTipoEvento;
    }
    if (args.idTipoEspectaculo !== undefined && args.idTipoEspectaculo !== null) {
      this.idTipoEspectaculo = args.idTipoEspectaculo;
    }
    if (args.idCategoria !== undefined && args.idCategoria !== null) {
      this.idCategoria = args.idCategoria;
    }
    if (args.idClasificacion !== undefined && args.idClasificacion !== null) {
      this.idClasificacion = args.idClasificacion;
    }
    if (args.idProcedencia !== undefined && args.idProcedencia !== null) {
      this.idProcedencia = args.idProcedencia;
    }
    if (args.idTipoPrecio !== undefined && args.idTipoPrecio !== null) {
      this.idTipoPrecio = args.idTipoPrecio;
    }
    if (args.idFuncion !== undefined && args.idFuncion !== null) {
      this.idFuncion = args.idFuncion;
    }
    if (args.idPrecio !== undefined && args.idPrecio !== null) {
      this.idPrecio = args.idPrecio;
    }
    if (args.eventoDestacado !== undefined && args.eventoDestacado !== null) {
      this.eventoDestacado = args.eventoDestacado;
    }
    if (args.eventoOrden !== undefined && args.eventoOrden !== null) {
      this.eventoOrden = args.eventoOrden;
    }
    if (args.aforo !== undefined && args.aforo !== null) {
      this.aforo = args.aforo;
    }
    if (args.sinopsis !== undefined && args.sinopsis !== null) {
      this.sinopsis = args.sinopsis;
    }
    if (args.productora !== undefined && args.productora !== null) {
      this.productora = args.productora;
    }
    if (args.elenco !== undefined && args.elenco !== null) {
      this.elenco = args.elenco;
    }
    if (args.rutaImagen !== undefined && args.rutaImagen !== null) {
      this.rutaImagen = args.rutaImagen;
    }
    if (args.rutaVideo !== undefined && args.rutaVideo !== null) {
      this.rutaVideo = args.rutaVideo;
    }
    if (args.tipoEvento !== undefined && args.tipoEvento !== null) {
      this.tipoEvento = args.tipoEvento;
    }
    if (args.rutaFormulario !== undefined && args.rutaFormulario !== null) {
      this.rutaFormulario = args.rutaFormulario;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
    if (args.idEvento !== undefined && args.idEvento !== null) {
      this.idEvento = args.idEvento;
    }
  }
};
CRUDServer_updateEvento_args.prototype = {};
CRUDServer_updateEvento_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nombre = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.duracion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.fechaInicial = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.fechaFinal = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.idProductora = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.idSalaMapa = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.idTipoEvento = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.idTipoEspectaculo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.idCategoria = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.idClasificacion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.idProcedencia = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.idTipoPrecio = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.idFuncion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.idPrecio = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.eventoDestacado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.eventoOrden = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.aforo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.sinopsis = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRING) {
        this.productora = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.elenco = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.rutaImagen = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.rutaVideo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRING) {
        this.tipoEvento = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRING) {
        this.rutaFormulario = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.STRING) {
        this.idEvento = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateEvento_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateEvento_args');
  if (this.nombre !== null && this.nombre !== undefined) {
    output.writeFieldBegin('nombre', Thrift.Type.STRING, 1);
    output.writeString(this.nombre);
    output.writeFieldEnd();
  }
  if (this.duracion !== null && this.duracion !== undefined) {
    output.writeFieldBegin('duracion', Thrift.Type.STRING, 2);
    output.writeString(this.duracion);
    output.writeFieldEnd();
  }
  if (this.fechaInicial !== null && this.fechaInicial !== undefined) {
    output.writeFieldBegin('fechaInicial', Thrift.Type.STRING, 3);
    output.writeString(this.fechaInicial);
    output.writeFieldEnd();
  }
  if (this.fechaFinal !== null && this.fechaFinal !== undefined) {
    output.writeFieldBegin('fechaFinal', Thrift.Type.STRING, 4);
    output.writeString(this.fechaFinal);
    output.writeFieldEnd();
  }
  if (this.idProductora !== null && this.idProductora !== undefined) {
    output.writeFieldBegin('idProductora', Thrift.Type.STRING, 5);
    output.writeString(this.idProductora);
    output.writeFieldEnd();
  }
  if (this.idSalaMapa !== null && this.idSalaMapa !== undefined) {
    output.writeFieldBegin('idSalaMapa', Thrift.Type.STRING, 6);
    output.writeString(this.idSalaMapa);
    output.writeFieldEnd();
  }
  if (this.idTipoEvento !== null && this.idTipoEvento !== undefined) {
    output.writeFieldBegin('idTipoEvento', Thrift.Type.STRING, 7);
    output.writeString(this.idTipoEvento);
    output.writeFieldEnd();
  }
  if (this.idTipoEspectaculo !== null && this.idTipoEspectaculo !== undefined) {
    output.writeFieldBegin('idTipoEspectaculo', Thrift.Type.STRING, 8);
    output.writeString(this.idTipoEspectaculo);
    output.writeFieldEnd();
  }
  if (this.idCategoria !== null && this.idCategoria !== undefined) {
    output.writeFieldBegin('idCategoria', Thrift.Type.STRING, 9);
    output.writeString(this.idCategoria);
    output.writeFieldEnd();
  }
  if (this.idClasificacion !== null && this.idClasificacion !== undefined) {
    output.writeFieldBegin('idClasificacion', Thrift.Type.STRING, 10);
    output.writeString(this.idClasificacion);
    output.writeFieldEnd();
  }
  if (this.idProcedencia !== null && this.idProcedencia !== undefined) {
    output.writeFieldBegin('idProcedencia', Thrift.Type.STRING, 11);
    output.writeString(this.idProcedencia);
    output.writeFieldEnd();
  }
  if (this.idTipoPrecio !== null && this.idTipoPrecio !== undefined) {
    output.writeFieldBegin('idTipoPrecio', Thrift.Type.STRING, 12);
    output.writeString(this.idTipoPrecio);
    output.writeFieldEnd();
  }
  if (this.idFuncion !== null && this.idFuncion !== undefined) {
    output.writeFieldBegin('idFuncion', Thrift.Type.STRING, 13);
    output.writeString(this.idFuncion);
    output.writeFieldEnd();
  }
  if (this.idPrecio !== null && this.idPrecio !== undefined) {
    output.writeFieldBegin('idPrecio', Thrift.Type.STRING, 14);
    output.writeString(this.idPrecio);
    output.writeFieldEnd();
  }
  if (this.eventoDestacado !== null && this.eventoDestacado !== undefined) {
    output.writeFieldBegin('eventoDestacado', Thrift.Type.STRING, 15);
    output.writeString(this.eventoDestacado);
    output.writeFieldEnd();
  }
  if (this.eventoOrden !== null && this.eventoOrden !== undefined) {
    output.writeFieldBegin('eventoOrden', Thrift.Type.STRING, 16);
    output.writeString(this.eventoOrden);
    output.writeFieldEnd();
  }
  if (this.aforo !== null && this.aforo !== undefined) {
    output.writeFieldBegin('aforo', Thrift.Type.STRING, 17);
    output.writeString(this.aforo);
    output.writeFieldEnd();
  }
  if (this.sinopsis !== null && this.sinopsis !== undefined) {
    output.writeFieldBegin('sinopsis', Thrift.Type.STRING, 18);
    output.writeString(this.sinopsis);
    output.writeFieldEnd();
  }
  if (this.productora !== null && this.productora !== undefined) {
    output.writeFieldBegin('productora', Thrift.Type.STRING, 19);
    output.writeString(this.productora);
    output.writeFieldEnd();
  }
  if (this.elenco !== null && this.elenco !== undefined) {
    output.writeFieldBegin('elenco', Thrift.Type.STRING, 20);
    output.writeString(this.elenco);
    output.writeFieldEnd();
  }
  if (this.rutaImagen !== null && this.rutaImagen !== undefined) {
    output.writeFieldBegin('rutaImagen', Thrift.Type.STRING, 21);
    output.writeString(this.rutaImagen);
    output.writeFieldEnd();
  }
  if (this.rutaVideo !== null && this.rutaVideo !== undefined) {
    output.writeFieldBegin('rutaVideo', Thrift.Type.STRING, 22);
    output.writeString(this.rutaVideo);
    output.writeFieldEnd();
  }
  if (this.tipoEvento !== null && this.tipoEvento !== undefined) {
    output.writeFieldBegin('tipoEvento', Thrift.Type.STRING, 23);
    output.writeString(this.tipoEvento);
    output.writeFieldEnd();
  }
  if (this.rutaFormulario !== null && this.rutaFormulario !== undefined) {
    output.writeFieldBegin('rutaFormulario', Thrift.Type.STRING, 24);
    output.writeString(this.rutaFormulario);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 25);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  if (this.idEvento !== null && this.idEvento !== undefined) {
    output.writeFieldBegin('idEvento', Thrift.Type.STRING, 26);
    output.writeString(this.idEvento);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateEvento_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_updateEvento_result.prototype = {};
CRUDServer_updateEvento_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateEvento_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateEvento_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertEvento_args = function(args) {
  this.nombre = null;
  this.duracion = null;
  this.fechaInicial = null;
  this.fechaFinal = null;
  this.idProductora = null;
  this.idSalaMapa = null;
  this.idTipoEvento = null;
  this.idTipoEspectaculo = null;
  this.idCategoria = null;
  this.idClasificacion = null;
  this.idProcedencia = null;
  this.idTipoPrecio = null;
  this.idFuncion = null;
  this.idPrecio = null;
  this.eventoDestacado = null;
  this.eventoOrden = null;
  this.aforo = null;
  this.sinopsis = null;
  this.productora = null;
  this.elenco = null;
  this.rutaImagen = null;
  this.rutaVideo = null;
  this.tipoEvento = null;
  this.rutaFormulario = null;
  this.estado = null;
  if (args) {
    if (args.nombre !== undefined && args.nombre !== null) {
      this.nombre = args.nombre;
    }
    if (args.duracion !== undefined && args.duracion !== null) {
      this.duracion = args.duracion;
    }
    if (args.fechaInicial !== undefined && args.fechaInicial !== null) {
      this.fechaInicial = args.fechaInicial;
    }
    if (args.fechaFinal !== undefined && args.fechaFinal !== null) {
      this.fechaFinal = args.fechaFinal;
    }
    if (args.idProductora !== undefined && args.idProductora !== null) {
      this.idProductora = args.idProductora;
    }
    if (args.idSalaMapa !== undefined && args.idSalaMapa !== null) {
      this.idSalaMapa = args.idSalaMapa;
    }
    if (args.idTipoEvento !== undefined && args.idTipoEvento !== null) {
      this.idTipoEvento = args.idTipoEvento;
    }
    if (args.idTipoEspectaculo !== undefined && args.idTipoEspectaculo !== null) {
      this.idTipoEspectaculo = args.idTipoEspectaculo;
    }
    if (args.idCategoria !== undefined && args.idCategoria !== null) {
      this.idCategoria = args.idCategoria;
    }
    if (args.idClasificacion !== undefined && args.idClasificacion !== null) {
      this.idClasificacion = args.idClasificacion;
    }
    if (args.idProcedencia !== undefined && args.idProcedencia !== null) {
      this.idProcedencia = args.idProcedencia;
    }
    if (args.idTipoPrecio !== undefined && args.idTipoPrecio !== null) {
      this.idTipoPrecio = args.idTipoPrecio;
    }
    if (args.idFuncion !== undefined && args.idFuncion !== null) {
      this.idFuncion = args.idFuncion;
    }
    if (args.idPrecio !== undefined && args.idPrecio !== null) {
      this.idPrecio = args.idPrecio;
    }
    if (args.eventoDestacado !== undefined && args.eventoDestacado !== null) {
      this.eventoDestacado = args.eventoDestacado;
    }
    if (args.eventoOrden !== undefined && args.eventoOrden !== null) {
      this.eventoOrden = args.eventoOrden;
    }
    if (args.aforo !== undefined && args.aforo !== null) {
      this.aforo = args.aforo;
    }
    if (args.sinopsis !== undefined && args.sinopsis !== null) {
      this.sinopsis = args.sinopsis;
    }
    if (args.productora !== undefined && args.productora !== null) {
      this.productora = args.productora;
    }
    if (args.elenco !== undefined && args.elenco !== null) {
      this.elenco = args.elenco;
    }
    if (args.rutaImagen !== undefined && args.rutaImagen !== null) {
      this.rutaImagen = args.rutaImagen;
    }
    if (args.rutaVideo !== undefined && args.rutaVideo !== null) {
      this.rutaVideo = args.rutaVideo;
    }
    if (args.tipoEvento !== undefined && args.tipoEvento !== null) {
      this.tipoEvento = args.tipoEvento;
    }
    if (args.rutaFormulario !== undefined && args.rutaFormulario !== null) {
      this.rutaFormulario = args.rutaFormulario;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
  }
};
CRUDServer_insertEvento_args.prototype = {};
CRUDServer_insertEvento_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nombre = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.duracion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.fechaInicial = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.fechaFinal = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.idProductora = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.idSalaMapa = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.idTipoEvento = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.idTipoEspectaculo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.idCategoria = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.idClasificacion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.idProcedencia = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.idTipoPrecio = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.idFuncion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.idPrecio = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.eventoDestacado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.eventoOrden = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.aforo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.sinopsis = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRING) {
        this.productora = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.elenco = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.rutaImagen = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.rutaVideo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRING) {
        this.tipoEvento = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRING) {
        this.rutaFormulario = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertEvento_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertEvento_args');
  if (this.nombre !== null && this.nombre !== undefined) {
    output.writeFieldBegin('nombre', Thrift.Type.STRING, 1);
    output.writeString(this.nombre);
    output.writeFieldEnd();
  }
  if (this.duracion !== null && this.duracion !== undefined) {
    output.writeFieldBegin('duracion', Thrift.Type.STRING, 2);
    output.writeString(this.duracion);
    output.writeFieldEnd();
  }
  if (this.fechaInicial !== null && this.fechaInicial !== undefined) {
    output.writeFieldBegin('fechaInicial', Thrift.Type.STRING, 3);
    output.writeString(this.fechaInicial);
    output.writeFieldEnd();
  }
  if (this.fechaFinal !== null && this.fechaFinal !== undefined) {
    output.writeFieldBegin('fechaFinal', Thrift.Type.STRING, 4);
    output.writeString(this.fechaFinal);
    output.writeFieldEnd();
  }
  if (this.idProductora !== null && this.idProductora !== undefined) {
    output.writeFieldBegin('idProductora', Thrift.Type.STRING, 5);
    output.writeString(this.idProductora);
    output.writeFieldEnd();
  }
  if (this.idSalaMapa !== null && this.idSalaMapa !== undefined) {
    output.writeFieldBegin('idSalaMapa', Thrift.Type.STRING, 6);
    output.writeString(this.idSalaMapa);
    output.writeFieldEnd();
  }
  if (this.idTipoEvento !== null && this.idTipoEvento !== undefined) {
    output.writeFieldBegin('idTipoEvento', Thrift.Type.STRING, 7);
    output.writeString(this.idTipoEvento);
    output.writeFieldEnd();
  }
  if (this.idTipoEspectaculo !== null && this.idTipoEspectaculo !== undefined) {
    output.writeFieldBegin('idTipoEspectaculo', Thrift.Type.STRING, 8);
    output.writeString(this.idTipoEspectaculo);
    output.writeFieldEnd();
  }
  if (this.idCategoria !== null && this.idCategoria !== undefined) {
    output.writeFieldBegin('idCategoria', Thrift.Type.STRING, 9);
    output.writeString(this.idCategoria);
    output.writeFieldEnd();
  }
  if (this.idClasificacion !== null && this.idClasificacion !== undefined) {
    output.writeFieldBegin('idClasificacion', Thrift.Type.STRING, 10);
    output.writeString(this.idClasificacion);
    output.writeFieldEnd();
  }
  if (this.idProcedencia !== null && this.idProcedencia !== undefined) {
    output.writeFieldBegin('idProcedencia', Thrift.Type.STRING, 11);
    output.writeString(this.idProcedencia);
    output.writeFieldEnd();
  }
  if (this.idTipoPrecio !== null && this.idTipoPrecio !== undefined) {
    output.writeFieldBegin('idTipoPrecio', Thrift.Type.STRING, 12);
    output.writeString(this.idTipoPrecio);
    output.writeFieldEnd();
  }
  if (this.idFuncion !== null && this.idFuncion !== undefined) {
    output.writeFieldBegin('idFuncion', Thrift.Type.STRING, 13);
    output.writeString(this.idFuncion);
    output.writeFieldEnd();
  }
  if (this.idPrecio !== null && this.idPrecio !== undefined) {
    output.writeFieldBegin('idPrecio', Thrift.Type.STRING, 14);
    output.writeString(this.idPrecio);
    output.writeFieldEnd();
  }
  if (this.eventoDestacado !== null && this.eventoDestacado !== undefined) {
    output.writeFieldBegin('eventoDestacado', Thrift.Type.STRING, 15);
    output.writeString(this.eventoDestacado);
    output.writeFieldEnd();
  }
  if (this.eventoOrden !== null && this.eventoOrden !== undefined) {
    output.writeFieldBegin('eventoOrden', Thrift.Type.STRING, 16);
    output.writeString(this.eventoOrden);
    output.writeFieldEnd();
  }
  if (this.aforo !== null && this.aforo !== undefined) {
    output.writeFieldBegin('aforo', Thrift.Type.STRING, 17);
    output.writeString(this.aforo);
    output.writeFieldEnd();
  }
  if (this.sinopsis !== null && this.sinopsis !== undefined) {
    output.writeFieldBegin('sinopsis', Thrift.Type.STRING, 18);
    output.writeString(this.sinopsis);
    output.writeFieldEnd();
  }
  if (this.productora !== null && this.productora !== undefined) {
    output.writeFieldBegin('productora', Thrift.Type.STRING, 19);
    output.writeString(this.productora);
    output.writeFieldEnd();
  }
  if (this.elenco !== null && this.elenco !== undefined) {
    output.writeFieldBegin('elenco', Thrift.Type.STRING, 20);
    output.writeString(this.elenco);
    output.writeFieldEnd();
  }
  if (this.rutaImagen !== null && this.rutaImagen !== undefined) {
    output.writeFieldBegin('rutaImagen', Thrift.Type.STRING, 21);
    output.writeString(this.rutaImagen);
    output.writeFieldEnd();
  }
  if (this.rutaVideo !== null && this.rutaVideo !== undefined) {
    output.writeFieldBegin('rutaVideo', Thrift.Type.STRING, 22);
    output.writeString(this.rutaVideo);
    output.writeFieldEnd();
  }
  if (this.tipoEvento !== null && this.tipoEvento !== undefined) {
    output.writeFieldBegin('tipoEvento', Thrift.Type.STRING, 23);
    output.writeString(this.tipoEvento);
    output.writeFieldEnd();
  }
  if (this.rutaFormulario !== null && this.rutaFormulario !== undefined) {
    output.writeFieldBegin('rutaFormulario', Thrift.Type.STRING, 24);
    output.writeString(this.rutaFormulario);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 25);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertEvento_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_insertEvento_result.prototype = {};
CRUDServer_insertEvento_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertEvento_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertEvento_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getFuncion_args = function(args) {
  this.idFuncion = null;
  if (args) {
    if (args.idFuncion !== undefined && args.idFuncion !== null) {
      this.idFuncion = args.idFuncion;
    }
  }
};
CRUDServer_getFuncion_args.prototype = {};
CRUDServer_getFuncion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.idFuncion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getFuncion_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getFuncion_args');
  if (this.idFuncion !== null && this.idFuncion !== undefined) {
    output.writeFieldBegin('idFuncion', Thrift.Type.STRING, 1);
    output.writeString(this.idFuncion);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getFuncion_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getFuncion_result.prototype = {};
CRUDServer_getFuncion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getFuncion_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getFuncion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllFuncion_args = function(args) {
};
CRUDServer_getAllFuncion_args.prototype = {};
CRUDServer_getAllFuncion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllFuncion_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllFuncion_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllFuncion_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getAllFuncion_result.prototype = {};
CRUDServer_getAllFuncion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllFuncion_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllFuncion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateFuncion_args = function(args) {
  this.fecha = null;
  this.hora = null;
  this.preventa = null;
  this.estreno = null;
  this.estado = null;
  this.idFuncion = null;
  if (args) {
    if (args.fecha !== undefined && args.fecha !== null) {
      this.fecha = args.fecha;
    }
    if (args.hora !== undefined && args.hora !== null) {
      this.hora = args.hora;
    }
    if (args.preventa !== undefined && args.preventa !== null) {
      this.preventa = args.preventa;
    }
    if (args.estreno !== undefined && args.estreno !== null) {
      this.estreno = args.estreno;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
    if (args.idFuncion !== undefined && args.idFuncion !== null) {
      this.idFuncion = args.idFuncion;
    }
  }
};
CRUDServer_updateFuncion_args.prototype = {};
CRUDServer_updateFuncion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fecha = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.hora = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.preventa = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.estreno = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.idFuncion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateFuncion_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateFuncion_args');
  if (this.fecha !== null && this.fecha !== undefined) {
    output.writeFieldBegin('fecha', Thrift.Type.STRING, 1);
    output.writeString(this.fecha);
    output.writeFieldEnd();
  }
  if (this.hora !== null && this.hora !== undefined) {
    output.writeFieldBegin('hora', Thrift.Type.STRING, 2);
    output.writeString(this.hora);
    output.writeFieldEnd();
  }
  if (this.preventa !== null && this.preventa !== undefined) {
    output.writeFieldBegin('preventa', Thrift.Type.STRING, 3);
    output.writeString(this.preventa);
    output.writeFieldEnd();
  }
  if (this.estreno !== null && this.estreno !== undefined) {
    output.writeFieldBegin('estreno', Thrift.Type.STRING, 4);
    output.writeString(this.estreno);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 5);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  if (this.idFuncion !== null && this.idFuncion !== undefined) {
    output.writeFieldBegin('idFuncion', Thrift.Type.STRING, 6);
    output.writeString(this.idFuncion);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateFuncion_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_updateFuncion_result.prototype = {};
CRUDServer_updateFuncion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateFuncion_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateFuncion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertFuncion_args = function(args) {
  this.fecha = null;
  this.hora = null;
  this.preventa = null;
  this.estreno = null;
  this.estado = null;
  if (args) {
    if (args.fecha !== undefined && args.fecha !== null) {
      this.fecha = args.fecha;
    }
    if (args.hora !== undefined && args.hora !== null) {
      this.hora = args.hora;
    }
    if (args.preventa !== undefined && args.preventa !== null) {
      this.preventa = args.preventa;
    }
    if (args.estreno !== undefined && args.estreno !== null) {
      this.estreno = args.estreno;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
  }
};
CRUDServer_insertFuncion_args.prototype = {};
CRUDServer_insertFuncion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fecha = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.hora = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.preventa = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.estreno = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertFuncion_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertFuncion_args');
  if (this.fecha !== null && this.fecha !== undefined) {
    output.writeFieldBegin('fecha', Thrift.Type.STRING, 1);
    output.writeString(this.fecha);
    output.writeFieldEnd();
  }
  if (this.hora !== null && this.hora !== undefined) {
    output.writeFieldBegin('hora', Thrift.Type.STRING, 2);
    output.writeString(this.hora);
    output.writeFieldEnd();
  }
  if (this.preventa !== null && this.preventa !== undefined) {
    output.writeFieldBegin('preventa', Thrift.Type.STRING, 3);
    output.writeString(this.preventa);
    output.writeFieldEnd();
  }
  if (this.estreno !== null && this.estreno !== undefined) {
    output.writeFieldBegin('estreno', Thrift.Type.STRING, 4);
    output.writeString(this.estreno);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 5);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertFuncion_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_insertFuncion_result.prototype = {};
CRUDServer_insertFuncion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertFuncion_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertFuncion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getMapa_args = function(args) {
  this.idMapa = null;
  if (args) {
    if (args.idMapa !== undefined && args.idMapa !== null) {
      this.idMapa = args.idMapa;
    }
  }
};
CRUDServer_getMapa_args.prototype = {};
CRUDServer_getMapa_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.idMapa = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getMapa_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getMapa_args');
  if (this.idMapa !== null && this.idMapa !== undefined) {
    output.writeFieldBegin('idMapa', Thrift.Type.STRING, 1);
    output.writeString(this.idMapa);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getMapa_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getMapa_result.prototype = {};
CRUDServer_getMapa_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getMapa_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getMapa_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllMapa_args = function(args) {
};
CRUDServer_getAllMapa_args.prototype = {};
CRUDServer_getAllMapa_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllMapa_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllMapa_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllMapa_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getAllMapa_result.prototype = {};
CRUDServer_getAllMapa_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllMapa_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllMapa_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateMapa_args = function(args) {
  this.nombre = null;
  this.distribucion = null;
  this.rutaImagen = null;
  this.estado = null;
  this.idMapa = null;
  if (args) {
    if (args.nombre !== undefined && args.nombre !== null) {
      this.nombre = args.nombre;
    }
    if (args.distribucion !== undefined && args.distribucion !== null) {
      this.distribucion = args.distribucion;
    }
    if (args.rutaImagen !== undefined && args.rutaImagen !== null) {
      this.rutaImagen = args.rutaImagen;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
    if (args.idMapa !== undefined && args.idMapa !== null) {
      this.idMapa = args.idMapa;
    }
  }
};
CRUDServer_updateMapa_args.prototype = {};
CRUDServer_updateMapa_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nombre = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.distribucion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.rutaImagen = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.idMapa = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateMapa_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateMapa_args');
  if (this.nombre !== null && this.nombre !== undefined) {
    output.writeFieldBegin('nombre', Thrift.Type.STRING, 1);
    output.writeString(this.nombre);
    output.writeFieldEnd();
  }
  if (this.distribucion !== null && this.distribucion !== undefined) {
    output.writeFieldBegin('distribucion', Thrift.Type.STRING, 2);
    output.writeString(this.distribucion);
    output.writeFieldEnd();
  }
  if (this.rutaImagen !== null && this.rutaImagen !== undefined) {
    output.writeFieldBegin('rutaImagen', Thrift.Type.STRING, 3);
    output.writeString(this.rutaImagen);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 4);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  if (this.idMapa !== null && this.idMapa !== undefined) {
    output.writeFieldBegin('idMapa', Thrift.Type.STRING, 5);
    output.writeString(this.idMapa);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateMapa_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_updateMapa_result.prototype = {};
CRUDServer_updateMapa_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateMapa_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateMapa_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertMapa_args = function(args) {
  this.nombre = null;
  this.distribucion = null;
  this.rutaImagen = null;
  this.estado = null;
  if (args) {
    if (args.nombre !== undefined && args.nombre !== null) {
      this.nombre = args.nombre;
    }
    if (args.distribucion !== undefined && args.distribucion !== null) {
      this.distribucion = args.distribucion;
    }
    if (args.rutaImagen !== undefined && args.rutaImagen !== null) {
      this.rutaImagen = args.rutaImagen;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
  }
};
CRUDServer_insertMapa_args.prototype = {};
CRUDServer_insertMapa_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nombre = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.distribucion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.rutaImagen = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertMapa_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertMapa_args');
  if (this.nombre !== null && this.nombre !== undefined) {
    output.writeFieldBegin('nombre', Thrift.Type.STRING, 1);
    output.writeString(this.nombre);
    output.writeFieldEnd();
  }
  if (this.distribucion !== null && this.distribucion !== undefined) {
    output.writeFieldBegin('distribucion', Thrift.Type.STRING, 2);
    output.writeString(this.distribucion);
    output.writeFieldEnd();
  }
  if (this.rutaImagen !== null && this.rutaImagen !== undefined) {
    output.writeFieldBegin('rutaImagen', Thrift.Type.STRING, 3);
    output.writeString(this.rutaImagen);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 4);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertMapa_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_insertMapa_result.prototype = {};
CRUDServer_insertMapa_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertMapa_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertMapa_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getPerfil_args = function(args) {
  this.idPerfil = null;
  if (args) {
    if (args.idPerfil !== undefined && args.idPerfil !== null) {
      this.idPerfil = args.idPerfil;
    }
  }
};
CRUDServer_getPerfil_args.prototype = {};
CRUDServer_getPerfil_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.idPerfil = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getPerfil_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getPerfil_args');
  if (this.idPerfil !== null && this.idPerfil !== undefined) {
    output.writeFieldBegin('idPerfil', Thrift.Type.STRING, 1);
    output.writeString(this.idPerfil);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getPerfil_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getPerfil_result.prototype = {};
CRUDServer_getPerfil_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getPerfil_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getPerfil_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllPerfil_args = function(args) {
};
CRUDServer_getAllPerfil_args.prototype = {};
CRUDServer_getAllPerfil_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllPerfil_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllPerfil_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllPerfil_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getAllPerfil_result.prototype = {};
CRUDServer_getAllPerfil_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllPerfil_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllPerfil_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updatePerfil_args = function(args) {
  this.descripcion = null;
  this.tipo = null;
  this.estado = null;
  this.idPerfil = null;
  if (args) {
    if (args.descripcion !== undefined && args.descripcion !== null) {
      this.descripcion = args.descripcion;
    }
    if (args.tipo !== undefined && args.tipo !== null) {
      this.tipo = args.tipo;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
    if (args.idPerfil !== undefined && args.idPerfil !== null) {
      this.idPerfil = args.idPerfil;
    }
  }
};
CRUDServer_updatePerfil_args.prototype = {};
CRUDServer_updatePerfil_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.descripcion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tipo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.idPerfil = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updatePerfil_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updatePerfil_args');
  if (this.descripcion !== null && this.descripcion !== undefined) {
    output.writeFieldBegin('descripcion', Thrift.Type.STRING, 1);
    output.writeString(this.descripcion);
    output.writeFieldEnd();
  }
  if (this.tipo !== null && this.tipo !== undefined) {
    output.writeFieldBegin('tipo', Thrift.Type.STRING, 2);
    output.writeString(this.tipo);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 3);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  if (this.idPerfil !== null && this.idPerfil !== undefined) {
    output.writeFieldBegin('idPerfil', Thrift.Type.STRING, 4);
    output.writeString(this.idPerfil);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updatePerfil_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_updatePerfil_result.prototype = {};
CRUDServer_updatePerfil_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updatePerfil_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updatePerfil_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertPerfil_args = function(args) {
  this.descripcion = null;
  this.tipo = null;
  this.estado = null;
  if (args) {
    if (args.descripcion !== undefined && args.descripcion !== null) {
      this.descripcion = args.descripcion;
    }
    if (args.tipo !== undefined && args.tipo !== null) {
      this.tipo = args.tipo;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
  }
};
CRUDServer_insertPerfil_args.prototype = {};
CRUDServer_insertPerfil_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.descripcion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tipo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertPerfil_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertPerfil_args');
  if (this.descripcion !== null && this.descripcion !== undefined) {
    output.writeFieldBegin('descripcion', Thrift.Type.STRING, 1);
    output.writeString(this.descripcion);
    output.writeFieldEnd();
  }
  if (this.tipo !== null && this.tipo !== undefined) {
    output.writeFieldBegin('tipo', Thrift.Type.STRING, 2);
    output.writeString(this.tipo);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 3);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertPerfil_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_insertPerfil_result.prototype = {};
CRUDServer_insertPerfil_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertPerfil_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertPerfil_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getPerfilRol_args = function(args) {
  this.idPerfilRol = null;
  if (args) {
    if (args.idPerfilRol !== undefined && args.idPerfilRol !== null) {
      this.idPerfilRol = args.idPerfilRol;
    }
  }
};
CRUDServer_getPerfilRol_args.prototype = {};
CRUDServer_getPerfilRol_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.idPerfilRol = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getPerfilRol_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getPerfilRol_args');
  if (this.idPerfilRol !== null && this.idPerfilRol !== undefined) {
    output.writeFieldBegin('idPerfilRol', Thrift.Type.STRING, 1);
    output.writeString(this.idPerfilRol);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getPerfilRol_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getPerfilRol_result.prototype = {};
CRUDServer_getPerfilRol_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getPerfilRol_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getPerfilRol_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllPerfilRol_args = function(args) {
};
CRUDServer_getAllPerfilRol_args.prototype = {};
CRUDServer_getAllPerfilRol_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllPerfilRol_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllPerfilRol_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllPerfilRol_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getAllPerfilRol_result.prototype = {};
CRUDServer_getAllPerfilRol_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllPerfilRol_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllPerfilRol_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updatePerfilRol_args = function(args) {
  this.idPerfil = null;
  this.idRol = null;
  this.estado = null;
  this.idPerfilRol = null;
  if (args) {
    if (args.idPerfil !== undefined && args.idPerfil !== null) {
      this.idPerfil = args.idPerfil;
    }
    if (args.idRol !== undefined && args.idRol !== null) {
      this.idRol = args.idRol;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
    if (args.idPerfilRol !== undefined && args.idPerfilRol !== null) {
      this.idPerfilRol = args.idPerfilRol;
    }
  }
};
CRUDServer_updatePerfilRol_args.prototype = {};
CRUDServer_updatePerfilRol_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.idPerfil = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.idRol = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.idPerfilRol = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updatePerfilRol_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updatePerfilRol_args');
  if (this.idPerfil !== null && this.idPerfil !== undefined) {
    output.writeFieldBegin('idPerfil', Thrift.Type.STRING, 1);
    output.writeString(this.idPerfil);
    output.writeFieldEnd();
  }
  if (this.idRol !== null && this.idRol !== undefined) {
    output.writeFieldBegin('idRol', Thrift.Type.STRING, 2);
    output.writeString(this.idRol);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 3);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  if (this.idPerfilRol !== null && this.idPerfilRol !== undefined) {
    output.writeFieldBegin('idPerfilRol', Thrift.Type.STRING, 4);
    output.writeString(this.idPerfilRol);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updatePerfilRol_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_updatePerfilRol_result.prototype = {};
CRUDServer_updatePerfilRol_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updatePerfilRol_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updatePerfilRol_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertPerfilRol_args = function(args) {
  this.idPerfil = null;
  this.idRol = null;
  this.estado = null;
  if (args) {
    if (args.idPerfil !== undefined && args.idPerfil !== null) {
      this.idPerfil = args.idPerfil;
    }
    if (args.idRol !== undefined && args.idRol !== null) {
      this.idRol = args.idRol;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
  }
};
CRUDServer_insertPerfilRol_args.prototype = {};
CRUDServer_insertPerfilRol_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.idPerfil = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.idRol = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertPerfilRol_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertPerfilRol_args');
  if (this.idPerfil !== null && this.idPerfil !== undefined) {
    output.writeFieldBegin('idPerfil', Thrift.Type.STRING, 1);
    output.writeString(this.idPerfil);
    output.writeFieldEnd();
  }
  if (this.idRol !== null && this.idRol !== undefined) {
    output.writeFieldBegin('idRol', Thrift.Type.STRING, 2);
    output.writeString(this.idRol);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 3);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertPerfilRol_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_insertPerfilRol_result.prototype = {};
CRUDServer_insertPerfilRol_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertPerfilRol_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertPerfilRol_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getPlatea_args = function(args) {
  this.idPlatea = null;
  if (args) {
    if (args.idPlatea !== undefined && args.idPlatea !== null) {
      this.idPlatea = args.idPlatea;
    }
  }
};
CRUDServer_getPlatea_args.prototype = {};
CRUDServer_getPlatea_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.idPlatea = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getPlatea_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getPlatea_args');
  if (this.idPlatea !== null && this.idPlatea !== undefined) {
    output.writeFieldBegin('idPlatea', Thrift.Type.STRING, 1);
    output.writeString(this.idPlatea);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getPlatea_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getPlatea_result.prototype = {};
CRUDServer_getPlatea_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getPlatea_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getPlatea_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllPlatea_args = function(args) {
};
CRUDServer_getAllPlatea_args.prototype = {};
CRUDServer_getAllPlatea_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllPlatea_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllPlatea_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllPlatea_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getAllPlatea_result.prototype = {};
CRUDServer_getAllPlatea_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllPlatea_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllPlatea_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updatePlatea_args = function(args) {
  this.nombre = null;
  this.costo = null;
  this.estado = null;
  this.idPlatea = null;
  if (args) {
    if (args.nombre !== undefined && args.nombre !== null) {
      this.nombre = args.nombre;
    }
    if (args.costo !== undefined && args.costo !== null) {
      this.costo = args.costo;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
    if (args.idPlatea !== undefined && args.idPlatea !== null) {
      this.idPlatea = args.idPlatea;
    }
  }
};
CRUDServer_updatePlatea_args.prototype = {};
CRUDServer_updatePlatea_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nombre = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.costo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.idPlatea = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updatePlatea_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updatePlatea_args');
  if (this.nombre !== null && this.nombre !== undefined) {
    output.writeFieldBegin('nombre', Thrift.Type.STRING, 1);
    output.writeString(this.nombre);
    output.writeFieldEnd();
  }
  if (this.costo !== null && this.costo !== undefined) {
    output.writeFieldBegin('costo', Thrift.Type.STRING, 2);
    output.writeString(this.costo);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 3);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  if (this.idPlatea !== null && this.idPlatea !== undefined) {
    output.writeFieldBegin('idPlatea', Thrift.Type.STRING, 4);
    output.writeString(this.idPlatea);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updatePlatea_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_updatePlatea_result.prototype = {};
CRUDServer_updatePlatea_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updatePlatea_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updatePlatea_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertPlatea_args = function(args) {
  this.nombre = null;
  this.costo = null;
  this.estado = null;
  if (args) {
    if (args.nombre !== undefined && args.nombre !== null) {
      this.nombre = args.nombre;
    }
    if (args.costo !== undefined && args.costo !== null) {
      this.costo = args.costo;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
  }
};
CRUDServer_insertPlatea_args.prototype = {};
CRUDServer_insertPlatea_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nombre = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.costo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertPlatea_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertPlatea_args');
  if (this.nombre !== null && this.nombre !== undefined) {
    output.writeFieldBegin('nombre', Thrift.Type.STRING, 1);
    output.writeString(this.nombre);
    output.writeFieldEnd();
  }
  if (this.costo !== null && this.costo !== undefined) {
    output.writeFieldBegin('costo', Thrift.Type.STRING, 2);
    output.writeString(this.costo);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 3);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertPlatea_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_insertPlatea_result.prototype = {};
CRUDServer_insertPlatea_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertPlatea_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertPlatea_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getPrecio_args = function(args) {
  this.idPrecio = null;
  if (args) {
    if (args.idPrecio !== undefined && args.idPrecio !== null) {
      this.idPrecio = args.idPrecio;
    }
  }
};
CRUDServer_getPrecio_args.prototype = {};
CRUDServer_getPrecio_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.idPrecio = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getPrecio_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getPrecio_args');
  if (this.idPrecio !== null && this.idPrecio !== undefined) {
    output.writeFieldBegin('idPrecio', Thrift.Type.STRING, 1);
    output.writeString(this.idPrecio);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getPrecio_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getPrecio_result.prototype = {};
CRUDServer_getPrecio_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getPrecio_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getPrecio_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllPrecio_args = function(args) {
};
CRUDServer_getAllPrecio_args.prototype = {};
CRUDServer_getAllPrecio_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllPrecio_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllPrecio_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllPrecio_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getAllPrecio_result.prototype = {};
CRUDServer_getAllPrecio_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllPrecio_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllPrecio_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updatePrecio_args = function(args) {
  this.nombre = null;
  this.precio = null;
  this.preestreno = null;
  this.estreno = null;
  this.aforoInicial = null;
  this.ventaPlatea = null;
  this.estado = null;
  this.idPrecio = null;
  if (args) {
    if (args.nombre !== undefined && args.nombre !== null) {
      this.nombre = args.nombre;
    }
    if (args.precio !== undefined && args.precio !== null) {
      this.precio = args.precio;
    }
    if (args.preestreno !== undefined && args.preestreno !== null) {
      this.preestreno = args.preestreno;
    }
    if (args.estreno !== undefined && args.estreno !== null) {
      this.estreno = args.estreno;
    }
    if (args.aforoInicial !== undefined && args.aforoInicial !== null) {
      this.aforoInicial = args.aforoInicial;
    }
    if (args.ventaPlatea !== undefined && args.ventaPlatea !== null) {
      this.ventaPlatea = args.ventaPlatea;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
    if (args.idPrecio !== undefined && args.idPrecio !== null) {
      this.idPrecio = args.idPrecio;
    }
  }
};
CRUDServer_updatePrecio_args.prototype = {};
CRUDServer_updatePrecio_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nombre = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.precio = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.preestreno = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.estreno = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.aforoInicial = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.ventaPlatea = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.idPrecio = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updatePrecio_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updatePrecio_args');
  if (this.nombre !== null && this.nombre !== undefined) {
    output.writeFieldBegin('nombre', Thrift.Type.STRING, 1);
    output.writeString(this.nombre);
    output.writeFieldEnd();
  }
  if (this.precio !== null && this.precio !== undefined) {
    output.writeFieldBegin('precio', Thrift.Type.STRING, 2);
    output.writeString(this.precio);
    output.writeFieldEnd();
  }
  if (this.preestreno !== null && this.preestreno !== undefined) {
    output.writeFieldBegin('preestreno', Thrift.Type.STRING, 3);
    output.writeString(this.preestreno);
    output.writeFieldEnd();
  }
  if (this.estreno !== null && this.estreno !== undefined) {
    output.writeFieldBegin('estreno', Thrift.Type.STRING, 4);
    output.writeString(this.estreno);
    output.writeFieldEnd();
  }
  if (this.aforoInicial !== null && this.aforoInicial !== undefined) {
    output.writeFieldBegin('aforoInicial', Thrift.Type.STRING, 5);
    output.writeString(this.aforoInicial);
    output.writeFieldEnd();
  }
  if (this.ventaPlatea !== null && this.ventaPlatea !== undefined) {
    output.writeFieldBegin('ventaPlatea', Thrift.Type.STRING, 6);
    output.writeString(this.ventaPlatea);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 7);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  if (this.idPrecio !== null && this.idPrecio !== undefined) {
    output.writeFieldBegin('idPrecio', Thrift.Type.STRING, 8);
    output.writeString(this.idPrecio);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updatePrecio_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_updatePrecio_result.prototype = {};
CRUDServer_updatePrecio_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updatePrecio_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updatePrecio_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertPrecio_args = function(args) {
  this.nombre = null;
  this.precio = null;
  this.preestreno = null;
  this.estreno = null;
  this.aforoInicial = null;
  this.ventaPlatea = null;
  this.estado = null;
  if (args) {
    if (args.nombre !== undefined && args.nombre !== null) {
      this.nombre = args.nombre;
    }
    if (args.precio !== undefined && args.precio !== null) {
      this.precio = args.precio;
    }
    if (args.preestreno !== undefined && args.preestreno !== null) {
      this.preestreno = args.preestreno;
    }
    if (args.estreno !== undefined && args.estreno !== null) {
      this.estreno = args.estreno;
    }
    if (args.aforoInicial !== undefined && args.aforoInicial !== null) {
      this.aforoInicial = args.aforoInicial;
    }
    if (args.ventaPlatea !== undefined && args.ventaPlatea !== null) {
      this.ventaPlatea = args.ventaPlatea;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
  }
};
CRUDServer_insertPrecio_args.prototype = {};
CRUDServer_insertPrecio_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nombre = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.precio = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.preestreno = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.estreno = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.aforoInicial = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.ventaPlatea = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertPrecio_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertPrecio_args');
  if (this.nombre !== null && this.nombre !== undefined) {
    output.writeFieldBegin('nombre', Thrift.Type.STRING, 1);
    output.writeString(this.nombre);
    output.writeFieldEnd();
  }
  if (this.precio !== null && this.precio !== undefined) {
    output.writeFieldBegin('precio', Thrift.Type.STRING, 2);
    output.writeString(this.precio);
    output.writeFieldEnd();
  }
  if (this.preestreno !== null && this.preestreno !== undefined) {
    output.writeFieldBegin('preestreno', Thrift.Type.STRING, 3);
    output.writeString(this.preestreno);
    output.writeFieldEnd();
  }
  if (this.estreno !== null && this.estreno !== undefined) {
    output.writeFieldBegin('estreno', Thrift.Type.STRING, 4);
    output.writeString(this.estreno);
    output.writeFieldEnd();
  }
  if (this.aforoInicial !== null && this.aforoInicial !== undefined) {
    output.writeFieldBegin('aforoInicial', Thrift.Type.STRING, 5);
    output.writeString(this.aforoInicial);
    output.writeFieldEnd();
  }
  if (this.ventaPlatea !== null && this.ventaPlatea !== undefined) {
    output.writeFieldBegin('ventaPlatea', Thrift.Type.STRING, 6);
    output.writeString(this.ventaPlatea);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 7);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertPrecio_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_insertPrecio_result.prototype = {};
CRUDServer_insertPrecio_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertPrecio_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertPrecio_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getProcedencia_args = function(args) {
  this.idProcedencia = null;
  if (args) {
    if (args.idProcedencia !== undefined && args.idProcedencia !== null) {
      this.idProcedencia = args.idProcedencia;
    }
  }
};
CRUDServer_getProcedencia_args.prototype = {};
CRUDServer_getProcedencia_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.idProcedencia = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getProcedencia_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getProcedencia_args');
  if (this.idProcedencia !== null && this.idProcedencia !== undefined) {
    output.writeFieldBegin('idProcedencia', Thrift.Type.STRING, 1);
    output.writeString(this.idProcedencia);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getProcedencia_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getProcedencia_result.prototype = {};
CRUDServer_getProcedencia_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getProcedencia_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getProcedencia_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllProcedencia_args = function(args) {
};
CRUDServer_getAllProcedencia_args.prototype = {};
CRUDServer_getAllProcedencia_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllProcedencia_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllProcedencia_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllProcedencia_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getAllProcedencia_result.prototype = {};
CRUDServer_getAllProcedencia_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllProcedencia_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllProcedencia_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateProcedencia_args = function(args) {
  this.nombre = null;
  this.descripcion = null;
  this.estado = null;
  this.idProcedencia = null;
  if (args) {
    if (args.nombre !== undefined && args.nombre !== null) {
      this.nombre = args.nombre;
    }
    if (args.descripcion !== undefined && args.descripcion !== null) {
      this.descripcion = args.descripcion;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
    if (args.idProcedencia !== undefined && args.idProcedencia !== null) {
      this.idProcedencia = args.idProcedencia;
    }
  }
};
CRUDServer_updateProcedencia_args.prototype = {};
CRUDServer_updateProcedencia_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nombre = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.descripcion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.idProcedencia = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateProcedencia_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateProcedencia_args');
  if (this.nombre !== null && this.nombre !== undefined) {
    output.writeFieldBegin('nombre', Thrift.Type.STRING, 1);
    output.writeString(this.nombre);
    output.writeFieldEnd();
  }
  if (this.descripcion !== null && this.descripcion !== undefined) {
    output.writeFieldBegin('descripcion', Thrift.Type.STRING, 2);
    output.writeString(this.descripcion);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 3);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  if (this.idProcedencia !== null && this.idProcedencia !== undefined) {
    output.writeFieldBegin('idProcedencia', Thrift.Type.STRING, 4);
    output.writeString(this.idProcedencia);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateProcedencia_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_updateProcedencia_result.prototype = {};
CRUDServer_updateProcedencia_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateProcedencia_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateProcedencia_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertProcedencia_args = function(args) {
  this.nombre = null;
  this.descripcion = null;
  this.estado = null;
  if (args) {
    if (args.nombre !== undefined && args.nombre !== null) {
      this.nombre = args.nombre;
    }
    if (args.descripcion !== undefined && args.descripcion !== null) {
      this.descripcion = args.descripcion;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
  }
};
CRUDServer_insertProcedencia_args.prototype = {};
CRUDServer_insertProcedencia_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nombre = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.descripcion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertProcedencia_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertProcedencia_args');
  if (this.nombre !== null && this.nombre !== undefined) {
    output.writeFieldBegin('nombre', Thrift.Type.STRING, 1);
    output.writeString(this.nombre);
    output.writeFieldEnd();
  }
  if (this.descripcion !== null && this.descripcion !== undefined) {
    output.writeFieldBegin('descripcion', Thrift.Type.STRING, 2);
    output.writeString(this.descripcion);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 3);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertProcedencia_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_insertProcedencia_result.prototype = {};
CRUDServer_insertProcedencia_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertProcedencia_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertProcedencia_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getProductora_args = function(args) {
  this.idProductora = null;
  if (args) {
    if (args.idProductora !== undefined && args.idProductora !== null) {
      this.idProductora = args.idProductora;
    }
  }
};
CRUDServer_getProductora_args.prototype = {};
CRUDServer_getProductora_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.idProductora = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getProductora_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getProductora_args');
  if (this.idProductora !== null && this.idProductora !== undefined) {
    output.writeFieldBegin('idProductora', Thrift.Type.STRING, 1);
    output.writeString(this.idProductora);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getProductora_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getProductora_result.prototype = {};
CRUDServer_getProductora_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getProductora_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getProductora_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllProductora_args = function(args) {
};
CRUDServer_getAllProductora_args.prototype = {};
CRUDServer_getAllProductora_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllProductora_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllProductora_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllProductora_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getAllProductora_result.prototype = {};
CRUDServer_getAllProductora_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllProductora_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllProductora_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateProductora_args = function(args) {
  this.nombre = null;
  this.descripcion = null;
  this.estado = null;
  this.idProductora = null;
  if (args) {
    if (args.nombre !== undefined && args.nombre !== null) {
      this.nombre = args.nombre;
    }
    if (args.descripcion !== undefined && args.descripcion !== null) {
      this.descripcion = args.descripcion;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
    if (args.idProductora !== undefined && args.idProductora !== null) {
      this.idProductora = args.idProductora;
    }
  }
};
CRUDServer_updateProductora_args.prototype = {};
CRUDServer_updateProductora_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nombre = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.descripcion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.idProductora = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateProductora_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateProductora_args');
  if (this.nombre !== null && this.nombre !== undefined) {
    output.writeFieldBegin('nombre', Thrift.Type.STRING, 1);
    output.writeString(this.nombre);
    output.writeFieldEnd();
  }
  if (this.descripcion !== null && this.descripcion !== undefined) {
    output.writeFieldBegin('descripcion', Thrift.Type.STRING, 2);
    output.writeString(this.descripcion);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 3);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  if (this.idProductora !== null && this.idProductora !== undefined) {
    output.writeFieldBegin('idProductora', Thrift.Type.STRING, 4);
    output.writeString(this.idProductora);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateProductora_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_updateProductora_result.prototype = {};
CRUDServer_updateProductora_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateProductora_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateProductora_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertProductora_args = function(args) {
  this.nombre = null;
  this.descripcion = null;
  this.estado = null;
  if (args) {
    if (args.nombre !== undefined && args.nombre !== null) {
      this.nombre = args.nombre;
    }
    if (args.descripcion !== undefined && args.descripcion !== null) {
      this.descripcion = args.descripcion;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
  }
};
CRUDServer_insertProductora_args.prototype = {};
CRUDServer_insertProductora_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nombre = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.descripcion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertProductora_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertProductora_args');
  if (this.nombre !== null && this.nombre !== undefined) {
    output.writeFieldBegin('nombre', Thrift.Type.STRING, 1);
    output.writeString(this.nombre);
    output.writeFieldEnd();
  }
  if (this.descripcion !== null && this.descripcion !== undefined) {
    output.writeFieldBegin('descripcion', Thrift.Type.STRING, 2);
    output.writeString(this.descripcion);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 3);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertProductora_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_insertProductora_result.prototype = {};
CRUDServer_insertProductora_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertProductora_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertProductora_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getPromocion_args = function(args) {
  this.idPromocion = null;
  if (args) {
    if (args.idPromocion !== undefined && args.idPromocion !== null) {
      this.idPromocion = args.idPromocion;
    }
  }
};
CRUDServer_getPromocion_args.prototype = {};
CRUDServer_getPromocion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.idPromocion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getPromocion_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getPromocion_args');
  if (this.idPromocion !== null && this.idPromocion !== undefined) {
    output.writeFieldBegin('idPromocion', Thrift.Type.STRING, 1);
    output.writeString(this.idPromocion);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getPromocion_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getPromocion_result.prototype = {};
CRUDServer_getPromocion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getPromocion_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getPromocion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllPromocion_args = function(args) {
};
CRUDServer_getAllPromocion_args.prototype = {};
CRUDServer_getAllPromocion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllPromocion_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllPromocion_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllPromocion_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getAllPromocion_result.prototype = {};
CRUDServer_getAllPromocion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllPromocion_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllPromocion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updatePromocion_args = function(args) {
  this.nombre = null;
  this.descripcion = null;
  this.amigoTeatro = null;
  this.idEvento = null;
  this.idPlatea = null;
  this.tipoAcceso = null;
  this.idTipoPromocion = null;
  this.fechaInicio = null;
  this.fechaFin = null;
  this.estado = null;
  this.idPromocion = null;
  if (args) {
    if (args.nombre !== undefined && args.nombre !== null) {
      this.nombre = args.nombre;
    }
    if (args.descripcion !== undefined && args.descripcion !== null) {
      this.descripcion = args.descripcion;
    }
    if (args.amigoTeatro !== undefined && args.amigoTeatro !== null) {
      this.amigoTeatro = args.amigoTeatro;
    }
    if (args.idEvento !== undefined && args.idEvento !== null) {
      this.idEvento = args.idEvento;
    }
    if (args.idPlatea !== undefined && args.idPlatea !== null) {
      this.idPlatea = args.idPlatea;
    }
    if (args.tipoAcceso !== undefined && args.tipoAcceso !== null) {
      this.tipoAcceso = args.tipoAcceso;
    }
    if (args.idTipoPromocion !== undefined && args.idTipoPromocion !== null) {
      this.idTipoPromocion = args.idTipoPromocion;
    }
    if (args.fechaInicio !== undefined && args.fechaInicio !== null) {
      this.fechaInicio = args.fechaInicio;
    }
    if (args.fechaFin !== undefined && args.fechaFin !== null) {
      this.fechaFin = args.fechaFin;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
    if (args.idPromocion !== undefined && args.idPromocion !== null) {
      this.idPromocion = args.idPromocion;
    }
  }
};
CRUDServer_updatePromocion_args.prototype = {};
CRUDServer_updatePromocion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nombre = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.descripcion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.amigoTeatro = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.idEvento = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.idPlatea = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.tipoAcceso = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.idTipoPromocion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.fechaInicio = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.fechaFin = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.idPromocion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updatePromocion_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updatePromocion_args');
  if (this.nombre !== null && this.nombre !== undefined) {
    output.writeFieldBegin('nombre', Thrift.Type.STRING, 1);
    output.writeString(this.nombre);
    output.writeFieldEnd();
  }
  if (this.descripcion !== null && this.descripcion !== undefined) {
    output.writeFieldBegin('descripcion', Thrift.Type.STRING, 2);
    output.writeString(this.descripcion);
    output.writeFieldEnd();
  }
  if (this.amigoTeatro !== null && this.amigoTeatro !== undefined) {
    output.writeFieldBegin('amigoTeatro', Thrift.Type.STRING, 3);
    output.writeString(this.amigoTeatro);
    output.writeFieldEnd();
  }
  if (this.idEvento !== null && this.idEvento !== undefined) {
    output.writeFieldBegin('idEvento', Thrift.Type.STRING, 4);
    output.writeString(this.idEvento);
    output.writeFieldEnd();
  }
  if (this.idPlatea !== null && this.idPlatea !== undefined) {
    output.writeFieldBegin('idPlatea', Thrift.Type.STRING, 5);
    output.writeString(this.idPlatea);
    output.writeFieldEnd();
  }
  if (this.tipoAcceso !== null && this.tipoAcceso !== undefined) {
    output.writeFieldBegin('tipoAcceso', Thrift.Type.STRING, 6);
    output.writeString(this.tipoAcceso);
    output.writeFieldEnd();
  }
  if (this.idTipoPromocion !== null && this.idTipoPromocion !== undefined) {
    output.writeFieldBegin('idTipoPromocion', Thrift.Type.STRING, 7);
    output.writeString(this.idTipoPromocion);
    output.writeFieldEnd();
  }
  if (this.fechaInicio !== null && this.fechaInicio !== undefined) {
    output.writeFieldBegin('fechaInicio', Thrift.Type.STRING, 8);
    output.writeString(this.fechaInicio);
    output.writeFieldEnd();
  }
  if (this.fechaFin !== null && this.fechaFin !== undefined) {
    output.writeFieldBegin('fechaFin', Thrift.Type.STRING, 9);
    output.writeString(this.fechaFin);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 10);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  if (this.idPromocion !== null && this.idPromocion !== undefined) {
    output.writeFieldBegin('idPromocion', Thrift.Type.STRING, 11);
    output.writeString(this.idPromocion);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updatePromocion_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_updatePromocion_result.prototype = {};
CRUDServer_updatePromocion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updatePromocion_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updatePromocion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertPromocion_args = function(args) {
  this.nombre = null;
  this.descripcion = null;
  this.amigoTeatro = null;
  this.idEvento = null;
  this.idPlatea = null;
  this.tipoAcceso = null;
  this.idTipoPromocion = null;
  this.fechaInicio = null;
  this.fechaFin = null;
  this.estado = null;
  if (args) {
    if (args.nombre !== undefined && args.nombre !== null) {
      this.nombre = args.nombre;
    }
    if (args.descripcion !== undefined && args.descripcion !== null) {
      this.descripcion = args.descripcion;
    }
    if (args.amigoTeatro !== undefined && args.amigoTeatro !== null) {
      this.amigoTeatro = args.amigoTeatro;
    }
    if (args.idEvento !== undefined && args.idEvento !== null) {
      this.idEvento = args.idEvento;
    }
    if (args.idPlatea !== undefined && args.idPlatea !== null) {
      this.idPlatea = args.idPlatea;
    }
    if (args.tipoAcceso !== undefined && args.tipoAcceso !== null) {
      this.tipoAcceso = args.tipoAcceso;
    }
    if (args.idTipoPromocion !== undefined && args.idTipoPromocion !== null) {
      this.idTipoPromocion = args.idTipoPromocion;
    }
    if (args.fechaInicio !== undefined && args.fechaInicio !== null) {
      this.fechaInicio = args.fechaInicio;
    }
    if (args.fechaFin !== undefined && args.fechaFin !== null) {
      this.fechaFin = args.fechaFin;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
  }
};
CRUDServer_insertPromocion_args.prototype = {};
CRUDServer_insertPromocion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nombre = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.descripcion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.amigoTeatro = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.idEvento = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.idPlatea = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.tipoAcceso = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.idTipoPromocion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.fechaInicio = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.fechaFin = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertPromocion_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertPromocion_args');
  if (this.nombre !== null && this.nombre !== undefined) {
    output.writeFieldBegin('nombre', Thrift.Type.STRING, 1);
    output.writeString(this.nombre);
    output.writeFieldEnd();
  }
  if (this.descripcion !== null && this.descripcion !== undefined) {
    output.writeFieldBegin('descripcion', Thrift.Type.STRING, 2);
    output.writeString(this.descripcion);
    output.writeFieldEnd();
  }
  if (this.amigoTeatro !== null && this.amigoTeatro !== undefined) {
    output.writeFieldBegin('amigoTeatro', Thrift.Type.STRING, 3);
    output.writeString(this.amigoTeatro);
    output.writeFieldEnd();
  }
  if (this.idEvento !== null && this.idEvento !== undefined) {
    output.writeFieldBegin('idEvento', Thrift.Type.STRING, 4);
    output.writeString(this.idEvento);
    output.writeFieldEnd();
  }
  if (this.idPlatea !== null && this.idPlatea !== undefined) {
    output.writeFieldBegin('idPlatea', Thrift.Type.STRING, 5);
    output.writeString(this.idPlatea);
    output.writeFieldEnd();
  }
  if (this.tipoAcceso !== null && this.tipoAcceso !== undefined) {
    output.writeFieldBegin('tipoAcceso', Thrift.Type.STRING, 6);
    output.writeString(this.tipoAcceso);
    output.writeFieldEnd();
  }
  if (this.idTipoPromocion !== null && this.idTipoPromocion !== undefined) {
    output.writeFieldBegin('idTipoPromocion', Thrift.Type.STRING, 7);
    output.writeString(this.idTipoPromocion);
    output.writeFieldEnd();
  }
  if (this.fechaInicio !== null && this.fechaInicio !== undefined) {
    output.writeFieldBegin('fechaInicio', Thrift.Type.STRING, 8);
    output.writeString(this.fechaInicio);
    output.writeFieldEnd();
  }
  if (this.fechaFin !== null && this.fechaFin !== undefined) {
    output.writeFieldBegin('fechaFin', Thrift.Type.STRING, 9);
    output.writeString(this.fechaFin);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 10);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertPromocion_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_insertPromocion_result.prototype = {};
CRUDServer_insertPromocion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertPromocion_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertPromocion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getRol_args = function(args) {
  this.idRol = null;
  if (args) {
    if (args.idRol !== undefined && args.idRol !== null) {
      this.idRol = args.idRol;
    }
  }
};
CRUDServer_getRol_args.prototype = {};
CRUDServer_getRol_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.idRol = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getRol_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getRol_args');
  if (this.idRol !== null && this.idRol !== undefined) {
    output.writeFieldBegin('idRol', Thrift.Type.STRING, 1);
    output.writeString(this.idRol);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getRol_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getRol_result.prototype = {};
CRUDServer_getRol_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getRol_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getRol_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllRol_args = function(args) {
};
CRUDServer_getAllRol_args.prototype = {};
CRUDServer_getAllRol_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllRol_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllRol_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllRol_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getAllRol_result.prototype = {};
CRUDServer_getAllRol_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllRol_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllRol_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateRol_args = function(args) {
  this.descripcion = null;
  this.modulo = null;
  this.estado = null;
  this.idRol = null;
  if (args) {
    if (args.descripcion !== undefined && args.descripcion !== null) {
      this.descripcion = args.descripcion;
    }
    if (args.modulo !== undefined && args.modulo !== null) {
      this.modulo = args.modulo;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
    if (args.idRol !== undefined && args.idRol !== null) {
      this.idRol = args.idRol;
    }
  }
};
CRUDServer_updateRol_args.prototype = {};
CRUDServer_updateRol_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.descripcion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.modulo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.idRol = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateRol_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateRol_args');
  if (this.descripcion !== null && this.descripcion !== undefined) {
    output.writeFieldBegin('descripcion', Thrift.Type.STRING, 1);
    output.writeString(this.descripcion);
    output.writeFieldEnd();
  }
  if (this.modulo !== null && this.modulo !== undefined) {
    output.writeFieldBegin('modulo', Thrift.Type.STRING, 2);
    output.writeString(this.modulo);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 3);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  if (this.idRol !== null && this.idRol !== undefined) {
    output.writeFieldBegin('idRol', Thrift.Type.STRING, 4);
    output.writeString(this.idRol);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateRol_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_updateRol_result.prototype = {};
CRUDServer_updateRol_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateRol_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateRol_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertRol_args = function(args) {
  this.descripcion = null;
  this.modulo = null;
  this.estado = null;
  if (args) {
    if (args.descripcion !== undefined && args.descripcion !== null) {
      this.descripcion = args.descripcion;
    }
    if (args.modulo !== undefined && args.modulo !== null) {
      this.modulo = args.modulo;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
  }
};
CRUDServer_insertRol_args.prototype = {};
CRUDServer_insertRol_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.descripcion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.modulo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertRol_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertRol_args');
  if (this.descripcion !== null && this.descripcion !== undefined) {
    output.writeFieldBegin('descripcion', Thrift.Type.STRING, 1);
    output.writeString(this.descripcion);
    output.writeFieldEnd();
  }
  if (this.modulo !== null && this.modulo !== undefined) {
    output.writeFieldBegin('modulo', Thrift.Type.STRING, 2);
    output.writeString(this.modulo);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 3);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertRol_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_insertRol_result.prototype = {};
CRUDServer_insertRol_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertRol_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertRol_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getSala_args = function(args) {
  this.idSala = null;
  if (args) {
    if (args.idSala !== undefined && args.idSala !== null) {
      this.idSala = args.idSala;
    }
  }
};
CRUDServer_getSala_args.prototype = {};
CRUDServer_getSala_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.idSala = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getSala_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getSala_args');
  if (this.idSala !== null && this.idSala !== undefined) {
    output.writeFieldBegin('idSala', Thrift.Type.STRING, 1);
    output.writeString(this.idSala);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getSala_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getSala_result.prototype = {};
CRUDServer_getSala_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getSala_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getSala_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllSala_args = function(args) {
};
CRUDServer_getAllSala_args.prototype = {};
CRUDServer_getAllSala_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllSala_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllSala_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllSala_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getAllSala_result.prototype = {};
CRUDServer_getAllSala_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllSala_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllSala_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateSala_args = function(args) {
  this.nombre = null;
  this.descripcion = null;
  this.capacidad = null;
  this.rutaImagen = null;
  this.estado = null;
  this.idSala = null;
  if (args) {
    if (args.nombre !== undefined && args.nombre !== null) {
      this.nombre = args.nombre;
    }
    if (args.descripcion !== undefined && args.descripcion !== null) {
      this.descripcion = args.descripcion;
    }
    if (args.capacidad !== undefined && args.capacidad !== null) {
      this.capacidad = args.capacidad;
    }
    if (args.rutaImagen !== undefined && args.rutaImagen !== null) {
      this.rutaImagen = args.rutaImagen;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
    if (args.idSala !== undefined && args.idSala !== null) {
      this.idSala = args.idSala;
    }
  }
};
CRUDServer_updateSala_args.prototype = {};
CRUDServer_updateSala_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nombre = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.descripcion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.capacidad = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.rutaImagen = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.idSala = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateSala_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateSala_args');
  if (this.nombre !== null && this.nombre !== undefined) {
    output.writeFieldBegin('nombre', Thrift.Type.STRING, 1);
    output.writeString(this.nombre);
    output.writeFieldEnd();
  }
  if (this.descripcion !== null && this.descripcion !== undefined) {
    output.writeFieldBegin('descripcion', Thrift.Type.STRING, 2);
    output.writeString(this.descripcion);
    output.writeFieldEnd();
  }
  if (this.capacidad !== null && this.capacidad !== undefined) {
    output.writeFieldBegin('capacidad', Thrift.Type.STRING, 3);
    output.writeString(this.capacidad);
    output.writeFieldEnd();
  }
  if (this.rutaImagen !== null && this.rutaImagen !== undefined) {
    output.writeFieldBegin('rutaImagen', Thrift.Type.STRING, 4);
    output.writeString(this.rutaImagen);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 5);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  if (this.idSala !== null && this.idSala !== undefined) {
    output.writeFieldBegin('idSala', Thrift.Type.STRING, 6);
    output.writeString(this.idSala);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateSala_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_updateSala_result.prototype = {};
CRUDServer_updateSala_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateSala_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateSala_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertSala_args = function(args) {
  this.nombre = null;
  this.descripcion = null;
  this.capacidad = null;
  this.rutaImagen = null;
  this.estado = null;
  if (args) {
    if (args.nombre !== undefined && args.nombre !== null) {
      this.nombre = args.nombre;
    }
    if (args.descripcion !== undefined && args.descripcion !== null) {
      this.descripcion = args.descripcion;
    }
    if (args.capacidad !== undefined && args.capacidad !== null) {
      this.capacidad = args.capacidad;
    }
    if (args.rutaImagen !== undefined && args.rutaImagen !== null) {
      this.rutaImagen = args.rutaImagen;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
  }
};
CRUDServer_insertSala_args.prototype = {};
CRUDServer_insertSala_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nombre = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.descripcion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.capacidad = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.rutaImagen = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertSala_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertSala_args');
  if (this.nombre !== null && this.nombre !== undefined) {
    output.writeFieldBegin('nombre', Thrift.Type.STRING, 1);
    output.writeString(this.nombre);
    output.writeFieldEnd();
  }
  if (this.descripcion !== null && this.descripcion !== undefined) {
    output.writeFieldBegin('descripcion', Thrift.Type.STRING, 2);
    output.writeString(this.descripcion);
    output.writeFieldEnd();
  }
  if (this.capacidad !== null && this.capacidad !== undefined) {
    output.writeFieldBegin('capacidad', Thrift.Type.STRING, 3);
    output.writeString(this.capacidad);
    output.writeFieldEnd();
  }
  if (this.rutaImagen !== null && this.rutaImagen !== undefined) {
    output.writeFieldBegin('rutaImagen', Thrift.Type.STRING, 4);
    output.writeString(this.rutaImagen);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 5);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertSala_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_insertSala_result.prototype = {};
CRUDServer_insertSala_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertSala_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertSala_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getSalaMapa_args = function(args) {
  this.idSalaMapa = null;
  if (args) {
    if (args.idSalaMapa !== undefined && args.idSalaMapa !== null) {
      this.idSalaMapa = args.idSalaMapa;
    }
  }
};
CRUDServer_getSalaMapa_args.prototype = {};
CRUDServer_getSalaMapa_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.idSalaMapa = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getSalaMapa_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getSalaMapa_args');
  if (this.idSalaMapa !== null && this.idSalaMapa !== undefined) {
    output.writeFieldBegin('idSalaMapa', Thrift.Type.STRING, 1);
    output.writeString(this.idSalaMapa);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getSalaMapa_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getSalaMapa_result.prototype = {};
CRUDServer_getSalaMapa_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getSalaMapa_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getSalaMapa_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllSalaMapa_args = function(args) {
};
CRUDServer_getAllSalaMapa_args.prototype = {};
CRUDServer_getAllSalaMapa_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllSalaMapa_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllSalaMapa_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllSalaMapa_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getAllSalaMapa_result.prototype = {};
CRUDServer_getAllSalaMapa_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllSalaMapa_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllSalaMapa_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateSalaMapa_args = function(args) {
  this.idSala = null;
  this.idMapa = null;
  this.estado = null;
  this.idSalaMapa = null;
  if (args) {
    if (args.idSala !== undefined && args.idSala !== null) {
      this.idSala = args.idSala;
    }
    if (args.idMapa !== undefined && args.idMapa !== null) {
      this.idMapa = args.idMapa;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
    if (args.idSalaMapa !== undefined && args.idSalaMapa !== null) {
      this.idSalaMapa = args.idSalaMapa;
    }
  }
};
CRUDServer_updateSalaMapa_args.prototype = {};
CRUDServer_updateSalaMapa_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.idSala = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.idMapa = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.idSalaMapa = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateSalaMapa_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateSalaMapa_args');
  if (this.idSala !== null && this.idSala !== undefined) {
    output.writeFieldBegin('idSala', Thrift.Type.STRING, 1);
    output.writeString(this.idSala);
    output.writeFieldEnd();
  }
  if (this.idMapa !== null && this.idMapa !== undefined) {
    output.writeFieldBegin('idMapa', Thrift.Type.STRING, 2);
    output.writeString(this.idMapa);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 3);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  if (this.idSalaMapa !== null && this.idSalaMapa !== undefined) {
    output.writeFieldBegin('idSalaMapa', Thrift.Type.STRING, 4);
    output.writeString(this.idSalaMapa);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateSalaMapa_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_updateSalaMapa_result.prototype = {};
CRUDServer_updateSalaMapa_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateSalaMapa_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateSalaMapa_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertSalaMapa_args = function(args) {
  this.idSala = null;
  this.idMapa = null;
  this.estado = null;
  if (args) {
    if (args.idSala !== undefined && args.idSala !== null) {
      this.idSala = args.idSala;
    }
    if (args.idMapa !== undefined && args.idMapa !== null) {
      this.idMapa = args.idMapa;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
  }
};
CRUDServer_insertSalaMapa_args.prototype = {};
CRUDServer_insertSalaMapa_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.idSala = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.idMapa = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertSalaMapa_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertSalaMapa_args');
  if (this.idSala !== null && this.idSala !== undefined) {
    output.writeFieldBegin('idSala', Thrift.Type.STRING, 1);
    output.writeString(this.idSala);
    output.writeFieldEnd();
  }
  if (this.idMapa !== null && this.idMapa !== undefined) {
    output.writeFieldBegin('idMapa', Thrift.Type.STRING, 2);
    output.writeString(this.idMapa);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 3);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertSalaMapa_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_insertSalaMapa_result.prototype = {};
CRUDServer_insertSalaMapa_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertSalaMapa_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertSalaMapa_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getTarjeta_args = function(args) {
  this.idTarjeta = null;
  if (args) {
    if (args.idTarjeta !== undefined && args.idTarjeta !== null) {
      this.idTarjeta = args.idTarjeta;
    }
  }
};
CRUDServer_getTarjeta_args.prototype = {};
CRUDServer_getTarjeta_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.idTarjeta = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getTarjeta_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getTarjeta_args');
  if (this.idTarjeta !== null && this.idTarjeta !== undefined) {
    output.writeFieldBegin('idTarjeta', Thrift.Type.STRING, 1);
    output.writeString(this.idTarjeta);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getTarjeta_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getTarjeta_result.prototype = {};
CRUDServer_getTarjeta_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getTarjeta_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getTarjeta_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllTarjeta_args = function(args) {
};
CRUDServer_getAllTarjeta_args.prototype = {};
CRUDServer_getAllTarjeta_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllTarjeta_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllTarjeta_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllTarjeta_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getAllTarjeta_result.prototype = {};
CRUDServer_getAllTarjeta_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllTarjeta_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllTarjeta_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateTarjeta_args = function(args) {
  this.nombre = null;
  this.tipo = null;
  this.estado = null;
  this.idTarjeta = null;
  if (args) {
    if (args.nombre !== undefined && args.nombre !== null) {
      this.nombre = args.nombre;
    }
    if (args.tipo !== undefined && args.tipo !== null) {
      this.tipo = args.tipo;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
    if (args.idTarjeta !== undefined && args.idTarjeta !== null) {
      this.idTarjeta = args.idTarjeta;
    }
  }
};
CRUDServer_updateTarjeta_args.prototype = {};
CRUDServer_updateTarjeta_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nombre = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tipo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.idTarjeta = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateTarjeta_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateTarjeta_args');
  if (this.nombre !== null && this.nombre !== undefined) {
    output.writeFieldBegin('nombre', Thrift.Type.STRING, 1);
    output.writeString(this.nombre);
    output.writeFieldEnd();
  }
  if (this.tipo !== null && this.tipo !== undefined) {
    output.writeFieldBegin('tipo', Thrift.Type.STRING, 2);
    output.writeString(this.tipo);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 3);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  if (this.idTarjeta !== null && this.idTarjeta !== undefined) {
    output.writeFieldBegin('idTarjeta', Thrift.Type.STRING, 4);
    output.writeString(this.idTarjeta);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateTarjeta_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_updateTarjeta_result.prototype = {};
CRUDServer_updateTarjeta_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateTarjeta_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateTarjeta_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertTarjeta_args = function(args) {
  this.nombre = null;
  this.tipo = null;
  this.estado = null;
  if (args) {
    if (args.nombre !== undefined && args.nombre !== null) {
      this.nombre = args.nombre;
    }
    if (args.tipo !== undefined && args.tipo !== null) {
      this.tipo = args.tipo;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
  }
};
CRUDServer_insertTarjeta_args.prototype = {};
CRUDServer_insertTarjeta_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nombre = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tipo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertTarjeta_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertTarjeta_args');
  if (this.nombre !== null && this.nombre !== undefined) {
    output.writeFieldBegin('nombre', Thrift.Type.STRING, 1);
    output.writeString(this.nombre);
    output.writeFieldEnd();
  }
  if (this.tipo !== null && this.tipo !== undefined) {
    output.writeFieldBegin('tipo', Thrift.Type.STRING, 2);
    output.writeString(this.tipo);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 3);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertTarjeta_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_insertTarjeta_result.prototype = {};
CRUDServer_insertTarjeta_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertTarjeta_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertTarjeta_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getTipoEspectaculo_args = function(args) {
  this.idTipoEspectaculo = null;
  if (args) {
    if (args.idTipoEspectaculo !== undefined && args.idTipoEspectaculo !== null) {
      this.idTipoEspectaculo = args.idTipoEspectaculo;
    }
  }
};
CRUDServer_getTipoEspectaculo_args.prototype = {};
CRUDServer_getTipoEspectaculo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.idTipoEspectaculo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getTipoEspectaculo_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getTipoEspectaculo_args');
  if (this.idTipoEspectaculo !== null && this.idTipoEspectaculo !== undefined) {
    output.writeFieldBegin('idTipoEspectaculo', Thrift.Type.STRING, 1);
    output.writeString(this.idTipoEspectaculo);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getTipoEspectaculo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getTipoEspectaculo_result.prototype = {};
CRUDServer_getTipoEspectaculo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getTipoEspectaculo_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getTipoEspectaculo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllTipoEspectaculo_args = function(args) {
};
CRUDServer_getAllTipoEspectaculo_args.prototype = {};
CRUDServer_getAllTipoEspectaculo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllTipoEspectaculo_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllTipoEspectaculo_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllTipoEspectaculo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getAllTipoEspectaculo_result.prototype = {};
CRUDServer_getAllTipoEspectaculo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllTipoEspectaculo_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllTipoEspectaculo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateTipoEspectaculo_args = function(args) {
  this.nombre = null;
  this.descripcion = null;
  this.estado = null;
  this.idTipoEspectaculo = null;
  if (args) {
    if (args.nombre !== undefined && args.nombre !== null) {
      this.nombre = args.nombre;
    }
    if (args.descripcion !== undefined && args.descripcion !== null) {
      this.descripcion = args.descripcion;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
    if (args.idTipoEspectaculo !== undefined && args.idTipoEspectaculo !== null) {
      this.idTipoEspectaculo = args.idTipoEspectaculo;
    }
  }
};
CRUDServer_updateTipoEspectaculo_args.prototype = {};
CRUDServer_updateTipoEspectaculo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nombre = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.descripcion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.idTipoEspectaculo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateTipoEspectaculo_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateTipoEspectaculo_args');
  if (this.nombre !== null && this.nombre !== undefined) {
    output.writeFieldBegin('nombre', Thrift.Type.STRING, 1);
    output.writeString(this.nombre);
    output.writeFieldEnd();
  }
  if (this.descripcion !== null && this.descripcion !== undefined) {
    output.writeFieldBegin('descripcion', Thrift.Type.STRING, 2);
    output.writeString(this.descripcion);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 3);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  if (this.idTipoEspectaculo !== null && this.idTipoEspectaculo !== undefined) {
    output.writeFieldBegin('idTipoEspectaculo', Thrift.Type.STRING, 4);
    output.writeString(this.idTipoEspectaculo);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateTipoEspectaculo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_updateTipoEspectaculo_result.prototype = {};
CRUDServer_updateTipoEspectaculo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateTipoEspectaculo_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateTipoEspectaculo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertTipoEspectaculo_args = function(args) {
  this.nombre = null;
  this.descripcion = null;
  this.estado = null;
  if (args) {
    if (args.nombre !== undefined && args.nombre !== null) {
      this.nombre = args.nombre;
    }
    if (args.descripcion !== undefined && args.descripcion !== null) {
      this.descripcion = args.descripcion;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
  }
};
CRUDServer_insertTipoEspectaculo_args.prototype = {};
CRUDServer_insertTipoEspectaculo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nombre = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.descripcion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertTipoEspectaculo_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertTipoEspectaculo_args');
  if (this.nombre !== null && this.nombre !== undefined) {
    output.writeFieldBegin('nombre', Thrift.Type.STRING, 1);
    output.writeString(this.nombre);
    output.writeFieldEnd();
  }
  if (this.descripcion !== null && this.descripcion !== undefined) {
    output.writeFieldBegin('descripcion', Thrift.Type.STRING, 2);
    output.writeString(this.descripcion);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 3);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertTipoEspectaculo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_insertTipoEspectaculo_result.prototype = {};
CRUDServer_insertTipoEspectaculo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertTipoEspectaculo_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertTipoEspectaculo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getTipoEvento_args = function(args) {
  this.idTipoEvento = null;
  if (args) {
    if (args.idTipoEvento !== undefined && args.idTipoEvento !== null) {
      this.idTipoEvento = args.idTipoEvento;
    }
  }
};
CRUDServer_getTipoEvento_args.prototype = {};
CRUDServer_getTipoEvento_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.idTipoEvento = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getTipoEvento_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getTipoEvento_args');
  if (this.idTipoEvento !== null && this.idTipoEvento !== undefined) {
    output.writeFieldBegin('idTipoEvento', Thrift.Type.STRING, 1);
    output.writeString(this.idTipoEvento);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getTipoEvento_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getTipoEvento_result.prototype = {};
CRUDServer_getTipoEvento_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getTipoEvento_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getTipoEvento_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllTipoEvento_args = function(args) {
};
CRUDServer_getAllTipoEvento_args.prototype = {};
CRUDServer_getAllTipoEvento_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllTipoEvento_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllTipoEvento_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllTipoEvento_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getAllTipoEvento_result.prototype = {};
CRUDServer_getAllTipoEvento_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllTipoEvento_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllTipoEvento_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateTipoEvento_args = function(args) {
  this.nombre = null;
  this.descripcion = null;
  this.estado = null;
  this.idTipoEvento = null;
  if (args) {
    if (args.nombre !== undefined && args.nombre !== null) {
      this.nombre = args.nombre;
    }
    if (args.descripcion !== undefined && args.descripcion !== null) {
      this.descripcion = args.descripcion;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
    if (args.idTipoEvento !== undefined && args.idTipoEvento !== null) {
      this.idTipoEvento = args.idTipoEvento;
    }
  }
};
CRUDServer_updateTipoEvento_args.prototype = {};
CRUDServer_updateTipoEvento_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nombre = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.descripcion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.idTipoEvento = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateTipoEvento_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateTipoEvento_args');
  if (this.nombre !== null && this.nombre !== undefined) {
    output.writeFieldBegin('nombre', Thrift.Type.STRING, 1);
    output.writeString(this.nombre);
    output.writeFieldEnd();
  }
  if (this.descripcion !== null && this.descripcion !== undefined) {
    output.writeFieldBegin('descripcion', Thrift.Type.STRING, 2);
    output.writeString(this.descripcion);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 3);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  if (this.idTipoEvento !== null && this.idTipoEvento !== undefined) {
    output.writeFieldBegin('idTipoEvento', Thrift.Type.STRING, 4);
    output.writeString(this.idTipoEvento);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateTipoEvento_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_updateTipoEvento_result.prototype = {};
CRUDServer_updateTipoEvento_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateTipoEvento_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateTipoEvento_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertTipoEvento_args = function(args) {
  this.nombre = null;
  this.descripcion = null;
  this.estado = null;
  if (args) {
    if (args.nombre !== undefined && args.nombre !== null) {
      this.nombre = args.nombre;
    }
    if (args.descripcion !== undefined && args.descripcion !== null) {
      this.descripcion = args.descripcion;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
  }
};
CRUDServer_insertTipoEvento_args.prototype = {};
CRUDServer_insertTipoEvento_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nombre = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.descripcion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertTipoEvento_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertTipoEvento_args');
  if (this.nombre !== null && this.nombre !== undefined) {
    output.writeFieldBegin('nombre', Thrift.Type.STRING, 1);
    output.writeString(this.nombre);
    output.writeFieldEnd();
  }
  if (this.descripcion !== null && this.descripcion !== undefined) {
    output.writeFieldBegin('descripcion', Thrift.Type.STRING, 2);
    output.writeString(this.descripcion);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 3);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertTipoEvento_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_insertTipoEvento_result.prototype = {};
CRUDServer_insertTipoEvento_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertTipoEvento_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertTipoEvento_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getTipoPrecio_args = function(args) {
  this.idTipoPrecio = null;
  if (args) {
    if (args.idTipoPrecio !== undefined && args.idTipoPrecio !== null) {
      this.idTipoPrecio = args.idTipoPrecio;
    }
  }
};
CRUDServer_getTipoPrecio_args.prototype = {};
CRUDServer_getTipoPrecio_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.idTipoPrecio = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getTipoPrecio_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getTipoPrecio_args');
  if (this.idTipoPrecio !== null && this.idTipoPrecio !== undefined) {
    output.writeFieldBegin('idTipoPrecio', Thrift.Type.STRING, 1);
    output.writeString(this.idTipoPrecio);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getTipoPrecio_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getTipoPrecio_result.prototype = {};
CRUDServer_getTipoPrecio_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getTipoPrecio_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getTipoPrecio_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllTipoPrecio_args = function(args) {
};
CRUDServer_getAllTipoPrecio_args.prototype = {};
CRUDServer_getAllTipoPrecio_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllTipoPrecio_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllTipoPrecio_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllTipoPrecio_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getAllTipoPrecio_result.prototype = {};
CRUDServer_getAllTipoPrecio_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllTipoPrecio_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllTipoPrecio_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateTipoPrecio_args = function(args) {
  this.nombre = null;
  this.descripcion = null;
  this.estado = null;
  this.idTipoPrecio = null;
  if (args) {
    if (args.nombre !== undefined && args.nombre !== null) {
      this.nombre = args.nombre;
    }
    if (args.descripcion !== undefined && args.descripcion !== null) {
      this.descripcion = args.descripcion;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
    if (args.idTipoPrecio !== undefined && args.idTipoPrecio !== null) {
      this.idTipoPrecio = args.idTipoPrecio;
    }
  }
};
CRUDServer_updateTipoPrecio_args.prototype = {};
CRUDServer_updateTipoPrecio_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nombre = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.descripcion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.idTipoPrecio = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateTipoPrecio_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateTipoPrecio_args');
  if (this.nombre !== null && this.nombre !== undefined) {
    output.writeFieldBegin('nombre', Thrift.Type.STRING, 1);
    output.writeString(this.nombre);
    output.writeFieldEnd();
  }
  if (this.descripcion !== null && this.descripcion !== undefined) {
    output.writeFieldBegin('descripcion', Thrift.Type.STRING, 2);
    output.writeString(this.descripcion);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 3);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  if (this.idTipoPrecio !== null && this.idTipoPrecio !== undefined) {
    output.writeFieldBegin('idTipoPrecio', Thrift.Type.STRING, 4);
    output.writeString(this.idTipoPrecio);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateTipoPrecio_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_updateTipoPrecio_result.prototype = {};
CRUDServer_updateTipoPrecio_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateTipoPrecio_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateTipoPrecio_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertTipoPrecio_args = function(args) {
  this.nombre = null;
  this.descripcion = null;
  this.estado = null;
  if (args) {
    if (args.nombre !== undefined && args.nombre !== null) {
      this.nombre = args.nombre;
    }
    if (args.descripcion !== undefined && args.descripcion !== null) {
      this.descripcion = args.descripcion;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
  }
};
CRUDServer_insertTipoPrecio_args.prototype = {};
CRUDServer_insertTipoPrecio_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nombre = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.descripcion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertTipoPrecio_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertTipoPrecio_args');
  if (this.nombre !== null && this.nombre !== undefined) {
    output.writeFieldBegin('nombre', Thrift.Type.STRING, 1);
    output.writeString(this.nombre);
    output.writeFieldEnd();
  }
  if (this.descripcion !== null && this.descripcion !== undefined) {
    output.writeFieldBegin('descripcion', Thrift.Type.STRING, 2);
    output.writeString(this.descripcion);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 3);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertTipoPrecio_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_insertTipoPrecio_result.prototype = {};
CRUDServer_insertTipoPrecio_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertTipoPrecio_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertTipoPrecio_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getTipoPromocion_args = function(args) {
  this.idTipoPromocion = null;
  if (args) {
    if (args.idTipoPromocion !== undefined && args.idTipoPromocion !== null) {
      this.idTipoPromocion = args.idTipoPromocion;
    }
  }
};
CRUDServer_getTipoPromocion_args.prototype = {};
CRUDServer_getTipoPromocion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.idTipoPromocion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getTipoPromocion_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getTipoPromocion_args');
  if (this.idTipoPromocion !== null && this.idTipoPromocion !== undefined) {
    output.writeFieldBegin('idTipoPromocion', Thrift.Type.STRING, 1);
    output.writeString(this.idTipoPromocion);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getTipoPromocion_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getTipoPromocion_result.prototype = {};
CRUDServer_getTipoPromocion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getTipoPromocion_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getTipoPromocion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllTipoPromocion_args = function(args) {
};
CRUDServer_getAllTipoPromocion_args.prototype = {};
CRUDServer_getAllTipoPromocion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllTipoPromocion_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllTipoPromocion_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllTipoPromocion_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getAllTipoPromocion_result.prototype = {};
CRUDServer_getAllTipoPromocion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllTipoPromocion_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllTipoPromocion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateTipoPromocion_args = function(args) {
  this.nombre = null;
  this.factorCompra = null;
  this.factorPago = null;
  this.idBancoTarjeta = null;
  this.idCodigoPromocional = null;
  this.estado = null;
  this.idTipoPromocion = null;
  if (args) {
    if (args.nombre !== undefined && args.nombre !== null) {
      this.nombre = args.nombre;
    }
    if (args.factorCompra !== undefined && args.factorCompra !== null) {
      this.factorCompra = args.factorCompra;
    }
    if (args.factorPago !== undefined && args.factorPago !== null) {
      this.factorPago = args.factorPago;
    }
    if (args.idBancoTarjeta !== undefined && args.idBancoTarjeta !== null) {
      this.idBancoTarjeta = args.idBancoTarjeta;
    }
    if (args.idCodigoPromocional !== undefined && args.idCodigoPromocional !== null) {
      this.idCodigoPromocional = args.idCodigoPromocional;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
    if (args.idTipoPromocion !== undefined && args.idTipoPromocion !== null) {
      this.idTipoPromocion = args.idTipoPromocion;
    }
  }
};
CRUDServer_updateTipoPromocion_args.prototype = {};
CRUDServer_updateTipoPromocion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nombre = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.factorCompra = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.factorPago = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.idBancoTarjeta = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.idCodigoPromocional = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.idTipoPromocion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateTipoPromocion_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateTipoPromocion_args');
  if (this.nombre !== null && this.nombre !== undefined) {
    output.writeFieldBegin('nombre', Thrift.Type.STRING, 1);
    output.writeString(this.nombre);
    output.writeFieldEnd();
  }
  if (this.factorCompra !== null && this.factorCompra !== undefined) {
    output.writeFieldBegin('factorCompra', Thrift.Type.STRING, 2);
    output.writeString(this.factorCompra);
    output.writeFieldEnd();
  }
  if (this.factorPago !== null && this.factorPago !== undefined) {
    output.writeFieldBegin('factorPago', Thrift.Type.STRING, 3);
    output.writeString(this.factorPago);
    output.writeFieldEnd();
  }
  if (this.idBancoTarjeta !== null && this.idBancoTarjeta !== undefined) {
    output.writeFieldBegin('idBancoTarjeta', Thrift.Type.STRING, 4);
    output.writeString(this.idBancoTarjeta);
    output.writeFieldEnd();
  }
  if (this.idCodigoPromocional !== null && this.idCodigoPromocional !== undefined) {
    output.writeFieldBegin('idCodigoPromocional', Thrift.Type.STRING, 5);
    output.writeString(this.idCodigoPromocional);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 6);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  if (this.idTipoPromocion !== null && this.idTipoPromocion !== undefined) {
    output.writeFieldBegin('idTipoPromocion', Thrift.Type.STRING, 7);
    output.writeString(this.idTipoPromocion);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateTipoPromocion_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_updateTipoPromocion_result.prototype = {};
CRUDServer_updateTipoPromocion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateTipoPromocion_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateTipoPromocion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertTipoPromocion_args = function(args) {
  this.nombre = null;
  this.factorCompra = null;
  this.factorPago = null;
  this.idBancoTarjeta = null;
  this.idCodigoPromocional = null;
  this.estado = null;
  if (args) {
    if (args.nombre !== undefined && args.nombre !== null) {
      this.nombre = args.nombre;
    }
    if (args.factorCompra !== undefined && args.factorCompra !== null) {
      this.factorCompra = args.factorCompra;
    }
    if (args.factorPago !== undefined && args.factorPago !== null) {
      this.factorPago = args.factorPago;
    }
    if (args.idBancoTarjeta !== undefined && args.idBancoTarjeta !== null) {
      this.idBancoTarjeta = args.idBancoTarjeta;
    }
    if (args.idCodigoPromocional !== undefined && args.idCodigoPromocional !== null) {
      this.idCodigoPromocional = args.idCodigoPromocional;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
  }
};
CRUDServer_insertTipoPromocion_args.prototype = {};
CRUDServer_insertTipoPromocion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nombre = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.factorCompra = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.factorPago = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.idBancoTarjeta = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.idCodigoPromocional = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertTipoPromocion_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertTipoPromocion_args');
  if (this.nombre !== null && this.nombre !== undefined) {
    output.writeFieldBegin('nombre', Thrift.Type.STRING, 1);
    output.writeString(this.nombre);
    output.writeFieldEnd();
  }
  if (this.factorCompra !== null && this.factorCompra !== undefined) {
    output.writeFieldBegin('factorCompra', Thrift.Type.STRING, 2);
    output.writeString(this.factorCompra);
    output.writeFieldEnd();
  }
  if (this.factorPago !== null && this.factorPago !== undefined) {
    output.writeFieldBegin('factorPago', Thrift.Type.STRING, 3);
    output.writeString(this.factorPago);
    output.writeFieldEnd();
  }
  if (this.idBancoTarjeta !== null && this.idBancoTarjeta !== undefined) {
    output.writeFieldBegin('idBancoTarjeta', Thrift.Type.STRING, 4);
    output.writeString(this.idBancoTarjeta);
    output.writeFieldEnd();
  }
  if (this.idCodigoPromocional !== null && this.idCodigoPromocional !== undefined) {
    output.writeFieldBegin('idCodigoPromocional', Thrift.Type.STRING, 5);
    output.writeString(this.idCodigoPromocional);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 6);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertTipoPromocion_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_insertTipoPromocion_result.prototype = {};
CRUDServer_insertTipoPromocion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertTipoPromocion_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertTipoPromocion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getUsuario_args = function(args) {
  this.idUsuario = null;
  if (args) {
    if (args.idUsuario !== undefined && args.idUsuario !== null) {
      this.idUsuario = args.idUsuario;
    }
  }
};
CRUDServer_getUsuario_args.prototype = {};
CRUDServer_getUsuario_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.idUsuario = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getUsuario_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getUsuario_args');
  if (this.idUsuario !== null && this.idUsuario !== undefined) {
    output.writeFieldBegin('idUsuario', Thrift.Type.STRING, 1);
    output.writeString(this.idUsuario);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getUsuario_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getUsuario_result.prototype = {};
CRUDServer_getUsuario_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getUsuario_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getUsuario_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllUsuario_args = function(args) {
};
CRUDServer_getAllUsuario_args.prototype = {};
CRUDServer_getAllUsuario_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllUsuario_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllUsuario_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllUsuario_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getAllUsuario_result.prototype = {};
CRUDServer_getAllUsuario_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllUsuario_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllUsuario_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateUsuario_args = function(args) {
  this.nombres = null;
  this.usuario = null;
  this.cedula = null;
  this.sexo = null;
  this.correo = null;
  this.celular = null;
  this.contrasena = null;
  this.idPerfil = null;
  this.fechaNacimiento = null;
  this.direccion = null;
  this.estado = null;
  this.idUsuario = null;
  if (args) {
    if (args.nombres !== undefined && args.nombres !== null) {
      this.nombres = args.nombres;
    }
    if (args.usuario !== undefined && args.usuario !== null) {
      this.usuario = args.usuario;
    }
    if (args.cedula !== undefined && args.cedula !== null) {
      this.cedula = args.cedula;
    }
    if (args.sexo !== undefined && args.sexo !== null) {
      this.sexo = args.sexo;
    }
    if (args.correo !== undefined && args.correo !== null) {
      this.correo = args.correo;
    }
    if (args.celular !== undefined && args.celular !== null) {
      this.celular = args.celular;
    }
    if (args.contrasena !== undefined && args.contrasena !== null) {
      this.contrasena = args.contrasena;
    }
    if (args.idPerfil !== undefined && args.idPerfil !== null) {
      this.idPerfil = args.idPerfil;
    }
    if (args.fechaNacimiento !== undefined && args.fechaNacimiento !== null) {
      this.fechaNacimiento = args.fechaNacimiento;
    }
    if (args.direccion !== undefined && args.direccion !== null) {
      this.direccion = args.direccion;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
    if (args.idUsuario !== undefined && args.idUsuario !== null) {
      this.idUsuario = args.idUsuario;
    }
  }
};
CRUDServer_updateUsuario_args.prototype = {};
CRUDServer_updateUsuario_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nombres = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.usuario = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.cedula = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sexo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.correo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.celular = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.contrasena = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.idPerfil = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.fechaNacimiento = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.direccion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.idUsuario = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateUsuario_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateUsuario_args');
  if (this.nombres !== null && this.nombres !== undefined) {
    output.writeFieldBegin('nombres', Thrift.Type.STRING, 1);
    output.writeString(this.nombres);
    output.writeFieldEnd();
  }
  if (this.usuario !== null && this.usuario !== undefined) {
    output.writeFieldBegin('usuario', Thrift.Type.STRING, 2);
    output.writeString(this.usuario);
    output.writeFieldEnd();
  }
  if (this.cedula !== null && this.cedula !== undefined) {
    output.writeFieldBegin('cedula', Thrift.Type.STRING, 3);
    output.writeString(this.cedula);
    output.writeFieldEnd();
  }
  if (this.sexo !== null && this.sexo !== undefined) {
    output.writeFieldBegin('sexo', Thrift.Type.STRING, 4);
    output.writeString(this.sexo);
    output.writeFieldEnd();
  }
  if (this.correo !== null && this.correo !== undefined) {
    output.writeFieldBegin('correo', Thrift.Type.STRING, 5);
    output.writeString(this.correo);
    output.writeFieldEnd();
  }
  if (this.celular !== null && this.celular !== undefined) {
    output.writeFieldBegin('celular', Thrift.Type.STRING, 6);
    output.writeString(this.celular);
    output.writeFieldEnd();
  }
  if (this.contrasena !== null && this.contrasena !== undefined) {
    output.writeFieldBegin('contrasena', Thrift.Type.STRING, 7);
    output.writeString(this.contrasena);
    output.writeFieldEnd();
  }
  if (this.idPerfil !== null && this.idPerfil !== undefined) {
    output.writeFieldBegin('idPerfil', Thrift.Type.STRING, 8);
    output.writeString(this.idPerfil);
    output.writeFieldEnd();
  }
  if (this.fechaNacimiento !== null && this.fechaNacimiento !== undefined) {
    output.writeFieldBegin('fechaNacimiento', Thrift.Type.STRING, 9);
    output.writeString(this.fechaNacimiento);
    output.writeFieldEnd();
  }
  if (this.direccion !== null && this.direccion !== undefined) {
    output.writeFieldBegin('direccion', Thrift.Type.STRING, 10);
    output.writeString(this.direccion);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 11);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  if (this.idUsuario !== null && this.idUsuario !== undefined) {
    output.writeFieldBegin('idUsuario', Thrift.Type.STRING, 12);
    output.writeString(this.idUsuario);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateUsuario_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_updateUsuario_result.prototype = {};
CRUDServer_updateUsuario_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateUsuario_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateUsuario_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertUsuario_args = function(args) {
  this.nombres = null;
  this.usuario = null;
  this.cedula = null;
  this.sexo = null;
  this.correo = null;
  this.celular = null;
  this.contrasena = null;
  this.idPerfil = null;
  this.fechaNacimiento = null;
  this.direccion = null;
  this.estado = null;
  if (args) {
    if (args.nombres !== undefined && args.nombres !== null) {
      this.nombres = args.nombres;
    }
    if (args.usuario !== undefined && args.usuario !== null) {
      this.usuario = args.usuario;
    }
    if (args.cedula !== undefined && args.cedula !== null) {
      this.cedula = args.cedula;
    }
    if (args.sexo !== undefined && args.sexo !== null) {
      this.sexo = args.sexo;
    }
    if (args.correo !== undefined && args.correo !== null) {
      this.correo = args.correo;
    }
    if (args.celular !== undefined && args.celular !== null) {
      this.celular = args.celular;
    }
    if (args.contrasena !== undefined && args.contrasena !== null) {
      this.contrasena = args.contrasena;
    }
    if (args.idPerfil !== undefined && args.idPerfil !== null) {
      this.idPerfil = args.idPerfil;
    }
    if (args.fechaNacimiento !== undefined && args.fechaNacimiento !== null) {
      this.fechaNacimiento = args.fechaNacimiento;
    }
    if (args.direccion !== undefined && args.direccion !== null) {
      this.direccion = args.direccion;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
  }
};
CRUDServer_insertUsuario_args.prototype = {};
CRUDServer_insertUsuario_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nombres = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.usuario = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.cedula = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sexo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.correo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.celular = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.contrasena = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.idPerfil = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.fechaNacimiento = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.direccion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertUsuario_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertUsuario_args');
  if (this.nombres !== null && this.nombres !== undefined) {
    output.writeFieldBegin('nombres', Thrift.Type.STRING, 1);
    output.writeString(this.nombres);
    output.writeFieldEnd();
  }
  if (this.usuario !== null && this.usuario !== undefined) {
    output.writeFieldBegin('usuario', Thrift.Type.STRING, 2);
    output.writeString(this.usuario);
    output.writeFieldEnd();
  }
  if (this.cedula !== null && this.cedula !== undefined) {
    output.writeFieldBegin('cedula', Thrift.Type.STRING, 3);
    output.writeString(this.cedula);
    output.writeFieldEnd();
  }
  if (this.sexo !== null && this.sexo !== undefined) {
    output.writeFieldBegin('sexo', Thrift.Type.STRING, 4);
    output.writeString(this.sexo);
    output.writeFieldEnd();
  }
  if (this.correo !== null && this.correo !== undefined) {
    output.writeFieldBegin('correo', Thrift.Type.STRING, 5);
    output.writeString(this.correo);
    output.writeFieldEnd();
  }
  if (this.celular !== null && this.celular !== undefined) {
    output.writeFieldBegin('celular', Thrift.Type.STRING, 6);
    output.writeString(this.celular);
    output.writeFieldEnd();
  }
  if (this.contrasena !== null && this.contrasena !== undefined) {
    output.writeFieldBegin('contrasena', Thrift.Type.STRING, 7);
    output.writeString(this.contrasena);
    output.writeFieldEnd();
  }
  if (this.idPerfil !== null && this.idPerfil !== undefined) {
    output.writeFieldBegin('idPerfil', Thrift.Type.STRING, 8);
    output.writeString(this.idPerfil);
    output.writeFieldEnd();
  }
  if (this.fechaNacimiento !== null && this.fechaNacimiento !== undefined) {
    output.writeFieldBegin('fechaNacimiento', Thrift.Type.STRING, 9);
    output.writeString(this.fechaNacimiento);
    output.writeFieldEnd();
  }
  if (this.direccion !== null && this.direccion !== undefined) {
    output.writeFieldBegin('direccion', Thrift.Type.STRING, 10);
    output.writeString(this.direccion);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 11);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertUsuario_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_insertUsuario_result.prototype = {};
CRUDServer_insertUsuario_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertUsuario_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertUsuario_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getUsuarioCliente_args = function(args) {
  this.idUsuarioCliente = null;
  if (args) {
    if (args.idUsuarioCliente !== undefined && args.idUsuarioCliente !== null) {
      this.idUsuarioCliente = args.idUsuarioCliente;
    }
  }
};
CRUDServer_getUsuarioCliente_args.prototype = {};
CRUDServer_getUsuarioCliente_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.idUsuarioCliente = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getUsuarioCliente_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getUsuarioCliente_args');
  if (this.idUsuarioCliente !== null && this.idUsuarioCliente !== undefined) {
    output.writeFieldBegin('idUsuarioCliente', Thrift.Type.STRING, 1);
    output.writeString(this.idUsuarioCliente);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getUsuarioCliente_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getUsuarioCliente_result.prototype = {};
CRUDServer_getUsuarioCliente_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getUsuarioCliente_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getUsuarioCliente_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllUsuarioCliente_args = function(args) {
};
CRUDServer_getAllUsuarioCliente_args.prototype = {};
CRUDServer_getAllUsuarioCliente_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllUsuarioCliente_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllUsuarioCliente_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllUsuarioCliente_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getAllUsuarioCliente_result.prototype = {};
CRUDServer_getAllUsuarioCliente_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllUsuarioCliente_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllUsuarioCliente_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateUsuarioCliente_args = function(args) {
  this.nombres = null;
  this.usuario = null;
  this.cedula = null;
  this.sexo = null;
  this.correo = null;
  this.celular = null;
  this.contrasena = null;
  this.fechaNacimiento = null;
  this.direccion = null;
  this.amigoTeatro = null;
  this.estado = null;
  this.idUsuarioCliente = null;
  if (args) {
    if (args.nombres !== undefined && args.nombres !== null) {
      this.nombres = args.nombres;
    }
    if (args.usuario !== undefined && args.usuario !== null) {
      this.usuario = args.usuario;
    }
    if (args.cedula !== undefined && args.cedula !== null) {
      this.cedula = args.cedula;
    }
    if (args.sexo !== undefined && args.sexo !== null) {
      this.sexo = args.sexo;
    }
    if (args.correo !== undefined && args.correo !== null) {
      this.correo = args.correo;
    }
    if (args.celular !== undefined && args.celular !== null) {
      this.celular = args.celular;
    }
    if (args.contrasena !== undefined && args.contrasena !== null) {
      this.contrasena = args.contrasena;
    }
    if (args.fechaNacimiento !== undefined && args.fechaNacimiento !== null) {
      this.fechaNacimiento = args.fechaNacimiento;
    }
    if (args.direccion !== undefined && args.direccion !== null) {
      this.direccion = args.direccion;
    }
    if (args.amigoTeatro !== undefined && args.amigoTeatro !== null) {
      this.amigoTeatro = args.amigoTeatro;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
    if (args.idUsuarioCliente !== undefined && args.idUsuarioCliente !== null) {
      this.idUsuarioCliente = args.idUsuarioCliente;
    }
  }
};
CRUDServer_updateUsuarioCliente_args.prototype = {};
CRUDServer_updateUsuarioCliente_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nombres = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.usuario = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.cedula = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sexo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.correo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.celular = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.contrasena = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.fechaNacimiento = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.direccion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.amigoTeatro = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.idUsuarioCliente = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateUsuarioCliente_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateUsuarioCliente_args');
  if (this.nombres !== null && this.nombres !== undefined) {
    output.writeFieldBegin('nombres', Thrift.Type.STRING, 1);
    output.writeString(this.nombres);
    output.writeFieldEnd();
  }
  if (this.usuario !== null && this.usuario !== undefined) {
    output.writeFieldBegin('usuario', Thrift.Type.STRING, 2);
    output.writeString(this.usuario);
    output.writeFieldEnd();
  }
  if (this.cedula !== null && this.cedula !== undefined) {
    output.writeFieldBegin('cedula', Thrift.Type.STRING, 3);
    output.writeString(this.cedula);
    output.writeFieldEnd();
  }
  if (this.sexo !== null && this.sexo !== undefined) {
    output.writeFieldBegin('sexo', Thrift.Type.STRING, 4);
    output.writeString(this.sexo);
    output.writeFieldEnd();
  }
  if (this.correo !== null && this.correo !== undefined) {
    output.writeFieldBegin('correo', Thrift.Type.STRING, 5);
    output.writeString(this.correo);
    output.writeFieldEnd();
  }
  if (this.celular !== null && this.celular !== undefined) {
    output.writeFieldBegin('celular', Thrift.Type.STRING, 6);
    output.writeString(this.celular);
    output.writeFieldEnd();
  }
  if (this.contrasena !== null && this.contrasena !== undefined) {
    output.writeFieldBegin('contrasena', Thrift.Type.STRING, 7);
    output.writeString(this.contrasena);
    output.writeFieldEnd();
  }
  if (this.fechaNacimiento !== null && this.fechaNacimiento !== undefined) {
    output.writeFieldBegin('fechaNacimiento', Thrift.Type.STRING, 8);
    output.writeString(this.fechaNacimiento);
    output.writeFieldEnd();
  }
  if (this.direccion !== null && this.direccion !== undefined) {
    output.writeFieldBegin('direccion', Thrift.Type.STRING, 9);
    output.writeString(this.direccion);
    output.writeFieldEnd();
  }
  if (this.amigoTeatro !== null && this.amigoTeatro !== undefined) {
    output.writeFieldBegin('amigoTeatro', Thrift.Type.STRING, 10);
    output.writeString(this.amigoTeatro);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 11);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  if (this.idUsuarioCliente !== null && this.idUsuarioCliente !== undefined) {
    output.writeFieldBegin('idUsuarioCliente', Thrift.Type.STRING, 12);
    output.writeString(this.idUsuarioCliente);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateUsuarioCliente_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_updateUsuarioCliente_result.prototype = {};
CRUDServer_updateUsuarioCliente_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateUsuarioCliente_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateUsuarioCliente_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertUsuarioCliente_args = function(args) {
  this.nombres = null;
  this.usuario = null;
  this.cedula = null;
  this.sexo = null;
  this.correo = null;
  this.celular = null;
  this.contrasena = null;
  this.fechaNacimiento = null;
  this.direccion = null;
  this.amigoTeatro = null;
  this.estado = null;
  if (args) {
    if (args.nombres !== undefined && args.nombres !== null) {
      this.nombres = args.nombres;
    }
    if (args.usuario !== undefined && args.usuario !== null) {
      this.usuario = args.usuario;
    }
    if (args.cedula !== undefined && args.cedula !== null) {
      this.cedula = args.cedula;
    }
    if (args.sexo !== undefined && args.sexo !== null) {
      this.sexo = args.sexo;
    }
    if (args.correo !== undefined && args.correo !== null) {
      this.correo = args.correo;
    }
    if (args.celular !== undefined && args.celular !== null) {
      this.celular = args.celular;
    }
    if (args.contrasena !== undefined && args.contrasena !== null) {
      this.contrasena = args.contrasena;
    }
    if (args.fechaNacimiento !== undefined && args.fechaNacimiento !== null) {
      this.fechaNacimiento = args.fechaNacimiento;
    }
    if (args.direccion !== undefined && args.direccion !== null) {
      this.direccion = args.direccion;
    }
    if (args.amigoTeatro !== undefined && args.amigoTeatro !== null) {
      this.amigoTeatro = args.amigoTeatro;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
  }
};
CRUDServer_insertUsuarioCliente_args.prototype = {};
CRUDServer_insertUsuarioCliente_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nombres = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.usuario = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.cedula = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sexo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.correo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.celular = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.contrasena = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.fechaNacimiento = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.direccion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.amigoTeatro = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertUsuarioCliente_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertUsuarioCliente_args');
  if (this.nombres !== null && this.nombres !== undefined) {
    output.writeFieldBegin('nombres', Thrift.Type.STRING, 1);
    output.writeString(this.nombres);
    output.writeFieldEnd();
  }
  if (this.usuario !== null && this.usuario !== undefined) {
    output.writeFieldBegin('usuario', Thrift.Type.STRING, 2);
    output.writeString(this.usuario);
    output.writeFieldEnd();
  }
  if (this.cedula !== null && this.cedula !== undefined) {
    output.writeFieldBegin('cedula', Thrift.Type.STRING, 3);
    output.writeString(this.cedula);
    output.writeFieldEnd();
  }
  if (this.sexo !== null && this.sexo !== undefined) {
    output.writeFieldBegin('sexo', Thrift.Type.STRING, 4);
    output.writeString(this.sexo);
    output.writeFieldEnd();
  }
  if (this.correo !== null && this.correo !== undefined) {
    output.writeFieldBegin('correo', Thrift.Type.STRING, 5);
    output.writeString(this.correo);
    output.writeFieldEnd();
  }
  if (this.celular !== null && this.celular !== undefined) {
    output.writeFieldBegin('celular', Thrift.Type.STRING, 6);
    output.writeString(this.celular);
    output.writeFieldEnd();
  }
  if (this.contrasena !== null && this.contrasena !== undefined) {
    output.writeFieldBegin('contrasena', Thrift.Type.STRING, 7);
    output.writeString(this.contrasena);
    output.writeFieldEnd();
  }
  if (this.fechaNacimiento !== null && this.fechaNacimiento !== undefined) {
    output.writeFieldBegin('fechaNacimiento', Thrift.Type.STRING, 8);
    output.writeString(this.fechaNacimiento);
    output.writeFieldEnd();
  }
  if (this.direccion !== null && this.direccion !== undefined) {
    output.writeFieldBegin('direccion', Thrift.Type.STRING, 9);
    output.writeString(this.direccion);
    output.writeFieldEnd();
  }
  if (this.amigoTeatro !== null && this.amigoTeatro !== undefined) {
    output.writeFieldBegin('amigoTeatro', Thrift.Type.STRING, 10);
    output.writeString(this.amigoTeatro);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 11);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertUsuarioCliente_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_insertUsuarioCliente_result.prototype = {};
CRUDServer_insertUsuarioCliente_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertUsuarioCliente_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertUsuarioCliente_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getUsuarioEvento_args = function(args) {
  this.idUsuarioEvento = null;
  if (args) {
    if (args.idUsuarioEvento !== undefined && args.idUsuarioEvento !== null) {
      this.idUsuarioEvento = args.idUsuarioEvento;
    }
  }
};
CRUDServer_getUsuarioEvento_args.prototype = {};
CRUDServer_getUsuarioEvento_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.idUsuarioEvento = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getUsuarioEvento_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getUsuarioEvento_args');
  if (this.idUsuarioEvento !== null && this.idUsuarioEvento !== undefined) {
    output.writeFieldBegin('idUsuarioEvento', Thrift.Type.STRING, 1);
    output.writeString(this.idUsuarioEvento);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getUsuarioEvento_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getUsuarioEvento_result.prototype = {};
CRUDServer_getUsuarioEvento_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getUsuarioEvento_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getUsuarioEvento_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllUsuarioEvento_args = function(args) {
};
CRUDServer_getAllUsuarioEvento_args.prototype = {};
CRUDServer_getAllUsuarioEvento_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllUsuarioEvento_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllUsuarioEvento_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_getAllUsuarioEvento_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_getAllUsuarioEvento_result.prototype = {};
CRUDServer_getAllUsuarioEvento_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_getAllUsuarioEvento_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_getAllUsuarioEvento_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateUsuarioEvento_args = function(args) {
  this.nombres = null;
  this.usuario = null;
  this.cedula = null;
  this.sexo = null;
  this.correo = null;
  this.celular = null;
  this.contrasena = null;
  this.perfil = null;
  this.fechaNacimiento = null;
  this.direccion = null;
  this.estado = null;
  this.idUsuarioEvento = null;
  if (args) {
    if (args.nombres !== undefined && args.nombres !== null) {
      this.nombres = args.nombres;
    }
    if (args.usuario !== undefined && args.usuario !== null) {
      this.usuario = args.usuario;
    }
    if (args.cedula !== undefined && args.cedula !== null) {
      this.cedula = args.cedula;
    }
    if (args.sexo !== undefined && args.sexo !== null) {
      this.sexo = args.sexo;
    }
    if (args.correo !== undefined && args.correo !== null) {
      this.correo = args.correo;
    }
    if (args.celular !== undefined && args.celular !== null) {
      this.celular = args.celular;
    }
    if (args.contrasena !== undefined && args.contrasena !== null) {
      this.contrasena = args.contrasena;
    }
    if (args.perfil !== undefined && args.perfil !== null) {
      this.perfil = args.perfil;
    }
    if (args.fechaNacimiento !== undefined && args.fechaNacimiento !== null) {
      this.fechaNacimiento = args.fechaNacimiento;
    }
    if (args.direccion !== undefined && args.direccion !== null) {
      this.direccion = args.direccion;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
    if (args.idUsuarioEvento !== undefined && args.idUsuarioEvento !== null) {
      this.idUsuarioEvento = args.idUsuarioEvento;
    }
  }
};
CRUDServer_updateUsuarioEvento_args.prototype = {};
CRUDServer_updateUsuarioEvento_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nombres = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.usuario = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.cedula = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sexo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.correo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.celular = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.contrasena = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.perfil = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.fechaNacimiento = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.direccion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.idUsuarioEvento = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateUsuarioEvento_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateUsuarioEvento_args');
  if (this.nombres !== null && this.nombres !== undefined) {
    output.writeFieldBegin('nombres', Thrift.Type.STRING, 1);
    output.writeString(this.nombres);
    output.writeFieldEnd();
  }
  if (this.usuario !== null && this.usuario !== undefined) {
    output.writeFieldBegin('usuario', Thrift.Type.STRING, 2);
    output.writeString(this.usuario);
    output.writeFieldEnd();
  }
  if (this.cedula !== null && this.cedula !== undefined) {
    output.writeFieldBegin('cedula', Thrift.Type.STRING, 3);
    output.writeString(this.cedula);
    output.writeFieldEnd();
  }
  if (this.sexo !== null && this.sexo !== undefined) {
    output.writeFieldBegin('sexo', Thrift.Type.STRING, 4);
    output.writeString(this.sexo);
    output.writeFieldEnd();
  }
  if (this.correo !== null && this.correo !== undefined) {
    output.writeFieldBegin('correo', Thrift.Type.STRING, 5);
    output.writeString(this.correo);
    output.writeFieldEnd();
  }
  if (this.celular !== null && this.celular !== undefined) {
    output.writeFieldBegin('celular', Thrift.Type.STRING, 6);
    output.writeString(this.celular);
    output.writeFieldEnd();
  }
  if (this.contrasena !== null && this.contrasena !== undefined) {
    output.writeFieldBegin('contrasena', Thrift.Type.STRING, 7);
    output.writeString(this.contrasena);
    output.writeFieldEnd();
  }
  if (this.perfil !== null && this.perfil !== undefined) {
    output.writeFieldBegin('perfil', Thrift.Type.STRING, 8);
    output.writeString(this.perfil);
    output.writeFieldEnd();
  }
  if (this.fechaNacimiento !== null && this.fechaNacimiento !== undefined) {
    output.writeFieldBegin('fechaNacimiento', Thrift.Type.STRING, 9);
    output.writeString(this.fechaNacimiento);
    output.writeFieldEnd();
  }
  if (this.direccion !== null && this.direccion !== undefined) {
    output.writeFieldBegin('direccion', Thrift.Type.STRING, 10);
    output.writeString(this.direccion);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 11);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  if (this.idUsuarioEvento !== null && this.idUsuarioEvento !== undefined) {
    output.writeFieldBegin('idUsuarioEvento', Thrift.Type.STRING, 12);
    output.writeString(this.idUsuarioEvento);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_updateUsuarioEvento_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_updateUsuarioEvento_result.prototype = {};
CRUDServer_updateUsuarioEvento_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_updateUsuarioEvento_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_updateUsuarioEvento_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertUsuarioEvento_args = function(args) {
  this.nombres = null;
  this.usuario = null;
  this.cedula = null;
  this.sexo = null;
  this.correo = null;
  this.celular = null;
  this.contrasena = null;
  this.perfil = null;
  this.fechaNacimiento = null;
  this.direccion = null;
  this.estado = null;
  if (args) {
    if (args.nombres !== undefined && args.nombres !== null) {
      this.nombres = args.nombres;
    }
    if (args.usuario !== undefined && args.usuario !== null) {
      this.usuario = args.usuario;
    }
    if (args.cedula !== undefined && args.cedula !== null) {
      this.cedula = args.cedula;
    }
    if (args.sexo !== undefined && args.sexo !== null) {
      this.sexo = args.sexo;
    }
    if (args.correo !== undefined && args.correo !== null) {
      this.correo = args.correo;
    }
    if (args.celular !== undefined && args.celular !== null) {
      this.celular = args.celular;
    }
    if (args.contrasena !== undefined && args.contrasena !== null) {
      this.contrasena = args.contrasena;
    }
    if (args.perfil !== undefined && args.perfil !== null) {
      this.perfil = args.perfil;
    }
    if (args.fechaNacimiento !== undefined && args.fechaNacimiento !== null) {
      this.fechaNacimiento = args.fechaNacimiento;
    }
    if (args.direccion !== undefined && args.direccion !== null) {
      this.direccion = args.direccion;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
  }
};
CRUDServer_insertUsuarioEvento_args.prototype = {};
CRUDServer_insertUsuarioEvento_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nombres = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.usuario = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.cedula = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sexo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.correo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.celular = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.contrasena = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.perfil = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.fechaNacimiento = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.direccion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.estado = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertUsuarioEvento_args.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertUsuarioEvento_args');
  if (this.nombres !== null && this.nombres !== undefined) {
    output.writeFieldBegin('nombres', Thrift.Type.STRING, 1);
    output.writeString(this.nombres);
    output.writeFieldEnd();
  }
  if (this.usuario !== null && this.usuario !== undefined) {
    output.writeFieldBegin('usuario', Thrift.Type.STRING, 2);
    output.writeString(this.usuario);
    output.writeFieldEnd();
  }
  if (this.cedula !== null && this.cedula !== undefined) {
    output.writeFieldBegin('cedula', Thrift.Type.STRING, 3);
    output.writeString(this.cedula);
    output.writeFieldEnd();
  }
  if (this.sexo !== null && this.sexo !== undefined) {
    output.writeFieldBegin('sexo', Thrift.Type.STRING, 4);
    output.writeString(this.sexo);
    output.writeFieldEnd();
  }
  if (this.correo !== null && this.correo !== undefined) {
    output.writeFieldBegin('correo', Thrift.Type.STRING, 5);
    output.writeString(this.correo);
    output.writeFieldEnd();
  }
  if (this.celular !== null && this.celular !== undefined) {
    output.writeFieldBegin('celular', Thrift.Type.STRING, 6);
    output.writeString(this.celular);
    output.writeFieldEnd();
  }
  if (this.contrasena !== null && this.contrasena !== undefined) {
    output.writeFieldBegin('contrasena', Thrift.Type.STRING, 7);
    output.writeString(this.contrasena);
    output.writeFieldEnd();
  }
  if (this.perfil !== null && this.perfil !== undefined) {
    output.writeFieldBegin('perfil', Thrift.Type.STRING, 8);
    output.writeString(this.perfil);
    output.writeFieldEnd();
  }
  if (this.fechaNacimiento !== null && this.fechaNacimiento !== undefined) {
    output.writeFieldBegin('fechaNacimiento', Thrift.Type.STRING, 9);
    output.writeString(this.fechaNacimiento);
    output.writeFieldEnd();
  }
  if (this.direccion !== null && this.direccion !== undefined) {
    output.writeFieldBegin('direccion', Thrift.Type.STRING, 10);
    output.writeString(this.direccion);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.STRING, 11);
    output.writeString(this.estado);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServer_insertUsuarioEvento_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRUDServer_insertUsuarioEvento_result.prototype = {};
CRUDServer_insertUsuarioEvento_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRUDServer_insertUsuarioEvento_result.prototype.write = function(output) {
  output.writeStructBegin('CRUDServer_insertUsuarioEvento_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CRUDServerClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
CRUDServerClient.prototype = {};
CRUDServerClient.prototype.getAsiento = function(idAsiento, callback) {
  if (callback === undefined) {
    this.send_getAsiento(idAsiento);
    return this.recv_getAsiento();
  } else {
    var postData = this.send_getAsiento(idAsiento, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAsiento);
  }
};

CRUDServerClient.prototype.send_getAsiento = function(idAsiento, callback) {
  this.output.writeMessageBegin('getAsiento', Thrift.MessageType.CALL, this.seqid);
  var params = {
    idAsiento: idAsiento
  };
  var args = new CRUDServer_getAsiento_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getAsiento = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getAsiento_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getAsiento failed: unknown result';
};
CRUDServerClient.prototype.getAllAsiento = function(callback) {
  if (callback === undefined) {
    this.send_getAllAsiento();
    return this.recv_getAllAsiento();
  } else {
    var postData = this.send_getAllAsiento(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllAsiento);
  }
};

CRUDServerClient.prototype.send_getAllAsiento = function(callback) {
  this.output.writeMessageBegin('getAllAsiento', Thrift.MessageType.CALL, this.seqid);
  var args = new CRUDServer_getAllAsiento_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getAllAsiento = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getAllAsiento_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllAsiento failed: unknown result';
};
CRUDServerClient.prototype.updateAsiento = function(numero, fila, lateral, estado, idAsiento, callback) {
  if (callback === undefined) {
    this.send_updateAsiento(numero, fila, lateral, estado, idAsiento);
    return this.recv_updateAsiento();
  } else {
    var postData = this.send_updateAsiento(numero, fila, lateral, estado, idAsiento, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_updateAsiento);
  }
};

CRUDServerClient.prototype.send_updateAsiento = function(numero, fila, lateral, estado, idAsiento, callback) {
  this.output.writeMessageBegin('updateAsiento', Thrift.MessageType.CALL, this.seqid);
  var params = {
    numero: numero,
    fila: fila,
    lateral: lateral,
    estado: estado,
    idAsiento: idAsiento
  };
  var args = new CRUDServer_updateAsiento_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_updateAsiento = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_updateAsiento_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'updateAsiento failed: unknown result';
};
CRUDServerClient.prototype.insertAsiento = function(numero, fila, lateral, estado, callback) {
  if (callback === undefined) {
    this.send_insertAsiento(numero, fila, lateral, estado);
    return this.recv_insertAsiento();
  } else {
    var postData = this.send_insertAsiento(numero, fila, lateral, estado, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_insertAsiento);
  }
};

CRUDServerClient.prototype.send_insertAsiento = function(numero, fila, lateral, estado, callback) {
  this.output.writeMessageBegin('insertAsiento', Thrift.MessageType.CALL, this.seqid);
  var params = {
    numero: numero,
    fila: fila,
    lateral: lateral,
    estado: estado
  };
  var args = new CRUDServer_insertAsiento_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_insertAsiento = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_insertAsiento_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'insertAsiento failed: unknown result';
};
CRUDServerClient.prototype.getBanco = function(idBanco, callback) {
  if (callback === undefined) {
    this.send_getBanco(idBanco);
    return this.recv_getBanco();
  } else {
    var postData = this.send_getBanco(idBanco, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getBanco);
  }
};

CRUDServerClient.prototype.send_getBanco = function(idBanco, callback) {
  this.output.writeMessageBegin('getBanco', Thrift.MessageType.CALL, this.seqid);
  var params = {
    idBanco: idBanco
  };
  var args = new CRUDServer_getBanco_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getBanco = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getBanco_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getBanco failed: unknown result';
};
CRUDServerClient.prototype.getAllBanco = function(callback) {
  if (callback === undefined) {
    this.send_getAllBanco();
    return this.recv_getAllBanco();
  } else {
    var postData = this.send_getAllBanco(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllBanco);
  }
};

CRUDServerClient.prototype.send_getAllBanco = function(callback) {
  this.output.writeMessageBegin('getAllBanco', Thrift.MessageType.CALL, this.seqid);
  var args = new CRUDServer_getAllBanco_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getAllBanco = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getAllBanco_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllBanco failed: unknown result';
};
CRUDServerClient.prototype.updateBanco = function(nombre, estado, idBanco, callback) {
  if (callback === undefined) {
    this.send_updateBanco(nombre, estado, idBanco);
    return this.recv_updateBanco();
  } else {
    var postData = this.send_updateBanco(nombre, estado, idBanco, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_updateBanco);
  }
};

CRUDServerClient.prototype.send_updateBanco = function(nombre, estado, idBanco, callback) {
  this.output.writeMessageBegin('updateBanco', Thrift.MessageType.CALL, this.seqid);
  var params = {
    nombre: nombre,
    estado: estado,
    idBanco: idBanco
  };
  var args = new CRUDServer_updateBanco_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_updateBanco = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_updateBanco_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'updateBanco failed: unknown result';
};
CRUDServerClient.prototype.insertBanco = function(nombre, estado, callback) {
  if (callback === undefined) {
    this.send_insertBanco(nombre, estado);
    return this.recv_insertBanco();
  } else {
    var postData = this.send_insertBanco(nombre, estado, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_insertBanco);
  }
};

CRUDServerClient.prototype.send_insertBanco = function(nombre, estado, callback) {
  this.output.writeMessageBegin('insertBanco', Thrift.MessageType.CALL, this.seqid);
  var params = {
    nombre: nombre,
    estado: estado
  };
  var args = new CRUDServer_insertBanco_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_insertBanco = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_insertBanco_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'insertBanco failed: unknown result';
};
CRUDServerClient.prototype.getBancoTarjeta = function(idBancoTarjeta, callback) {
  if (callback === undefined) {
    this.send_getBancoTarjeta(idBancoTarjeta);
    return this.recv_getBancoTarjeta();
  } else {
    var postData = this.send_getBancoTarjeta(idBancoTarjeta, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getBancoTarjeta);
  }
};

CRUDServerClient.prototype.send_getBancoTarjeta = function(idBancoTarjeta, callback) {
  this.output.writeMessageBegin('getBancoTarjeta', Thrift.MessageType.CALL, this.seqid);
  var params = {
    idBancoTarjeta: idBancoTarjeta
  };
  var args = new CRUDServer_getBancoTarjeta_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getBancoTarjeta = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getBancoTarjeta_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getBancoTarjeta failed: unknown result';
};
CRUDServerClient.prototype.getAllBancoTarjeta = function(callback) {
  if (callback === undefined) {
    this.send_getAllBancoTarjeta();
    return this.recv_getAllBancoTarjeta();
  } else {
    var postData = this.send_getAllBancoTarjeta(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllBancoTarjeta);
  }
};

CRUDServerClient.prototype.send_getAllBancoTarjeta = function(callback) {
  this.output.writeMessageBegin('getAllBancoTarjeta', Thrift.MessageType.CALL, this.seqid);
  var args = new CRUDServer_getAllBancoTarjeta_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getAllBancoTarjeta = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getAllBancoTarjeta_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllBancoTarjeta failed: unknown result';
};
CRUDServerClient.prototype.updateBancoTarjeta = function(idBanco, idTarjeta, descuento, estado, idBancoTarjeta, callback) {
  if (callback === undefined) {
    this.send_updateBancoTarjeta(idBanco, idTarjeta, descuento, estado, idBancoTarjeta);
    return this.recv_updateBancoTarjeta();
  } else {
    var postData = this.send_updateBancoTarjeta(idBanco, idTarjeta, descuento, estado, idBancoTarjeta, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_updateBancoTarjeta);
  }
};

CRUDServerClient.prototype.send_updateBancoTarjeta = function(idBanco, idTarjeta, descuento, estado, idBancoTarjeta, callback) {
  this.output.writeMessageBegin('updateBancoTarjeta', Thrift.MessageType.CALL, this.seqid);
  var params = {
    idBanco: idBanco,
    idTarjeta: idTarjeta,
    descuento: descuento,
    estado: estado,
    idBancoTarjeta: idBancoTarjeta
  };
  var args = new CRUDServer_updateBancoTarjeta_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_updateBancoTarjeta = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_updateBancoTarjeta_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'updateBancoTarjeta failed: unknown result';
};
CRUDServerClient.prototype.insertBancoTarjeta = function(idBanco, idTarjeta, descuento, estado, callback) {
  if (callback === undefined) {
    this.send_insertBancoTarjeta(idBanco, idTarjeta, descuento, estado);
    return this.recv_insertBancoTarjeta();
  } else {
    var postData = this.send_insertBancoTarjeta(idBanco, idTarjeta, descuento, estado, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_insertBancoTarjeta);
  }
};

CRUDServerClient.prototype.send_insertBancoTarjeta = function(idBanco, idTarjeta, descuento, estado, callback) {
  this.output.writeMessageBegin('insertBancoTarjeta', Thrift.MessageType.CALL, this.seqid);
  var params = {
    idBanco: idBanco,
    idTarjeta: idTarjeta,
    descuento: descuento,
    estado: estado
  };
  var args = new CRUDServer_insertBancoTarjeta_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_insertBancoTarjeta = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_insertBancoTarjeta_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'insertBancoTarjeta failed: unknown result';
};
CRUDServerClient.prototype.getCategoria = function(idCategoria, callback) {
  if (callback === undefined) {
    this.send_getCategoria(idCategoria);
    return this.recv_getCategoria();
  } else {
    var postData = this.send_getCategoria(idCategoria, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getCategoria);
  }
};

CRUDServerClient.prototype.send_getCategoria = function(idCategoria, callback) {
  this.output.writeMessageBegin('getCategoria', Thrift.MessageType.CALL, this.seqid);
  var params = {
    idCategoria: idCategoria
  };
  var args = new CRUDServer_getCategoria_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getCategoria = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getCategoria_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getCategoria failed: unknown result';
};
CRUDServerClient.prototype.getAllCategoria = function(callback) {
  if (callback === undefined) {
    this.send_getAllCategoria();
    return this.recv_getAllCategoria();
  } else {
    var postData = this.send_getAllCategoria(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllCategoria);
  }
};

CRUDServerClient.prototype.send_getAllCategoria = function(callback) {
  this.output.writeMessageBegin('getAllCategoria', Thrift.MessageType.CALL, this.seqid);
  var args = new CRUDServer_getAllCategoria_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getAllCategoria = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getAllCategoria_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllCategoria failed: unknown result';
};
CRUDServerClient.prototype.updateCategoria = function(nombre, descripcion, estado, idCategoria, callback) {
  if (callback === undefined) {
    this.send_updateCategoria(nombre, descripcion, estado, idCategoria);
    return this.recv_updateCategoria();
  } else {
    var postData = this.send_updateCategoria(nombre, descripcion, estado, idCategoria, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_updateCategoria);
  }
};

CRUDServerClient.prototype.send_updateCategoria = function(nombre, descripcion, estado, idCategoria, callback) {
  this.output.writeMessageBegin('updateCategoria', Thrift.MessageType.CALL, this.seqid);
  var params = {
    nombre: nombre,
    descripcion: descripcion,
    estado: estado,
    idCategoria: idCategoria
  };
  var args = new CRUDServer_updateCategoria_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_updateCategoria = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_updateCategoria_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'updateCategoria failed: unknown result';
};
CRUDServerClient.prototype.insertCategoria = function(nombre, descripcion, estado, callback) {
  if (callback === undefined) {
    this.send_insertCategoria(nombre, descripcion, estado);
    return this.recv_insertCategoria();
  } else {
    var postData = this.send_insertCategoria(nombre, descripcion, estado, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_insertCategoria);
  }
};

CRUDServerClient.prototype.send_insertCategoria = function(nombre, descripcion, estado, callback) {
  this.output.writeMessageBegin('insertCategoria', Thrift.MessageType.CALL, this.seqid);
  var params = {
    nombre: nombre,
    descripcion: descripcion,
    estado: estado
  };
  var args = new CRUDServer_insertCategoria_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_insertCategoria = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_insertCategoria_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'insertCategoria failed: unknown result';
};
CRUDServerClient.prototype.getClasificacion = function(idClasificacion, callback) {
  if (callback === undefined) {
    this.send_getClasificacion(idClasificacion);
    return this.recv_getClasificacion();
  } else {
    var postData = this.send_getClasificacion(idClasificacion, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getClasificacion);
  }
};

CRUDServerClient.prototype.send_getClasificacion = function(idClasificacion, callback) {
  this.output.writeMessageBegin('getClasificacion', Thrift.MessageType.CALL, this.seqid);
  var params = {
    idClasificacion: idClasificacion
  };
  var args = new CRUDServer_getClasificacion_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getClasificacion = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getClasificacion_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getClasificacion failed: unknown result';
};
CRUDServerClient.prototype.getAllClasificacion = function(callback) {
  if (callback === undefined) {
    this.send_getAllClasificacion();
    return this.recv_getAllClasificacion();
  } else {
    var postData = this.send_getAllClasificacion(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllClasificacion);
  }
};

CRUDServerClient.prototype.send_getAllClasificacion = function(callback) {
  this.output.writeMessageBegin('getAllClasificacion', Thrift.MessageType.CALL, this.seqid);
  var args = new CRUDServer_getAllClasificacion_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getAllClasificacion = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getAllClasificacion_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllClasificacion failed: unknown result';
};
CRUDServerClient.prototype.updateClasificacion = function(nombre, descripcion, estado, idClasificacion, callback) {
  if (callback === undefined) {
    this.send_updateClasificacion(nombre, descripcion, estado, idClasificacion);
    return this.recv_updateClasificacion();
  } else {
    var postData = this.send_updateClasificacion(nombre, descripcion, estado, idClasificacion, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_updateClasificacion);
  }
};

CRUDServerClient.prototype.send_updateClasificacion = function(nombre, descripcion, estado, idClasificacion, callback) {
  this.output.writeMessageBegin('updateClasificacion', Thrift.MessageType.CALL, this.seqid);
  var params = {
    nombre: nombre,
    descripcion: descripcion,
    estado: estado,
    idClasificacion: idClasificacion
  };
  var args = new CRUDServer_updateClasificacion_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_updateClasificacion = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_updateClasificacion_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'updateClasificacion failed: unknown result';
};
CRUDServerClient.prototype.insertClasificacion = function(nombre, descripcion, estado, callback) {
  if (callback === undefined) {
    this.send_insertClasificacion(nombre, descripcion, estado);
    return this.recv_insertClasificacion();
  } else {
    var postData = this.send_insertClasificacion(nombre, descripcion, estado, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_insertClasificacion);
  }
};

CRUDServerClient.prototype.send_insertClasificacion = function(nombre, descripcion, estado, callback) {
  this.output.writeMessageBegin('insertClasificacion', Thrift.MessageType.CALL, this.seqid);
  var params = {
    nombre: nombre,
    descripcion: descripcion,
    estado: estado
  };
  var args = new CRUDServer_insertClasificacion_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_insertClasificacion = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_insertClasificacion_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'insertClasificacion failed: unknown result';
};
CRUDServerClient.prototype.getCodigoPromocional = function(idCodigoPromocional, callback) {
  if (callback === undefined) {
    this.send_getCodigoPromocional(idCodigoPromocional);
    return this.recv_getCodigoPromocional();
  } else {
    var postData = this.send_getCodigoPromocional(idCodigoPromocional, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getCodigoPromocional);
  }
};

CRUDServerClient.prototype.send_getCodigoPromocional = function(idCodigoPromocional, callback) {
  this.output.writeMessageBegin('getCodigoPromocional', Thrift.MessageType.CALL, this.seqid);
  var params = {
    idCodigoPromocional: idCodigoPromocional
  };
  var args = new CRUDServer_getCodigoPromocional_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getCodigoPromocional = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getCodigoPromocional_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getCodigoPromocional failed: unknown result';
};
CRUDServerClient.prototype.getAllCodigoPromocional = function(callback) {
  if (callback === undefined) {
    this.send_getAllCodigoPromocional();
    return this.recv_getAllCodigoPromocional();
  } else {
    var postData = this.send_getAllCodigoPromocional(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllCodigoPromocional);
  }
};

CRUDServerClient.prototype.send_getAllCodigoPromocional = function(callback) {
  this.output.writeMessageBegin('getAllCodigoPromocional', Thrift.MessageType.CALL, this.seqid);
  var args = new CRUDServer_getAllCodigoPromocional_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getAllCodigoPromocional = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getAllCodigoPromocional_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllCodigoPromocional failed: unknown result';
};
CRUDServerClient.prototype.updateCodigoPromocional = function(nombre, codigo, descuento, estado, idCodigoPromocional, callback) {
  if (callback === undefined) {
    this.send_updateCodigoPromocional(nombre, codigo, descuento, estado, idCodigoPromocional);
    return this.recv_updateCodigoPromocional();
  } else {
    var postData = this.send_updateCodigoPromocional(nombre, codigo, descuento, estado, idCodigoPromocional, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_updateCodigoPromocional);
  }
};

CRUDServerClient.prototype.send_updateCodigoPromocional = function(nombre, codigo, descuento, estado, idCodigoPromocional, callback) {
  this.output.writeMessageBegin('updateCodigoPromocional', Thrift.MessageType.CALL, this.seqid);
  var params = {
    nombre: nombre,
    codigo: codigo,
    descuento: descuento,
    estado: estado,
    idCodigoPromocional: idCodigoPromocional
  };
  var args = new CRUDServer_updateCodigoPromocional_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_updateCodigoPromocional = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_updateCodigoPromocional_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'updateCodigoPromocional failed: unknown result';
};
CRUDServerClient.prototype.insertCodigoPromocional = function(nombre, codigo, descuento, estado, callback) {
  if (callback === undefined) {
    this.send_insertCodigoPromocional(nombre, codigo, descuento, estado);
    return this.recv_insertCodigoPromocional();
  } else {
    var postData = this.send_insertCodigoPromocional(nombre, codigo, descuento, estado, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_insertCodigoPromocional);
  }
};

CRUDServerClient.prototype.send_insertCodigoPromocional = function(nombre, codigo, descuento, estado, callback) {
  this.output.writeMessageBegin('insertCodigoPromocional', Thrift.MessageType.CALL, this.seqid);
  var params = {
    nombre: nombre,
    codigo: codigo,
    descuento: descuento,
    estado: estado
  };
  var args = new CRUDServer_insertCodigoPromocional_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_insertCodigoPromocional = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_insertCodigoPromocional_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'insertCodigoPromocional failed: unknown result';
};
CRUDServerClient.prototype.getDistribucion = function(idDistribucion, callback) {
  if (callback === undefined) {
    this.send_getDistribucion(idDistribucion);
    return this.recv_getDistribucion();
  } else {
    var postData = this.send_getDistribucion(idDistribucion, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getDistribucion);
  }
};

CRUDServerClient.prototype.send_getDistribucion = function(idDistribucion, callback) {
  this.output.writeMessageBegin('getDistribucion', Thrift.MessageType.CALL, this.seqid);
  var params = {
    idDistribucion: idDistribucion
  };
  var args = new CRUDServer_getDistribucion_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getDistribucion = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getDistribucion_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getDistribucion failed: unknown result';
};
CRUDServerClient.prototype.getAllDistribucion = function(callback) {
  if (callback === undefined) {
    this.send_getAllDistribucion();
    return this.recv_getAllDistribucion();
  } else {
    var postData = this.send_getAllDistribucion(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllDistribucion);
  }
};

CRUDServerClient.prototype.send_getAllDistribucion = function(callback) {
  this.output.writeMessageBegin('getAllDistribucion', Thrift.MessageType.CALL, this.seqid);
  var args = new CRUDServer_getAllDistribucion_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getAllDistribucion = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getAllDistribucion_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllDistribucion failed: unknown result';
};
CRUDServerClient.prototype.updateDistribucion = function(idEvento, idPlatea, idAsiento, tipo, estado, idDistribucion, callback) {
  if (callback === undefined) {
    this.send_updateDistribucion(idEvento, idPlatea, idAsiento, tipo, estado, idDistribucion);
    return this.recv_updateDistribucion();
  } else {
    var postData = this.send_updateDistribucion(idEvento, idPlatea, idAsiento, tipo, estado, idDistribucion, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_updateDistribucion);
  }
};

CRUDServerClient.prototype.send_updateDistribucion = function(idEvento, idPlatea, idAsiento, tipo, estado, idDistribucion, callback) {
  this.output.writeMessageBegin('updateDistribucion', Thrift.MessageType.CALL, this.seqid);
  var params = {
    idEvento: idEvento,
    idPlatea: idPlatea,
    idAsiento: idAsiento,
    tipo: tipo,
    estado: estado,
    idDistribucion: idDistribucion
  };
  var args = new CRUDServer_updateDistribucion_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_updateDistribucion = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_updateDistribucion_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'updateDistribucion failed: unknown result';
};
CRUDServerClient.prototype.insertDistribucion = function(idEvento, idPlatea, idAsiento, tipo, estado, callback) {
  if (callback === undefined) {
    this.send_insertDistribucion(idEvento, idPlatea, idAsiento, tipo, estado);
    return this.recv_insertDistribucion();
  } else {
    var postData = this.send_insertDistribucion(idEvento, idPlatea, idAsiento, tipo, estado, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_insertDistribucion);
  }
};

CRUDServerClient.prototype.send_insertDistribucion = function(idEvento, idPlatea, idAsiento, tipo, estado, callback) {
  this.output.writeMessageBegin('insertDistribucion', Thrift.MessageType.CALL, this.seqid);
  var params = {
    idEvento: idEvento,
    idPlatea: idPlatea,
    idAsiento: idAsiento,
    tipo: tipo,
    estado: estado
  };
  var args = new CRUDServer_insertDistribucion_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_insertDistribucion = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_insertDistribucion_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'insertDistribucion failed: unknown result';
};
CRUDServerClient.prototype.getEvento = function(idEvento, callback) {
  if (callback === undefined) {
    this.send_getEvento(idEvento);
    return this.recv_getEvento();
  } else {
    var postData = this.send_getEvento(idEvento, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getEvento);
  }
};

CRUDServerClient.prototype.send_getEvento = function(idEvento, callback) {
  this.output.writeMessageBegin('getEvento', Thrift.MessageType.CALL, this.seqid);
  var params = {
    idEvento: idEvento
  };
  var args = new CRUDServer_getEvento_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getEvento = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getEvento_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getEvento failed: unknown result';
};
CRUDServerClient.prototype.getAllEvento = function(callback) {
  if (callback === undefined) {
    this.send_getAllEvento();
    return this.recv_getAllEvento();
  } else {
    var postData = this.send_getAllEvento(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllEvento);
  }
};

CRUDServerClient.prototype.send_getAllEvento = function(callback) {
  this.output.writeMessageBegin('getAllEvento', Thrift.MessageType.CALL, this.seqid);
  var args = new CRUDServer_getAllEvento_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getAllEvento = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getAllEvento_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllEvento failed: unknown result';
};
CRUDServerClient.prototype.updateEvento = function(nombre, duracion, fechaInicial, fechaFinal, idProductora, idSalaMapa, idTipoEvento, idTipoEspectaculo, idCategoria, idClasificacion, idProcedencia, idTipoPrecio, idFuncion, idPrecio, eventoDestacado, eventoOrden, aforo, sinopsis, productora, elenco, rutaImagen, rutaVideo, tipoEvento, rutaFormulario, estado, idEvento, callback) {
  if (callback === undefined) {
    this.send_updateEvento(nombre, duracion, fechaInicial, fechaFinal, idProductora, idSalaMapa, idTipoEvento, idTipoEspectaculo, idCategoria, idClasificacion, idProcedencia, idTipoPrecio, idFuncion, idPrecio, eventoDestacado, eventoOrden, aforo, sinopsis, productora, elenco, rutaImagen, rutaVideo, tipoEvento, rutaFormulario, estado, idEvento);
    return this.recv_updateEvento();
  } else {
    var postData = this.send_updateEvento(nombre, duracion, fechaInicial, fechaFinal, idProductora, idSalaMapa, idTipoEvento, idTipoEspectaculo, idCategoria, idClasificacion, idProcedencia, idTipoPrecio, idFuncion, idPrecio, eventoDestacado, eventoOrden, aforo, sinopsis, productora, elenco, rutaImagen, rutaVideo, tipoEvento, rutaFormulario, estado, idEvento, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_updateEvento);
  }
};

CRUDServerClient.prototype.send_updateEvento = function(nombre, duracion, fechaInicial, fechaFinal, idProductora, idSalaMapa, idTipoEvento, idTipoEspectaculo, idCategoria, idClasificacion, idProcedencia, idTipoPrecio, idFuncion, idPrecio, eventoDestacado, eventoOrden, aforo, sinopsis, productora, elenco, rutaImagen, rutaVideo, tipoEvento, rutaFormulario, estado, idEvento, callback) {
  this.output.writeMessageBegin('updateEvento', Thrift.MessageType.CALL, this.seqid);
  var params = {
    nombre: nombre,
    duracion: duracion,
    fechaInicial: fechaInicial,
    fechaFinal: fechaFinal,
    idProductora: idProductora,
    idSalaMapa: idSalaMapa,
    idTipoEvento: idTipoEvento,
    idTipoEspectaculo: idTipoEspectaculo,
    idCategoria: idCategoria,
    idClasificacion: idClasificacion,
    idProcedencia: idProcedencia,
    idTipoPrecio: idTipoPrecio,
    idFuncion: idFuncion,
    idPrecio: idPrecio,
    eventoDestacado: eventoDestacado,
    eventoOrden: eventoOrden,
    aforo: aforo,
    sinopsis: sinopsis,
    productora: productora,
    elenco: elenco,
    rutaImagen: rutaImagen,
    rutaVideo: rutaVideo,
    tipoEvento: tipoEvento,
    rutaFormulario: rutaFormulario,
    estado: estado,
    idEvento: idEvento
  };
  var args = new CRUDServer_updateEvento_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_updateEvento = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_updateEvento_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'updateEvento failed: unknown result';
};
CRUDServerClient.prototype.insertEvento = function(nombre, duracion, fechaInicial, fechaFinal, idProductora, idSalaMapa, idTipoEvento, idTipoEspectaculo, idCategoria, idClasificacion, idProcedencia, idTipoPrecio, idFuncion, idPrecio, eventoDestacado, eventoOrden, aforo, sinopsis, productora, elenco, rutaImagen, rutaVideo, tipoEvento, rutaFormulario, estado, callback) {
  if (callback === undefined) {
    this.send_insertEvento(nombre, duracion, fechaInicial, fechaFinal, idProductora, idSalaMapa, idTipoEvento, idTipoEspectaculo, idCategoria, idClasificacion, idProcedencia, idTipoPrecio, idFuncion, idPrecio, eventoDestacado, eventoOrden, aforo, sinopsis, productora, elenco, rutaImagen, rutaVideo, tipoEvento, rutaFormulario, estado);
    return this.recv_insertEvento();
  } else {
    var postData = this.send_insertEvento(nombre, duracion, fechaInicial, fechaFinal, idProductora, idSalaMapa, idTipoEvento, idTipoEspectaculo, idCategoria, idClasificacion, idProcedencia, idTipoPrecio, idFuncion, idPrecio, eventoDestacado, eventoOrden, aforo, sinopsis, productora, elenco, rutaImagen, rutaVideo, tipoEvento, rutaFormulario, estado, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_insertEvento);
  }
};

CRUDServerClient.prototype.send_insertEvento = function(nombre, duracion, fechaInicial, fechaFinal, idProductora, idSalaMapa, idTipoEvento, idTipoEspectaculo, idCategoria, idClasificacion, idProcedencia, idTipoPrecio, idFuncion, idPrecio, eventoDestacado, eventoOrden, aforo, sinopsis, productora, elenco, rutaImagen, rutaVideo, tipoEvento, rutaFormulario, estado, callback) {
  this.output.writeMessageBegin('insertEvento', Thrift.MessageType.CALL, this.seqid);
  var params = {
    nombre: nombre,
    duracion: duracion,
    fechaInicial: fechaInicial,
    fechaFinal: fechaFinal,
    idProductora: idProductora,
    idSalaMapa: idSalaMapa,
    idTipoEvento: idTipoEvento,
    idTipoEspectaculo: idTipoEspectaculo,
    idCategoria: idCategoria,
    idClasificacion: idClasificacion,
    idProcedencia: idProcedencia,
    idTipoPrecio: idTipoPrecio,
    idFuncion: idFuncion,
    idPrecio: idPrecio,
    eventoDestacado: eventoDestacado,
    eventoOrden: eventoOrden,
    aforo: aforo,
    sinopsis: sinopsis,
    productora: productora,
    elenco: elenco,
    rutaImagen: rutaImagen,
    rutaVideo: rutaVideo,
    tipoEvento: tipoEvento,
    rutaFormulario: rutaFormulario,
    estado: estado
  };
  var args = new CRUDServer_insertEvento_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_insertEvento = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_insertEvento_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'insertEvento failed: unknown result';
};
CRUDServerClient.prototype.getFuncion = function(idFuncion, callback) {
  if (callback === undefined) {
    this.send_getFuncion(idFuncion);
    return this.recv_getFuncion();
  } else {
    var postData = this.send_getFuncion(idFuncion, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getFuncion);
  }
};

CRUDServerClient.prototype.send_getFuncion = function(idFuncion, callback) {
  this.output.writeMessageBegin('getFuncion', Thrift.MessageType.CALL, this.seqid);
  var params = {
    idFuncion: idFuncion
  };
  var args = new CRUDServer_getFuncion_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getFuncion = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getFuncion_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getFuncion failed: unknown result';
};
CRUDServerClient.prototype.getAllFuncion = function(callback) {
  if (callback === undefined) {
    this.send_getAllFuncion();
    return this.recv_getAllFuncion();
  } else {
    var postData = this.send_getAllFuncion(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllFuncion);
  }
};

CRUDServerClient.prototype.send_getAllFuncion = function(callback) {
  this.output.writeMessageBegin('getAllFuncion', Thrift.MessageType.CALL, this.seqid);
  var args = new CRUDServer_getAllFuncion_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getAllFuncion = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getAllFuncion_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllFuncion failed: unknown result';
};
CRUDServerClient.prototype.updateFuncion = function(fecha, hora, preventa, estreno, estado, idFuncion, callback) {
  if (callback === undefined) {
    this.send_updateFuncion(fecha, hora, preventa, estreno, estado, idFuncion);
    return this.recv_updateFuncion();
  } else {
    var postData = this.send_updateFuncion(fecha, hora, preventa, estreno, estado, idFuncion, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_updateFuncion);
  }
};

CRUDServerClient.prototype.send_updateFuncion = function(fecha, hora, preventa, estreno, estado, idFuncion, callback) {
  this.output.writeMessageBegin('updateFuncion', Thrift.MessageType.CALL, this.seqid);
  var params = {
    fecha: fecha,
    hora: hora,
    preventa: preventa,
    estreno: estreno,
    estado: estado,
    idFuncion: idFuncion
  };
  var args = new CRUDServer_updateFuncion_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_updateFuncion = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_updateFuncion_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'updateFuncion failed: unknown result';
};
CRUDServerClient.prototype.insertFuncion = function(fecha, hora, preventa, estreno, estado, callback) {
  if (callback === undefined) {
    this.send_insertFuncion(fecha, hora, preventa, estreno, estado);
    return this.recv_insertFuncion();
  } else {
    var postData = this.send_insertFuncion(fecha, hora, preventa, estreno, estado, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_insertFuncion);
  }
};

CRUDServerClient.prototype.send_insertFuncion = function(fecha, hora, preventa, estreno, estado, callback) {
  this.output.writeMessageBegin('insertFuncion', Thrift.MessageType.CALL, this.seqid);
  var params = {
    fecha: fecha,
    hora: hora,
    preventa: preventa,
    estreno: estreno,
    estado: estado
  };
  var args = new CRUDServer_insertFuncion_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_insertFuncion = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_insertFuncion_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'insertFuncion failed: unknown result';
};
CRUDServerClient.prototype.getMapa = function(idMapa, callback) {
  if (callback === undefined) {
    this.send_getMapa(idMapa);
    return this.recv_getMapa();
  } else {
    var postData = this.send_getMapa(idMapa, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getMapa);
  }
};

CRUDServerClient.prototype.send_getMapa = function(idMapa, callback) {
  this.output.writeMessageBegin('getMapa', Thrift.MessageType.CALL, this.seqid);
  var params = {
    idMapa: idMapa
  };
  var args = new CRUDServer_getMapa_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getMapa = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getMapa_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getMapa failed: unknown result';
};
CRUDServerClient.prototype.getAllMapa = function(callback) {
  if (callback === undefined) {
    this.send_getAllMapa();
    return this.recv_getAllMapa();
  } else {
    var postData = this.send_getAllMapa(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllMapa);
  }
};

CRUDServerClient.prototype.send_getAllMapa = function(callback) {
  this.output.writeMessageBegin('getAllMapa', Thrift.MessageType.CALL, this.seqid);
  var args = new CRUDServer_getAllMapa_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getAllMapa = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getAllMapa_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllMapa failed: unknown result';
};
CRUDServerClient.prototype.updateMapa = function(nombre, distribucion, rutaImagen, estado, idMapa, callback) {
  if (callback === undefined) {
    this.send_updateMapa(nombre, distribucion, rutaImagen, estado, idMapa);
    return this.recv_updateMapa();
  } else {
    var postData = this.send_updateMapa(nombre, distribucion, rutaImagen, estado, idMapa, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_updateMapa);
  }
};

CRUDServerClient.prototype.send_updateMapa = function(nombre, distribucion, rutaImagen, estado, idMapa, callback) {
  this.output.writeMessageBegin('updateMapa', Thrift.MessageType.CALL, this.seqid);
  var params = {
    nombre: nombre,
    distribucion: distribucion,
    rutaImagen: rutaImagen,
    estado: estado,
    idMapa: idMapa
  };
  var args = new CRUDServer_updateMapa_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_updateMapa = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_updateMapa_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'updateMapa failed: unknown result';
};
CRUDServerClient.prototype.insertMapa = function(nombre, distribucion, rutaImagen, estado, callback) {
  if (callback === undefined) {
    this.send_insertMapa(nombre, distribucion, rutaImagen, estado);
    return this.recv_insertMapa();
  } else {
    var postData = this.send_insertMapa(nombre, distribucion, rutaImagen, estado, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_insertMapa);
  }
};

CRUDServerClient.prototype.send_insertMapa = function(nombre, distribucion, rutaImagen, estado, callback) {
  this.output.writeMessageBegin('insertMapa', Thrift.MessageType.CALL, this.seqid);
  var params = {
    nombre: nombre,
    distribucion: distribucion,
    rutaImagen: rutaImagen,
    estado: estado
  };
  var args = new CRUDServer_insertMapa_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_insertMapa = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_insertMapa_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'insertMapa failed: unknown result';
};
CRUDServerClient.prototype.getPerfil = function(idPerfil, callback) {
  if (callback === undefined) {
    this.send_getPerfil(idPerfil);
    return this.recv_getPerfil();
  } else {
    var postData = this.send_getPerfil(idPerfil, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getPerfil);
  }
};

CRUDServerClient.prototype.send_getPerfil = function(idPerfil, callback) {
  this.output.writeMessageBegin('getPerfil', Thrift.MessageType.CALL, this.seqid);
  var params = {
    idPerfil: idPerfil
  };
  var args = new CRUDServer_getPerfil_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getPerfil = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getPerfil_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getPerfil failed: unknown result';
};
CRUDServerClient.prototype.getAllPerfil = function(callback) {
  if (callback === undefined) {
    this.send_getAllPerfil();
    return this.recv_getAllPerfil();
  } else {
    var postData = this.send_getAllPerfil(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllPerfil);
  }
};

CRUDServerClient.prototype.send_getAllPerfil = function(callback) {
  this.output.writeMessageBegin('getAllPerfil', Thrift.MessageType.CALL, this.seqid);
  var args = new CRUDServer_getAllPerfil_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getAllPerfil = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getAllPerfil_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllPerfil failed: unknown result';
};
CRUDServerClient.prototype.updatePerfil = function(descripcion, tipo, estado, idPerfil, callback) {
  if (callback === undefined) {
    this.send_updatePerfil(descripcion, tipo, estado, idPerfil);
    return this.recv_updatePerfil();
  } else {
    var postData = this.send_updatePerfil(descripcion, tipo, estado, idPerfil, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_updatePerfil);
  }
};

CRUDServerClient.prototype.send_updatePerfil = function(descripcion, tipo, estado, idPerfil, callback) {
  this.output.writeMessageBegin('updatePerfil', Thrift.MessageType.CALL, this.seqid);
  var params = {
    descripcion: descripcion,
    tipo: tipo,
    estado: estado,
    idPerfil: idPerfil
  };
  var args = new CRUDServer_updatePerfil_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_updatePerfil = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_updatePerfil_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'updatePerfil failed: unknown result';
};
CRUDServerClient.prototype.insertPerfil = function(descripcion, tipo, estado, callback) {
  if (callback === undefined) {
    this.send_insertPerfil(descripcion, tipo, estado);
    return this.recv_insertPerfil();
  } else {
    var postData = this.send_insertPerfil(descripcion, tipo, estado, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_insertPerfil);
  }
};

CRUDServerClient.prototype.send_insertPerfil = function(descripcion, tipo, estado, callback) {
  this.output.writeMessageBegin('insertPerfil', Thrift.MessageType.CALL, this.seqid);
  var params = {
    descripcion: descripcion,
    tipo: tipo,
    estado: estado
  };
  var args = new CRUDServer_insertPerfil_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_insertPerfil = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_insertPerfil_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'insertPerfil failed: unknown result';
};
CRUDServerClient.prototype.getPerfilRol = function(idPerfilRol, callback) {
  if (callback === undefined) {
    this.send_getPerfilRol(idPerfilRol);
    return this.recv_getPerfilRol();
  } else {
    var postData = this.send_getPerfilRol(idPerfilRol, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getPerfilRol);
  }
};

CRUDServerClient.prototype.send_getPerfilRol = function(idPerfilRol, callback) {
  this.output.writeMessageBegin('getPerfilRol', Thrift.MessageType.CALL, this.seqid);
  var params = {
    idPerfilRol: idPerfilRol
  };
  var args = new CRUDServer_getPerfilRol_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getPerfilRol = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getPerfilRol_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getPerfilRol failed: unknown result';
};
CRUDServerClient.prototype.getAllPerfilRol = function(callback) {
  if (callback === undefined) {
    this.send_getAllPerfilRol();
    return this.recv_getAllPerfilRol();
  } else {
    var postData = this.send_getAllPerfilRol(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllPerfilRol);
  }
};

CRUDServerClient.prototype.send_getAllPerfilRol = function(callback) {
  this.output.writeMessageBegin('getAllPerfilRol', Thrift.MessageType.CALL, this.seqid);
  var args = new CRUDServer_getAllPerfilRol_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getAllPerfilRol = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getAllPerfilRol_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllPerfilRol failed: unknown result';
};
CRUDServerClient.prototype.updatePerfilRol = function(idPerfil, idRol, estado, idPerfilRol, callback) {
  if (callback === undefined) {
    this.send_updatePerfilRol(idPerfil, idRol, estado, idPerfilRol);
    return this.recv_updatePerfilRol();
  } else {
    var postData = this.send_updatePerfilRol(idPerfil, idRol, estado, idPerfilRol, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_updatePerfilRol);
  }
};

CRUDServerClient.prototype.send_updatePerfilRol = function(idPerfil, idRol, estado, idPerfilRol, callback) {
  this.output.writeMessageBegin('updatePerfilRol', Thrift.MessageType.CALL, this.seqid);
  var params = {
    idPerfil: idPerfil,
    idRol: idRol,
    estado: estado,
    idPerfilRol: idPerfilRol
  };
  var args = new CRUDServer_updatePerfilRol_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_updatePerfilRol = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_updatePerfilRol_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'updatePerfilRol failed: unknown result';
};
CRUDServerClient.prototype.insertPerfilRol = function(idPerfil, idRol, estado, callback) {
  if (callback === undefined) {
    this.send_insertPerfilRol(idPerfil, idRol, estado);
    return this.recv_insertPerfilRol();
  } else {
    var postData = this.send_insertPerfilRol(idPerfil, idRol, estado, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_insertPerfilRol);
  }
};

CRUDServerClient.prototype.send_insertPerfilRol = function(idPerfil, idRol, estado, callback) {
  this.output.writeMessageBegin('insertPerfilRol', Thrift.MessageType.CALL, this.seqid);
  var params = {
    idPerfil: idPerfil,
    idRol: idRol,
    estado: estado
  };
  var args = new CRUDServer_insertPerfilRol_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_insertPerfilRol = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_insertPerfilRol_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'insertPerfilRol failed: unknown result';
};
CRUDServerClient.prototype.getPlatea = function(idPlatea, callback) {
  if (callback === undefined) {
    this.send_getPlatea(idPlatea);
    return this.recv_getPlatea();
  } else {
    var postData = this.send_getPlatea(idPlatea, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getPlatea);
  }
};

CRUDServerClient.prototype.send_getPlatea = function(idPlatea, callback) {
  this.output.writeMessageBegin('getPlatea', Thrift.MessageType.CALL, this.seqid);
  var params = {
    idPlatea: idPlatea
  };
  var args = new CRUDServer_getPlatea_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getPlatea = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getPlatea_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getPlatea failed: unknown result';
};
CRUDServerClient.prototype.getAllPlatea = function(callback) {
  if (callback === undefined) {
    this.send_getAllPlatea();
    return this.recv_getAllPlatea();
  } else {
    var postData = this.send_getAllPlatea(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllPlatea);
  }
};

CRUDServerClient.prototype.send_getAllPlatea = function(callback) {
  this.output.writeMessageBegin('getAllPlatea', Thrift.MessageType.CALL, this.seqid);
  var args = new CRUDServer_getAllPlatea_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getAllPlatea = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getAllPlatea_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllPlatea failed: unknown result';
};
CRUDServerClient.prototype.updatePlatea = function(nombre, costo, estado, idPlatea, callback) {
  if (callback === undefined) {
    this.send_updatePlatea(nombre, costo, estado, idPlatea);
    return this.recv_updatePlatea();
  } else {
    var postData = this.send_updatePlatea(nombre, costo, estado, idPlatea, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_updatePlatea);
  }
};

CRUDServerClient.prototype.send_updatePlatea = function(nombre, costo, estado, idPlatea, callback) {
  this.output.writeMessageBegin('updatePlatea', Thrift.MessageType.CALL, this.seqid);
  var params = {
    nombre: nombre,
    costo: costo,
    estado: estado,
    idPlatea: idPlatea
  };
  var args = new CRUDServer_updatePlatea_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_updatePlatea = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_updatePlatea_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'updatePlatea failed: unknown result';
};
CRUDServerClient.prototype.insertPlatea = function(nombre, costo, estado, callback) {
  if (callback === undefined) {
    this.send_insertPlatea(nombre, costo, estado);
    return this.recv_insertPlatea();
  } else {
    var postData = this.send_insertPlatea(nombre, costo, estado, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_insertPlatea);
  }
};

CRUDServerClient.prototype.send_insertPlatea = function(nombre, costo, estado, callback) {
  this.output.writeMessageBegin('insertPlatea', Thrift.MessageType.CALL, this.seqid);
  var params = {
    nombre: nombre,
    costo: costo,
    estado: estado
  };
  var args = new CRUDServer_insertPlatea_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_insertPlatea = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_insertPlatea_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'insertPlatea failed: unknown result';
};
CRUDServerClient.prototype.getPrecio = function(idPrecio, callback) {
  if (callback === undefined) {
    this.send_getPrecio(idPrecio);
    return this.recv_getPrecio();
  } else {
    var postData = this.send_getPrecio(idPrecio, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getPrecio);
  }
};

CRUDServerClient.prototype.send_getPrecio = function(idPrecio, callback) {
  this.output.writeMessageBegin('getPrecio', Thrift.MessageType.CALL, this.seqid);
  var params = {
    idPrecio: idPrecio
  };
  var args = new CRUDServer_getPrecio_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getPrecio = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getPrecio_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getPrecio failed: unknown result';
};
CRUDServerClient.prototype.getAllPrecio = function(callback) {
  if (callback === undefined) {
    this.send_getAllPrecio();
    return this.recv_getAllPrecio();
  } else {
    var postData = this.send_getAllPrecio(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllPrecio);
  }
};

CRUDServerClient.prototype.send_getAllPrecio = function(callback) {
  this.output.writeMessageBegin('getAllPrecio', Thrift.MessageType.CALL, this.seqid);
  var args = new CRUDServer_getAllPrecio_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getAllPrecio = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getAllPrecio_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllPrecio failed: unknown result';
};
CRUDServerClient.prototype.updatePrecio = function(nombre, precio, preestreno, estreno, aforoInicial, ventaPlatea, estado, idPrecio, callback) {
  if (callback === undefined) {
    this.send_updatePrecio(nombre, precio, preestreno, estreno, aforoInicial, ventaPlatea, estado, idPrecio);
    return this.recv_updatePrecio();
  } else {
    var postData = this.send_updatePrecio(nombre, precio, preestreno, estreno, aforoInicial, ventaPlatea, estado, idPrecio, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_updatePrecio);
  }
};

CRUDServerClient.prototype.send_updatePrecio = function(nombre, precio, preestreno, estreno, aforoInicial, ventaPlatea, estado, idPrecio, callback) {
  this.output.writeMessageBegin('updatePrecio', Thrift.MessageType.CALL, this.seqid);
  var params = {
    nombre: nombre,
    precio: precio,
    preestreno: preestreno,
    estreno: estreno,
    aforoInicial: aforoInicial,
    ventaPlatea: ventaPlatea,
    estado: estado,
    idPrecio: idPrecio
  };
  var args = new CRUDServer_updatePrecio_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_updatePrecio = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_updatePrecio_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'updatePrecio failed: unknown result';
};
CRUDServerClient.prototype.insertPrecio = function(nombre, precio, preestreno, estreno, aforoInicial, ventaPlatea, estado, callback) {
  if (callback === undefined) {
    this.send_insertPrecio(nombre, precio, preestreno, estreno, aforoInicial, ventaPlatea, estado);
    return this.recv_insertPrecio();
  } else {
    var postData = this.send_insertPrecio(nombre, precio, preestreno, estreno, aforoInicial, ventaPlatea, estado, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_insertPrecio);
  }
};

CRUDServerClient.prototype.send_insertPrecio = function(nombre, precio, preestreno, estreno, aforoInicial, ventaPlatea, estado, callback) {
  this.output.writeMessageBegin('insertPrecio', Thrift.MessageType.CALL, this.seqid);
  var params = {
    nombre: nombre,
    precio: precio,
    preestreno: preestreno,
    estreno: estreno,
    aforoInicial: aforoInicial,
    ventaPlatea: ventaPlatea,
    estado: estado
  };
  var args = new CRUDServer_insertPrecio_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_insertPrecio = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_insertPrecio_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'insertPrecio failed: unknown result';
};
CRUDServerClient.prototype.getProcedencia = function(idProcedencia, callback) {
  if (callback === undefined) {
    this.send_getProcedencia(idProcedencia);
    return this.recv_getProcedencia();
  } else {
    var postData = this.send_getProcedencia(idProcedencia, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getProcedencia);
  }
};

CRUDServerClient.prototype.send_getProcedencia = function(idProcedencia, callback) {
  this.output.writeMessageBegin('getProcedencia', Thrift.MessageType.CALL, this.seqid);
  var params = {
    idProcedencia: idProcedencia
  };
  var args = new CRUDServer_getProcedencia_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getProcedencia = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getProcedencia_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getProcedencia failed: unknown result';
};
CRUDServerClient.prototype.getAllProcedencia = function(callback) {
  if (callback === undefined) {
    this.send_getAllProcedencia();
    return this.recv_getAllProcedencia();
  } else {
    var postData = this.send_getAllProcedencia(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllProcedencia);
  }
};

CRUDServerClient.prototype.send_getAllProcedencia = function(callback) {
  this.output.writeMessageBegin('getAllProcedencia', Thrift.MessageType.CALL, this.seqid);
  var args = new CRUDServer_getAllProcedencia_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getAllProcedencia = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getAllProcedencia_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllProcedencia failed: unknown result';
};
CRUDServerClient.prototype.updateProcedencia = function(nombre, descripcion, estado, idProcedencia, callback) {
  if (callback === undefined) {
    this.send_updateProcedencia(nombre, descripcion, estado, idProcedencia);
    return this.recv_updateProcedencia();
  } else {
    var postData = this.send_updateProcedencia(nombre, descripcion, estado, idProcedencia, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_updateProcedencia);
  }
};

CRUDServerClient.prototype.send_updateProcedencia = function(nombre, descripcion, estado, idProcedencia, callback) {
  this.output.writeMessageBegin('updateProcedencia', Thrift.MessageType.CALL, this.seqid);
  var params = {
    nombre: nombre,
    descripcion: descripcion,
    estado: estado,
    idProcedencia: idProcedencia
  };
  var args = new CRUDServer_updateProcedencia_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_updateProcedencia = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_updateProcedencia_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'updateProcedencia failed: unknown result';
};
CRUDServerClient.prototype.insertProcedencia = function(nombre, descripcion, estado, callback) {
  if (callback === undefined) {
    this.send_insertProcedencia(nombre, descripcion, estado);
    return this.recv_insertProcedencia();
  } else {
    var postData = this.send_insertProcedencia(nombre, descripcion, estado, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_insertProcedencia);
  }
};

CRUDServerClient.prototype.send_insertProcedencia = function(nombre, descripcion, estado, callback) {
  this.output.writeMessageBegin('insertProcedencia', Thrift.MessageType.CALL, this.seqid);
  var params = {
    nombre: nombre,
    descripcion: descripcion,
    estado: estado
  };
  var args = new CRUDServer_insertProcedencia_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_insertProcedencia = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_insertProcedencia_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'insertProcedencia failed: unknown result';
};
CRUDServerClient.prototype.getProductora = function(idProductora, callback) {
  if (callback === undefined) {
    this.send_getProductora(idProductora);
    return this.recv_getProductora();
  } else {
    var postData = this.send_getProductora(idProductora, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getProductora);
  }
};

CRUDServerClient.prototype.send_getProductora = function(idProductora, callback) {
  this.output.writeMessageBegin('getProductora', Thrift.MessageType.CALL, this.seqid);
  var params = {
    idProductora: idProductora
  };
  var args = new CRUDServer_getProductora_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getProductora = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getProductora_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getProductora failed: unknown result';
};
CRUDServerClient.prototype.getAllProductora = function(callback) {
  if (callback === undefined) {
    this.send_getAllProductora();
    return this.recv_getAllProductora();
  } else {
    var postData = this.send_getAllProductora(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllProductora);
  }
};

CRUDServerClient.prototype.send_getAllProductora = function(callback) {
  this.output.writeMessageBegin('getAllProductora', Thrift.MessageType.CALL, this.seqid);
  var args = new CRUDServer_getAllProductora_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getAllProductora = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getAllProductora_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllProductora failed: unknown result';
};
CRUDServerClient.prototype.updateProductora = function(nombre, descripcion, estado, idProductora, callback) {
  if (callback === undefined) {
    this.send_updateProductora(nombre, descripcion, estado, idProductora);
    return this.recv_updateProductora();
  } else {
    var postData = this.send_updateProductora(nombre, descripcion, estado, idProductora, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_updateProductora);
  }
};

CRUDServerClient.prototype.send_updateProductora = function(nombre, descripcion, estado, idProductora, callback) {
  this.output.writeMessageBegin('updateProductora', Thrift.MessageType.CALL, this.seqid);
  var params = {
    nombre: nombre,
    descripcion: descripcion,
    estado: estado,
    idProductora: idProductora
  };
  var args = new CRUDServer_updateProductora_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_updateProductora = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_updateProductora_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'updateProductora failed: unknown result';
};
CRUDServerClient.prototype.insertProductora = function(nombre, descripcion, estado, callback) {
  if (callback === undefined) {
    this.send_insertProductora(nombre, descripcion, estado);
    return this.recv_insertProductora();
  } else {
    var postData = this.send_insertProductora(nombre, descripcion, estado, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_insertProductora);
  }
};

CRUDServerClient.prototype.send_insertProductora = function(nombre, descripcion, estado, callback) {
  this.output.writeMessageBegin('insertProductora', Thrift.MessageType.CALL, this.seqid);
  var params = {
    nombre: nombre,
    descripcion: descripcion,
    estado: estado
  };
  var args = new CRUDServer_insertProductora_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_insertProductora = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_insertProductora_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'insertProductora failed: unknown result';
};
CRUDServerClient.prototype.getPromocion = function(idPromocion, callback) {
  if (callback === undefined) {
    this.send_getPromocion(idPromocion);
    return this.recv_getPromocion();
  } else {
    var postData = this.send_getPromocion(idPromocion, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getPromocion);
  }
};

CRUDServerClient.prototype.send_getPromocion = function(idPromocion, callback) {
  this.output.writeMessageBegin('getPromocion', Thrift.MessageType.CALL, this.seqid);
  var params = {
    idPromocion: idPromocion
  };
  var args = new CRUDServer_getPromocion_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getPromocion = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getPromocion_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getPromocion failed: unknown result';
};
CRUDServerClient.prototype.getAllPromocion = function(callback) {
  if (callback === undefined) {
    this.send_getAllPromocion();
    return this.recv_getAllPromocion();
  } else {
    var postData = this.send_getAllPromocion(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllPromocion);
  }
};

CRUDServerClient.prototype.send_getAllPromocion = function(callback) {
  this.output.writeMessageBegin('getAllPromocion', Thrift.MessageType.CALL, this.seqid);
  var args = new CRUDServer_getAllPromocion_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getAllPromocion = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getAllPromocion_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllPromocion failed: unknown result';
};
CRUDServerClient.prototype.updatePromocion = function(nombre, descripcion, amigoTeatro, idEvento, idPlatea, tipoAcceso, idTipoPromocion, fechaInicio, fechaFin, estado, idPromocion, callback) {
  if (callback === undefined) {
    this.send_updatePromocion(nombre, descripcion, amigoTeatro, idEvento, idPlatea, tipoAcceso, idTipoPromocion, fechaInicio, fechaFin, estado, idPromocion);
    return this.recv_updatePromocion();
  } else {
    var postData = this.send_updatePromocion(nombre, descripcion, amigoTeatro, idEvento, idPlatea, tipoAcceso, idTipoPromocion, fechaInicio, fechaFin, estado, idPromocion, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_updatePromocion);
  }
};

CRUDServerClient.prototype.send_updatePromocion = function(nombre, descripcion, amigoTeatro, idEvento, idPlatea, tipoAcceso, idTipoPromocion, fechaInicio, fechaFin, estado, idPromocion, callback) {
  this.output.writeMessageBegin('updatePromocion', Thrift.MessageType.CALL, this.seqid);
  var params = {
    nombre: nombre,
    descripcion: descripcion,
    amigoTeatro: amigoTeatro,
    idEvento: idEvento,
    idPlatea: idPlatea,
    tipoAcceso: tipoAcceso,
    idTipoPromocion: idTipoPromocion,
    fechaInicio: fechaInicio,
    fechaFin: fechaFin,
    estado: estado,
    idPromocion: idPromocion
  };
  var args = new CRUDServer_updatePromocion_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_updatePromocion = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_updatePromocion_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'updatePromocion failed: unknown result';
};
CRUDServerClient.prototype.insertPromocion = function(nombre, descripcion, amigoTeatro, idEvento, idPlatea, tipoAcceso, idTipoPromocion, fechaInicio, fechaFin, estado, callback) {
  if (callback === undefined) {
    this.send_insertPromocion(nombre, descripcion, amigoTeatro, idEvento, idPlatea, tipoAcceso, idTipoPromocion, fechaInicio, fechaFin, estado);
    return this.recv_insertPromocion();
  } else {
    var postData = this.send_insertPromocion(nombre, descripcion, amigoTeatro, idEvento, idPlatea, tipoAcceso, idTipoPromocion, fechaInicio, fechaFin, estado, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_insertPromocion);
  }
};

CRUDServerClient.prototype.send_insertPromocion = function(nombre, descripcion, amigoTeatro, idEvento, idPlatea, tipoAcceso, idTipoPromocion, fechaInicio, fechaFin, estado, callback) {
  this.output.writeMessageBegin('insertPromocion', Thrift.MessageType.CALL, this.seqid);
  var params = {
    nombre: nombre,
    descripcion: descripcion,
    amigoTeatro: amigoTeatro,
    idEvento: idEvento,
    idPlatea: idPlatea,
    tipoAcceso: tipoAcceso,
    idTipoPromocion: idTipoPromocion,
    fechaInicio: fechaInicio,
    fechaFin: fechaFin,
    estado: estado
  };
  var args = new CRUDServer_insertPromocion_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_insertPromocion = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_insertPromocion_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'insertPromocion failed: unknown result';
};
CRUDServerClient.prototype.getRol = function(idRol, callback) {
  if (callback === undefined) {
    this.send_getRol(idRol);
    return this.recv_getRol();
  } else {
    var postData = this.send_getRol(idRol, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getRol);
  }
};

CRUDServerClient.prototype.send_getRol = function(idRol, callback) {
  this.output.writeMessageBegin('getRol', Thrift.MessageType.CALL, this.seqid);
  var params = {
    idRol: idRol
  };
  var args = new CRUDServer_getRol_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getRol = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getRol_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getRol failed: unknown result';
};
CRUDServerClient.prototype.getAllRol = function(callback) {
  if (callback === undefined) {
    this.send_getAllRol();
    return this.recv_getAllRol();
  } else {
    var postData = this.send_getAllRol(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllRol);
  }
};

CRUDServerClient.prototype.send_getAllRol = function(callback) {
  this.output.writeMessageBegin('getAllRol', Thrift.MessageType.CALL, this.seqid);
  var args = new CRUDServer_getAllRol_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getAllRol = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getAllRol_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllRol failed: unknown result';
};
CRUDServerClient.prototype.updateRol = function(descripcion, modulo, estado, idRol, callback) {
  if (callback === undefined) {
    this.send_updateRol(descripcion, modulo, estado, idRol);
    return this.recv_updateRol();
  } else {
    var postData = this.send_updateRol(descripcion, modulo, estado, idRol, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_updateRol);
  }
};

CRUDServerClient.prototype.send_updateRol = function(descripcion, modulo, estado, idRol, callback) {
  this.output.writeMessageBegin('updateRol', Thrift.MessageType.CALL, this.seqid);
  var params = {
    descripcion: descripcion,
    modulo: modulo,
    estado: estado,
    idRol: idRol
  };
  var args = new CRUDServer_updateRol_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_updateRol = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_updateRol_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'updateRol failed: unknown result';
};
CRUDServerClient.prototype.insertRol = function(descripcion, modulo, estado, callback) {
  if (callback === undefined) {
    this.send_insertRol(descripcion, modulo, estado);
    return this.recv_insertRol();
  } else {
    var postData = this.send_insertRol(descripcion, modulo, estado, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_insertRol);
  }
};

CRUDServerClient.prototype.send_insertRol = function(descripcion, modulo, estado, callback) {
  this.output.writeMessageBegin('insertRol', Thrift.MessageType.CALL, this.seqid);
  var params = {
    descripcion: descripcion,
    modulo: modulo,
    estado: estado
  };
  var args = new CRUDServer_insertRol_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_insertRol = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_insertRol_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'insertRol failed: unknown result';
};
CRUDServerClient.prototype.getSala = function(idSala, callback) {
  if (callback === undefined) {
    this.send_getSala(idSala);
    return this.recv_getSala();
  } else {
    var postData = this.send_getSala(idSala, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getSala);
  }
};

CRUDServerClient.prototype.send_getSala = function(idSala, callback) {
  this.output.writeMessageBegin('getSala', Thrift.MessageType.CALL, this.seqid);
  var params = {
    idSala: idSala
  };
  var args = new CRUDServer_getSala_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getSala = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getSala_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getSala failed: unknown result';
};
CRUDServerClient.prototype.getAllSala = function(callback) {
  if (callback === undefined) {
    this.send_getAllSala();
    return this.recv_getAllSala();
  } else {
    var postData = this.send_getAllSala(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllSala);
  }
};

CRUDServerClient.prototype.send_getAllSala = function(callback) {
  this.output.writeMessageBegin('getAllSala', Thrift.MessageType.CALL, this.seqid);
  var args = new CRUDServer_getAllSala_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getAllSala = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getAllSala_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllSala failed: unknown result';
};
CRUDServerClient.prototype.updateSala = function(nombre, descripcion, capacidad, rutaImagen, estado, idSala, callback) {
  if (callback === undefined) {
    this.send_updateSala(nombre, descripcion, capacidad, rutaImagen, estado, idSala);
    return this.recv_updateSala();
  } else {
    var postData = this.send_updateSala(nombre, descripcion, capacidad, rutaImagen, estado, idSala, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_updateSala);
  }
};

CRUDServerClient.prototype.send_updateSala = function(nombre, descripcion, capacidad, rutaImagen, estado, idSala, callback) {
  this.output.writeMessageBegin('updateSala', Thrift.MessageType.CALL, this.seqid);
  var params = {
    nombre: nombre,
    descripcion: descripcion,
    capacidad: capacidad,
    rutaImagen: rutaImagen,
    estado: estado,
    idSala: idSala
  };
  var args = new CRUDServer_updateSala_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_updateSala = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_updateSala_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'updateSala failed: unknown result';
};
CRUDServerClient.prototype.insertSala = function(nombre, descripcion, capacidad, rutaImagen, estado, callback) {
  if (callback === undefined) {
    this.send_insertSala(nombre, descripcion, capacidad, rutaImagen, estado);
    return this.recv_insertSala();
  } else {
    var postData = this.send_insertSala(nombre, descripcion, capacidad, rutaImagen, estado, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_insertSala);
  }
};

CRUDServerClient.prototype.send_insertSala = function(nombre, descripcion, capacidad, rutaImagen, estado, callback) {
  this.output.writeMessageBegin('insertSala', Thrift.MessageType.CALL, this.seqid);
  var params = {
    nombre: nombre,
    descripcion: descripcion,
    capacidad: capacidad,
    rutaImagen: rutaImagen,
    estado: estado
  };
  var args = new CRUDServer_insertSala_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_insertSala = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_insertSala_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'insertSala failed: unknown result';
};
CRUDServerClient.prototype.getSalaMapa = function(idSalaMapa, callback) {
  if (callback === undefined) {
    this.send_getSalaMapa(idSalaMapa);
    return this.recv_getSalaMapa();
  } else {
    var postData = this.send_getSalaMapa(idSalaMapa, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getSalaMapa);
  }
};

CRUDServerClient.prototype.send_getSalaMapa = function(idSalaMapa, callback) {
  this.output.writeMessageBegin('getSalaMapa', Thrift.MessageType.CALL, this.seqid);
  var params = {
    idSalaMapa: idSalaMapa
  };
  var args = new CRUDServer_getSalaMapa_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getSalaMapa = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getSalaMapa_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getSalaMapa failed: unknown result';
};
CRUDServerClient.prototype.getAllSalaMapa = function(callback) {
  if (callback === undefined) {
    this.send_getAllSalaMapa();
    return this.recv_getAllSalaMapa();
  } else {
    var postData = this.send_getAllSalaMapa(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllSalaMapa);
  }
};

CRUDServerClient.prototype.send_getAllSalaMapa = function(callback) {
  this.output.writeMessageBegin('getAllSalaMapa', Thrift.MessageType.CALL, this.seqid);
  var args = new CRUDServer_getAllSalaMapa_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getAllSalaMapa = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getAllSalaMapa_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllSalaMapa failed: unknown result';
};
CRUDServerClient.prototype.updateSalaMapa = function(idSala, idMapa, estado, idSalaMapa, callback) {
  if (callback === undefined) {
    this.send_updateSalaMapa(idSala, idMapa, estado, idSalaMapa);
    return this.recv_updateSalaMapa();
  } else {
    var postData = this.send_updateSalaMapa(idSala, idMapa, estado, idSalaMapa, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_updateSalaMapa);
  }
};

CRUDServerClient.prototype.send_updateSalaMapa = function(idSala, idMapa, estado, idSalaMapa, callback) {
  this.output.writeMessageBegin('updateSalaMapa', Thrift.MessageType.CALL, this.seqid);
  var params = {
    idSala: idSala,
    idMapa: idMapa,
    estado: estado,
    idSalaMapa: idSalaMapa
  };
  var args = new CRUDServer_updateSalaMapa_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_updateSalaMapa = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_updateSalaMapa_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'updateSalaMapa failed: unknown result';
};
CRUDServerClient.prototype.insertSalaMapa = function(idSala, idMapa, estado, callback) {
  if (callback === undefined) {
    this.send_insertSalaMapa(idSala, idMapa, estado);
    return this.recv_insertSalaMapa();
  } else {
    var postData = this.send_insertSalaMapa(idSala, idMapa, estado, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_insertSalaMapa);
  }
};

CRUDServerClient.prototype.send_insertSalaMapa = function(idSala, idMapa, estado, callback) {
  this.output.writeMessageBegin('insertSalaMapa', Thrift.MessageType.CALL, this.seqid);
  var params = {
    idSala: idSala,
    idMapa: idMapa,
    estado: estado
  };
  var args = new CRUDServer_insertSalaMapa_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_insertSalaMapa = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_insertSalaMapa_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'insertSalaMapa failed: unknown result';
};
CRUDServerClient.prototype.getTarjeta = function(idTarjeta, callback) {
  if (callback === undefined) {
    this.send_getTarjeta(idTarjeta);
    return this.recv_getTarjeta();
  } else {
    var postData = this.send_getTarjeta(idTarjeta, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getTarjeta);
  }
};

CRUDServerClient.prototype.send_getTarjeta = function(idTarjeta, callback) {
  this.output.writeMessageBegin('getTarjeta', Thrift.MessageType.CALL, this.seqid);
  var params = {
    idTarjeta: idTarjeta
  };
  var args = new CRUDServer_getTarjeta_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getTarjeta = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getTarjeta_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getTarjeta failed: unknown result';
};
CRUDServerClient.prototype.getAllTarjeta = function(callback) {
  if (callback === undefined) {
    this.send_getAllTarjeta();
    return this.recv_getAllTarjeta();
  } else {
    var postData = this.send_getAllTarjeta(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllTarjeta);
  }
};

CRUDServerClient.prototype.send_getAllTarjeta = function(callback) {
  this.output.writeMessageBegin('getAllTarjeta', Thrift.MessageType.CALL, this.seqid);
  var args = new CRUDServer_getAllTarjeta_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getAllTarjeta = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getAllTarjeta_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllTarjeta failed: unknown result';
};
CRUDServerClient.prototype.updateTarjeta = function(nombre, tipo, estado, idTarjeta, callback) {
  if (callback === undefined) {
    this.send_updateTarjeta(nombre, tipo, estado, idTarjeta);
    return this.recv_updateTarjeta();
  } else {
    var postData = this.send_updateTarjeta(nombre, tipo, estado, idTarjeta, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_updateTarjeta);
  }
};

CRUDServerClient.prototype.send_updateTarjeta = function(nombre, tipo, estado, idTarjeta, callback) {
  this.output.writeMessageBegin('updateTarjeta', Thrift.MessageType.CALL, this.seqid);
  var params = {
    nombre: nombre,
    tipo: tipo,
    estado: estado,
    idTarjeta: idTarjeta
  };
  var args = new CRUDServer_updateTarjeta_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_updateTarjeta = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_updateTarjeta_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'updateTarjeta failed: unknown result';
};
CRUDServerClient.prototype.insertTarjeta = function(nombre, tipo, estado, callback) {
  if (callback === undefined) {
    this.send_insertTarjeta(nombre, tipo, estado);
    return this.recv_insertTarjeta();
  } else {
    var postData = this.send_insertTarjeta(nombre, tipo, estado, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_insertTarjeta);
  }
};

CRUDServerClient.prototype.send_insertTarjeta = function(nombre, tipo, estado, callback) {
  this.output.writeMessageBegin('insertTarjeta', Thrift.MessageType.CALL, this.seqid);
  var params = {
    nombre: nombre,
    tipo: tipo,
    estado: estado
  };
  var args = new CRUDServer_insertTarjeta_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_insertTarjeta = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_insertTarjeta_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'insertTarjeta failed: unknown result';
};
CRUDServerClient.prototype.getTipoEspectaculo = function(idTipoEspectaculo, callback) {
  if (callback === undefined) {
    this.send_getTipoEspectaculo(idTipoEspectaculo);
    return this.recv_getTipoEspectaculo();
  } else {
    var postData = this.send_getTipoEspectaculo(idTipoEspectaculo, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getTipoEspectaculo);
  }
};

CRUDServerClient.prototype.send_getTipoEspectaculo = function(idTipoEspectaculo, callback) {
  this.output.writeMessageBegin('getTipoEspectaculo', Thrift.MessageType.CALL, this.seqid);
  var params = {
    idTipoEspectaculo: idTipoEspectaculo
  };
  var args = new CRUDServer_getTipoEspectaculo_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getTipoEspectaculo = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getTipoEspectaculo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getTipoEspectaculo failed: unknown result';
};
CRUDServerClient.prototype.getAllTipoEspectaculo = function(callback) {
  if (callback === undefined) {
    this.send_getAllTipoEspectaculo();
    return this.recv_getAllTipoEspectaculo();
  } else {
    var postData = this.send_getAllTipoEspectaculo(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllTipoEspectaculo);
  }
};

CRUDServerClient.prototype.send_getAllTipoEspectaculo = function(callback) {
  this.output.writeMessageBegin('getAllTipoEspectaculo', Thrift.MessageType.CALL, this.seqid);
  var args = new CRUDServer_getAllTipoEspectaculo_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getAllTipoEspectaculo = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getAllTipoEspectaculo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllTipoEspectaculo failed: unknown result';
};
CRUDServerClient.prototype.updateTipoEspectaculo = function(nombre, descripcion, estado, idTipoEspectaculo, callback) {
  if (callback === undefined) {
    this.send_updateTipoEspectaculo(nombre, descripcion, estado, idTipoEspectaculo);
    return this.recv_updateTipoEspectaculo();
  } else {
    var postData = this.send_updateTipoEspectaculo(nombre, descripcion, estado, idTipoEspectaculo, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_updateTipoEspectaculo);
  }
};

CRUDServerClient.prototype.send_updateTipoEspectaculo = function(nombre, descripcion, estado, idTipoEspectaculo, callback) {
  this.output.writeMessageBegin('updateTipoEspectaculo', Thrift.MessageType.CALL, this.seqid);
  var params = {
    nombre: nombre,
    descripcion: descripcion,
    estado: estado,
    idTipoEspectaculo: idTipoEspectaculo
  };
  var args = new CRUDServer_updateTipoEspectaculo_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_updateTipoEspectaculo = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_updateTipoEspectaculo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'updateTipoEspectaculo failed: unknown result';
};
CRUDServerClient.prototype.insertTipoEspectaculo = function(nombre, descripcion, estado, callback) {
  if (callback === undefined) {
    this.send_insertTipoEspectaculo(nombre, descripcion, estado);
    return this.recv_insertTipoEspectaculo();
  } else {
    var postData = this.send_insertTipoEspectaculo(nombre, descripcion, estado, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_insertTipoEspectaculo);
  }
};

CRUDServerClient.prototype.send_insertTipoEspectaculo = function(nombre, descripcion, estado, callback) {
  this.output.writeMessageBegin('insertTipoEspectaculo', Thrift.MessageType.CALL, this.seqid);
  var params = {
    nombre: nombre,
    descripcion: descripcion,
    estado: estado
  };
  var args = new CRUDServer_insertTipoEspectaculo_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_insertTipoEspectaculo = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_insertTipoEspectaculo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'insertTipoEspectaculo failed: unknown result';
};
CRUDServerClient.prototype.getTipoEvento = function(idTipoEvento, callback) {
  if (callback === undefined) {
    this.send_getTipoEvento(idTipoEvento);
    return this.recv_getTipoEvento();
  } else {
    var postData = this.send_getTipoEvento(idTipoEvento, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getTipoEvento);
  }
};

CRUDServerClient.prototype.send_getTipoEvento = function(idTipoEvento, callback) {
  this.output.writeMessageBegin('getTipoEvento', Thrift.MessageType.CALL, this.seqid);
  var params = {
    idTipoEvento: idTipoEvento
  };
  var args = new CRUDServer_getTipoEvento_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getTipoEvento = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getTipoEvento_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getTipoEvento failed: unknown result';
};
CRUDServerClient.prototype.getAllTipoEvento = function(callback) {
  if (callback === undefined) {
    this.send_getAllTipoEvento();
    return this.recv_getAllTipoEvento();
  } else {
    var postData = this.send_getAllTipoEvento(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllTipoEvento);
  }
};

CRUDServerClient.prototype.send_getAllTipoEvento = function(callback) {
  this.output.writeMessageBegin('getAllTipoEvento', Thrift.MessageType.CALL, this.seqid);
  var args = new CRUDServer_getAllTipoEvento_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getAllTipoEvento = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getAllTipoEvento_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllTipoEvento failed: unknown result';
};
CRUDServerClient.prototype.updateTipoEvento = function(nombre, descripcion, estado, idTipoEvento, callback) {
  if (callback === undefined) {
    this.send_updateTipoEvento(nombre, descripcion, estado, idTipoEvento);
    return this.recv_updateTipoEvento();
  } else {
    var postData = this.send_updateTipoEvento(nombre, descripcion, estado, idTipoEvento, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_updateTipoEvento);
  }
};

CRUDServerClient.prototype.send_updateTipoEvento = function(nombre, descripcion, estado, idTipoEvento, callback) {
  this.output.writeMessageBegin('updateTipoEvento', Thrift.MessageType.CALL, this.seqid);
  var params = {
    nombre: nombre,
    descripcion: descripcion,
    estado: estado,
    idTipoEvento: idTipoEvento
  };
  var args = new CRUDServer_updateTipoEvento_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_updateTipoEvento = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_updateTipoEvento_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'updateTipoEvento failed: unknown result';
};
CRUDServerClient.prototype.insertTipoEvento = function(nombre, descripcion, estado, callback) {
  if (callback === undefined) {
    this.send_insertTipoEvento(nombre, descripcion, estado);
    return this.recv_insertTipoEvento();
  } else {
    var postData = this.send_insertTipoEvento(nombre, descripcion, estado, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_insertTipoEvento);
  }
};

CRUDServerClient.prototype.send_insertTipoEvento = function(nombre, descripcion, estado, callback) {
  this.output.writeMessageBegin('insertTipoEvento', Thrift.MessageType.CALL, this.seqid);
  var params = {
    nombre: nombre,
    descripcion: descripcion,
    estado: estado
  };
  var args = new CRUDServer_insertTipoEvento_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_insertTipoEvento = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_insertTipoEvento_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'insertTipoEvento failed: unknown result';
};
CRUDServerClient.prototype.getTipoPrecio = function(idTipoPrecio, callback) {
  if (callback === undefined) {
    this.send_getTipoPrecio(idTipoPrecio);
    return this.recv_getTipoPrecio();
  } else {
    var postData = this.send_getTipoPrecio(idTipoPrecio, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getTipoPrecio);
  }
};

CRUDServerClient.prototype.send_getTipoPrecio = function(idTipoPrecio, callback) {
  this.output.writeMessageBegin('getTipoPrecio', Thrift.MessageType.CALL, this.seqid);
  var params = {
    idTipoPrecio: idTipoPrecio
  };
  var args = new CRUDServer_getTipoPrecio_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getTipoPrecio = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getTipoPrecio_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getTipoPrecio failed: unknown result';
};
CRUDServerClient.prototype.getAllTipoPrecio = function(callback) {
  if (callback === undefined) {
    this.send_getAllTipoPrecio();
    return this.recv_getAllTipoPrecio();
  } else {
    var postData = this.send_getAllTipoPrecio(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllTipoPrecio);
  }
};

CRUDServerClient.prototype.send_getAllTipoPrecio = function(callback) {
  this.output.writeMessageBegin('getAllTipoPrecio', Thrift.MessageType.CALL, this.seqid);
  var args = new CRUDServer_getAllTipoPrecio_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getAllTipoPrecio = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getAllTipoPrecio_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllTipoPrecio failed: unknown result';
};
CRUDServerClient.prototype.updateTipoPrecio = function(nombre, descripcion, estado, idTipoPrecio, callback) {
  if (callback === undefined) {
    this.send_updateTipoPrecio(nombre, descripcion, estado, idTipoPrecio);
    return this.recv_updateTipoPrecio();
  } else {
    var postData = this.send_updateTipoPrecio(nombre, descripcion, estado, idTipoPrecio, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_updateTipoPrecio);
  }
};

CRUDServerClient.prototype.send_updateTipoPrecio = function(nombre, descripcion, estado, idTipoPrecio, callback) {
  this.output.writeMessageBegin('updateTipoPrecio', Thrift.MessageType.CALL, this.seqid);
  var params = {
    nombre: nombre,
    descripcion: descripcion,
    estado: estado,
    idTipoPrecio: idTipoPrecio
  };
  var args = new CRUDServer_updateTipoPrecio_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_updateTipoPrecio = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_updateTipoPrecio_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'updateTipoPrecio failed: unknown result';
};
CRUDServerClient.prototype.insertTipoPrecio = function(nombre, descripcion, estado, callback) {
  if (callback === undefined) {
    this.send_insertTipoPrecio(nombre, descripcion, estado);
    return this.recv_insertTipoPrecio();
  } else {
    var postData = this.send_insertTipoPrecio(nombre, descripcion, estado, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_insertTipoPrecio);
  }
};

CRUDServerClient.prototype.send_insertTipoPrecio = function(nombre, descripcion, estado, callback) {
  this.output.writeMessageBegin('insertTipoPrecio', Thrift.MessageType.CALL, this.seqid);
  var params = {
    nombre: nombre,
    descripcion: descripcion,
    estado: estado
  };
  var args = new CRUDServer_insertTipoPrecio_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_insertTipoPrecio = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_insertTipoPrecio_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'insertTipoPrecio failed: unknown result';
};
CRUDServerClient.prototype.getTipoPromocion = function(idTipoPromocion, callback) {
  if (callback === undefined) {
    this.send_getTipoPromocion(idTipoPromocion);
    return this.recv_getTipoPromocion();
  } else {
    var postData = this.send_getTipoPromocion(idTipoPromocion, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getTipoPromocion);
  }
};

CRUDServerClient.prototype.send_getTipoPromocion = function(idTipoPromocion, callback) {
  this.output.writeMessageBegin('getTipoPromocion', Thrift.MessageType.CALL, this.seqid);
  var params = {
    idTipoPromocion: idTipoPromocion
  };
  var args = new CRUDServer_getTipoPromocion_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getTipoPromocion = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getTipoPromocion_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getTipoPromocion failed: unknown result';
};
CRUDServerClient.prototype.getAllTipoPromocion = function(callback) {
  if (callback === undefined) {
    this.send_getAllTipoPromocion();
    return this.recv_getAllTipoPromocion();
  } else {
    var postData = this.send_getAllTipoPromocion(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllTipoPromocion);
  }
};

CRUDServerClient.prototype.send_getAllTipoPromocion = function(callback) {
  this.output.writeMessageBegin('getAllTipoPromocion', Thrift.MessageType.CALL, this.seqid);
  var args = new CRUDServer_getAllTipoPromocion_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getAllTipoPromocion = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getAllTipoPromocion_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllTipoPromocion failed: unknown result';
};
CRUDServerClient.prototype.updateTipoPromocion = function(nombre, factorCompra, factorPago, idBancoTarjeta, idCodigoPromocional, estado, idTipoPromocion, callback) {
  if (callback === undefined) {
    this.send_updateTipoPromocion(nombre, factorCompra, factorPago, idBancoTarjeta, idCodigoPromocional, estado, idTipoPromocion);
    return this.recv_updateTipoPromocion();
  } else {
    var postData = this.send_updateTipoPromocion(nombre, factorCompra, factorPago, idBancoTarjeta, idCodigoPromocional, estado, idTipoPromocion, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_updateTipoPromocion);
  }
};

CRUDServerClient.prototype.send_updateTipoPromocion = function(nombre, factorCompra, factorPago, idBancoTarjeta, idCodigoPromocional, estado, idTipoPromocion, callback) {
  this.output.writeMessageBegin('updateTipoPromocion', Thrift.MessageType.CALL, this.seqid);
  var params = {
    nombre: nombre,
    factorCompra: factorCompra,
    factorPago: factorPago,
    idBancoTarjeta: idBancoTarjeta,
    idCodigoPromocional: idCodigoPromocional,
    estado: estado,
    idTipoPromocion: idTipoPromocion
  };
  var args = new CRUDServer_updateTipoPromocion_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_updateTipoPromocion = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_updateTipoPromocion_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'updateTipoPromocion failed: unknown result';
};
CRUDServerClient.prototype.insertTipoPromocion = function(nombre, factorCompra, factorPago, idBancoTarjeta, idCodigoPromocional, estado, callback) {
  if (callback === undefined) {
    this.send_insertTipoPromocion(nombre, factorCompra, factorPago, idBancoTarjeta, idCodigoPromocional, estado);
    return this.recv_insertTipoPromocion();
  } else {
    var postData = this.send_insertTipoPromocion(nombre, factorCompra, factorPago, idBancoTarjeta, idCodigoPromocional, estado, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_insertTipoPromocion);
  }
};

CRUDServerClient.prototype.send_insertTipoPromocion = function(nombre, factorCompra, factorPago, idBancoTarjeta, idCodigoPromocional, estado, callback) {
  this.output.writeMessageBegin('insertTipoPromocion', Thrift.MessageType.CALL, this.seqid);
  var params = {
    nombre: nombre,
    factorCompra: factorCompra,
    factorPago: factorPago,
    idBancoTarjeta: idBancoTarjeta,
    idCodigoPromocional: idCodigoPromocional,
    estado: estado
  };
  var args = new CRUDServer_insertTipoPromocion_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_insertTipoPromocion = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_insertTipoPromocion_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'insertTipoPromocion failed: unknown result';
};
CRUDServerClient.prototype.getUsuario = function(idUsuario, callback) {
  if (callback === undefined) {
    this.send_getUsuario(idUsuario);
    return this.recv_getUsuario();
  } else {
    var postData = this.send_getUsuario(idUsuario, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getUsuario);
  }
};

CRUDServerClient.prototype.send_getUsuario = function(idUsuario, callback) {
  this.output.writeMessageBegin('getUsuario', Thrift.MessageType.CALL, this.seqid);
  var params = {
    idUsuario: idUsuario
  };
  var args = new CRUDServer_getUsuario_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getUsuario = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getUsuario_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getUsuario failed: unknown result';
};
CRUDServerClient.prototype.getAllUsuario = function(callback) {
  if (callback === undefined) {
    this.send_getAllUsuario();
    return this.recv_getAllUsuario();
  } else {
    var postData = this.send_getAllUsuario(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllUsuario);
  }
};

CRUDServerClient.prototype.send_getAllUsuario = function(callback) {
  this.output.writeMessageBegin('getAllUsuario', Thrift.MessageType.CALL, this.seqid);
  var args = new CRUDServer_getAllUsuario_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getAllUsuario = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getAllUsuario_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllUsuario failed: unknown result';
};
CRUDServerClient.prototype.updateUsuario = function(nombres, usuario, cedula, sexo, correo, celular, contrasena, idPerfil, fechaNacimiento, direccion, estado, idUsuario, callback) {
  if (callback === undefined) {
    this.send_updateUsuario(nombres, usuario, cedula, sexo, correo, celular, contrasena, idPerfil, fechaNacimiento, direccion, estado, idUsuario);
    return this.recv_updateUsuario();
  } else {
    var postData = this.send_updateUsuario(nombres, usuario, cedula, sexo, correo, celular, contrasena, idPerfil, fechaNacimiento, direccion, estado, idUsuario, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_updateUsuario);
  }
};

CRUDServerClient.prototype.send_updateUsuario = function(nombres, usuario, cedula, sexo, correo, celular, contrasena, idPerfil, fechaNacimiento, direccion, estado, idUsuario, callback) {
  this.output.writeMessageBegin('updateUsuario', Thrift.MessageType.CALL, this.seqid);
  var params = {
    nombres: nombres,
    usuario: usuario,
    cedula: cedula,
    sexo: sexo,
    correo: correo,
    celular: celular,
    contrasena: contrasena,
    idPerfil: idPerfil,
    fechaNacimiento: fechaNacimiento,
    direccion: direccion,
    estado: estado,
    idUsuario: idUsuario
  };
  var args = new CRUDServer_updateUsuario_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_updateUsuario = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_updateUsuario_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'updateUsuario failed: unknown result';
};
CRUDServerClient.prototype.insertUsuario = function(nombres, usuario, cedula, sexo, correo, celular, contrasena, idPerfil, fechaNacimiento, direccion, estado, callback) {
  if (callback === undefined) {
    this.send_insertUsuario(nombres, usuario, cedula, sexo, correo, celular, contrasena, idPerfil, fechaNacimiento, direccion, estado);
    return this.recv_insertUsuario();
  } else {
    var postData = this.send_insertUsuario(nombres, usuario, cedula, sexo, correo, celular, contrasena, idPerfil, fechaNacimiento, direccion, estado, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_insertUsuario);
  }
};

CRUDServerClient.prototype.send_insertUsuario = function(nombres, usuario, cedula, sexo, correo, celular, contrasena, idPerfil, fechaNacimiento, direccion, estado, callback) {
  this.output.writeMessageBegin('insertUsuario', Thrift.MessageType.CALL, this.seqid);
  var params = {
    nombres: nombres,
    usuario: usuario,
    cedula: cedula,
    sexo: sexo,
    correo: correo,
    celular: celular,
    contrasena: contrasena,
    idPerfil: idPerfil,
    fechaNacimiento: fechaNacimiento,
    direccion: direccion,
    estado: estado
  };
  var args = new CRUDServer_insertUsuario_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_insertUsuario = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_insertUsuario_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'insertUsuario failed: unknown result';
};
CRUDServerClient.prototype.getUsuarioCliente = function(idUsuarioCliente, callback) {
  if (callback === undefined) {
    this.send_getUsuarioCliente(idUsuarioCliente);
    return this.recv_getUsuarioCliente();
  } else {
    var postData = this.send_getUsuarioCliente(idUsuarioCliente, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getUsuarioCliente);
  }
};

CRUDServerClient.prototype.send_getUsuarioCliente = function(idUsuarioCliente, callback) {
  this.output.writeMessageBegin('getUsuarioCliente', Thrift.MessageType.CALL, this.seqid);
  var params = {
    idUsuarioCliente: idUsuarioCliente
  };
  var args = new CRUDServer_getUsuarioCliente_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getUsuarioCliente = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getUsuarioCliente_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getUsuarioCliente failed: unknown result';
};
CRUDServerClient.prototype.getAllUsuarioCliente = function(callback) {
  if (callback === undefined) {
    this.send_getAllUsuarioCliente();
    return this.recv_getAllUsuarioCliente();
  } else {
    var postData = this.send_getAllUsuarioCliente(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllUsuarioCliente);
  }
};

CRUDServerClient.prototype.send_getAllUsuarioCliente = function(callback) {
  this.output.writeMessageBegin('getAllUsuarioCliente', Thrift.MessageType.CALL, this.seqid);
  var args = new CRUDServer_getAllUsuarioCliente_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getAllUsuarioCliente = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getAllUsuarioCliente_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllUsuarioCliente failed: unknown result';
};
CRUDServerClient.prototype.updateUsuarioCliente = function(nombres, usuario, cedula, sexo, correo, celular, contrasena, fechaNacimiento, direccion, amigoTeatro, estado, idUsuarioCliente, callback) {
  if (callback === undefined) {
    this.send_updateUsuarioCliente(nombres, usuario, cedula, sexo, correo, celular, contrasena, fechaNacimiento, direccion, amigoTeatro, estado, idUsuarioCliente);
    return this.recv_updateUsuarioCliente();
  } else {
    var postData = this.send_updateUsuarioCliente(nombres, usuario, cedula, sexo, correo, celular, contrasena, fechaNacimiento, direccion, amigoTeatro, estado, idUsuarioCliente, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_updateUsuarioCliente);
  }
};

CRUDServerClient.prototype.send_updateUsuarioCliente = function(nombres, usuario, cedula, sexo, correo, celular, contrasena, fechaNacimiento, direccion, amigoTeatro, estado, idUsuarioCliente, callback) {
  this.output.writeMessageBegin('updateUsuarioCliente', Thrift.MessageType.CALL, this.seqid);
  var params = {
    nombres: nombres,
    usuario: usuario,
    cedula: cedula,
    sexo: sexo,
    correo: correo,
    celular: celular,
    contrasena: contrasena,
    fechaNacimiento: fechaNacimiento,
    direccion: direccion,
    amigoTeatro: amigoTeatro,
    estado: estado,
    idUsuarioCliente: idUsuarioCliente
  };
  var args = new CRUDServer_updateUsuarioCliente_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_updateUsuarioCliente = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_updateUsuarioCliente_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'updateUsuarioCliente failed: unknown result';
};
CRUDServerClient.prototype.insertUsuarioCliente = function(nombres, usuario, cedula, sexo, correo, celular, contrasena, fechaNacimiento, direccion, amigoTeatro, estado, callback) {
  if (callback === undefined) {
    this.send_insertUsuarioCliente(nombres, usuario, cedula, sexo, correo, celular, contrasena, fechaNacimiento, direccion, amigoTeatro, estado);
    return this.recv_insertUsuarioCliente();
  } else {
    var postData = this.send_insertUsuarioCliente(nombres, usuario, cedula, sexo, correo, celular, contrasena, fechaNacimiento, direccion, amigoTeatro, estado, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_insertUsuarioCliente);
  }
};

CRUDServerClient.prototype.send_insertUsuarioCliente = function(nombres, usuario, cedula, sexo, correo, celular, contrasena, fechaNacimiento, direccion, amigoTeatro, estado, callback) {
  this.output.writeMessageBegin('insertUsuarioCliente', Thrift.MessageType.CALL, this.seqid);
  var params = {
    nombres: nombres,
    usuario: usuario,
    cedula: cedula,
    sexo: sexo,
    correo: correo,
    celular: celular,
    contrasena: contrasena,
    fechaNacimiento: fechaNacimiento,
    direccion: direccion,
    amigoTeatro: amigoTeatro,
    estado: estado
  };
  var args = new CRUDServer_insertUsuarioCliente_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_insertUsuarioCliente = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_insertUsuarioCliente_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'insertUsuarioCliente failed: unknown result';
};
CRUDServerClient.prototype.getUsuarioEvento = function(idUsuarioEvento, callback) {
  if (callback === undefined) {
    this.send_getUsuarioEvento(idUsuarioEvento);
    return this.recv_getUsuarioEvento();
  } else {
    var postData = this.send_getUsuarioEvento(idUsuarioEvento, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getUsuarioEvento);
  }
};

CRUDServerClient.prototype.send_getUsuarioEvento = function(idUsuarioEvento, callback) {
  this.output.writeMessageBegin('getUsuarioEvento', Thrift.MessageType.CALL, this.seqid);
  var params = {
    idUsuarioEvento: idUsuarioEvento
  };
  var args = new CRUDServer_getUsuarioEvento_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getUsuarioEvento = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getUsuarioEvento_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getUsuarioEvento failed: unknown result';
};
CRUDServerClient.prototype.getAllUsuarioEvento = function(callback) {
  if (callback === undefined) {
    this.send_getAllUsuarioEvento();
    return this.recv_getAllUsuarioEvento();
  } else {
    var postData = this.send_getAllUsuarioEvento(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllUsuarioEvento);
  }
};

CRUDServerClient.prototype.send_getAllUsuarioEvento = function(callback) {
  this.output.writeMessageBegin('getAllUsuarioEvento', Thrift.MessageType.CALL, this.seqid);
  var args = new CRUDServer_getAllUsuarioEvento_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_getAllUsuarioEvento = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_getAllUsuarioEvento_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllUsuarioEvento failed: unknown result';
};
CRUDServerClient.prototype.updateUsuarioEvento = function(nombres, usuario, cedula, sexo, correo, celular, contrasena, perfil, fechaNacimiento, direccion, estado, idUsuarioEvento, callback) {
  if (callback === undefined) {
    this.send_updateUsuarioEvento(nombres, usuario, cedula, sexo, correo, celular, contrasena, perfil, fechaNacimiento, direccion, estado, idUsuarioEvento);
    return this.recv_updateUsuarioEvento();
  } else {
    var postData = this.send_updateUsuarioEvento(nombres, usuario, cedula, sexo, correo, celular, contrasena, perfil, fechaNacimiento, direccion, estado, idUsuarioEvento, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_updateUsuarioEvento);
  }
};

CRUDServerClient.prototype.send_updateUsuarioEvento = function(nombres, usuario, cedula, sexo, correo, celular, contrasena, perfil, fechaNacimiento, direccion, estado, idUsuarioEvento, callback) {
  this.output.writeMessageBegin('updateUsuarioEvento', Thrift.MessageType.CALL, this.seqid);
  var params = {
    nombres: nombres,
    usuario: usuario,
    cedula: cedula,
    sexo: sexo,
    correo: correo,
    celular: celular,
    contrasena: contrasena,
    perfil: perfil,
    fechaNacimiento: fechaNacimiento,
    direccion: direccion,
    estado: estado,
    idUsuarioEvento: idUsuarioEvento
  };
  var args = new CRUDServer_updateUsuarioEvento_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_updateUsuarioEvento = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_updateUsuarioEvento_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'updateUsuarioEvento failed: unknown result';
};
CRUDServerClient.prototype.insertUsuarioEvento = function(nombres, usuario, cedula, sexo, correo, celular, contrasena, perfil, fechaNacimiento, direccion, estado, callback) {
  if (callback === undefined) {
    this.send_insertUsuarioEvento(nombres, usuario, cedula, sexo, correo, celular, contrasena, perfil, fechaNacimiento, direccion, estado);
    return this.recv_insertUsuarioEvento();
  } else {
    var postData = this.send_insertUsuarioEvento(nombres, usuario, cedula, sexo, correo, celular, contrasena, perfil, fechaNacimiento, direccion, estado, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_insertUsuarioEvento);
  }
};

CRUDServerClient.prototype.send_insertUsuarioEvento = function(nombres, usuario, cedula, sexo, correo, celular, contrasena, perfil, fechaNacimiento, direccion, estado, callback) {
  this.output.writeMessageBegin('insertUsuarioEvento', Thrift.MessageType.CALL, this.seqid);
  var params = {
    nombres: nombres,
    usuario: usuario,
    cedula: cedula,
    sexo: sexo,
    correo: correo,
    celular: celular,
    contrasena: contrasena,
    perfil: perfil,
    fechaNacimiento: fechaNacimiento,
    direccion: direccion,
    estado: estado
  };
  var args = new CRUDServer_insertUsuarioEvento_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CRUDServerClient.prototype.recv_insertUsuarioEvento = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRUDServer_insertUsuarioEvento_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'insertUsuarioEvento failed: unknown result';
};
