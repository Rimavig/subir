<?php
/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface MailerServerIf {
  /**
   * @param string $idPlantillaCorreo
   * @param string $destinatario
   * @param string $idTicket
   * @param string $nombre
   * @param string $codigo
   * @return string
   */
  public function sendMail($idPlantillaCorreo, $destinatario, $idTicket, $nombre, $codigo);
  /**
   * @param string $idPlantillaCorreo
   * @param string $destinatario
   * @param string $idTicket
   * @param string $nombre
   * @param string $codigo
   */
  public function sendMail1($idPlantillaCorreo, $destinatario, $idTicket, $nombre, $codigo);
  /**
   * @param string $idPlantillaCorreo
   * @return string
   */
  public function getTemplate($idPlantillaCorreo);
  /**
   * @return string
   */
  public function getTemplates();
  /**
   * @param string $nombre
   * @param string $asunto
   * @param string $descripcion1
   * @param string $descripcion2
   * @param string $descripcion3
   * @param string $imagen
   * @param string $enlaceRedesSociales
   * @param string $telefono
   * @param string $direccion
   * @param string $estado
   * @return string
   */
  public function insertTemplate($nombre, $asunto, $descripcion1, $descripcion2, $descripcion3, $imagen, $enlaceRedesSociales, $telefono, $direccion, $estado);
  /**
   * @param string $idPlantillaCorreo
   * @param string $nombre
   * @param string $asunto
   * @param string $descripcion1
   * @param string $descripcion2
   * @param string $descripcion3
   * @param string $imagen
   * @param string $enlaceRedesSociales
   * @param string $telefono
   * @param string $direccion
   * @param string $estado
   * @return string
   */
  public function updateTemplate($idPlantillaCorreo, $nombre, $asunto, $descripcion1, $descripcion2, $descripcion3, $imagen, $enlaceRedesSociales, $telefono, $direccion, $estado);
}


class MailerServerClient implements \MailerServerIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function sendMail($idPlantillaCorreo, $destinatario, $idTicket, $nombre, $codigo)
  {
    $this->send_sendMail($idPlantillaCorreo, $destinatario, $idTicket, $nombre, $codigo);
    return $this->recv_sendMail();
  }

  public function send_sendMail($idPlantillaCorreo, $destinatario, $idTicket, $nombre, $codigo)
  {
    $args = new \MailerServer_sendMail_args();
    $args->idPlantillaCorreo = $idPlantillaCorreo;
    $args->destinatario = $destinatario;
    $args->idTicket = $idTicket;
    $args->nombre = $nombre;
    $args->codigo = $codigo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'sendMail', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('sendMail', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_sendMail()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\MailerServer_sendMail_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \MailerServer_sendMail_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("sendMail failed: unknown result");
  }

  public function sendMail1($idPlantillaCorreo, $destinatario, $idTicket, $nombre, $codigo)
  {
    $this->send_sendMail1($idPlantillaCorreo, $destinatario, $idTicket, $nombre, $codigo);
  }

  public function send_sendMail1($idPlantillaCorreo, $destinatario, $idTicket, $nombre, $codigo)
  {
    $args = new \MailerServer_sendMail1_args();
    $args->idPlantillaCorreo = $idPlantillaCorreo;
    $args->destinatario = $destinatario;
    $args->idTicket = $idTicket;
    $args->nombre = $nombre;
    $args->codigo = $codigo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'sendMail1', TMessageType::ONEWAY, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('sendMail1', TMessageType::ONEWAY, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function getTemplate($idPlantillaCorreo)
  {
    $this->send_getTemplate($idPlantillaCorreo);
    return $this->recv_getTemplate();
  }

  public function send_getTemplate($idPlantillaCorreo)
  {
    $args = new \MailerServer_getTemplate_args();
    $args->idPlantillaCorreo = $idPlantillaCorreo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getTemplate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getTemplate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getTemplate()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\MailerServer_getTemplate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \MailerServer_getTemplate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getTemplate failed: unknown result");
  }

  public function getTemplates()
  {
    $this->send_getTemplates();
    return $this->recv_getTemplates();
  }

  public function send_getTemplates()
  {
    $args = new \MailerServer_getTemplates_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getTemplates', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getTemplates', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getTemplates()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\MailerServer_getTemplates_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \MailerServer_getTemplates_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getTemplates failed: unknown result");
  }

  public function insertTemplate($nombre, $asunto, $descripcion1, $descripcion2, $descripcion3, $imagen, $enlaceRedesSociales, $telefono, $direccion, $estado)
  {
    $this->send_insertTemplate($nombre, $asunto, $descripcion1, $descripcion2, $descripcion3, $imagen, $enlaceRedesSociales, $telefono, $direccion, $estado);
    return $this->recv_insertTemplate();
  }

  public function send_insertTemplate($nombre, $asunto, $descripcion1, $descripcion2, $descripcion3, $imagen, $enlaceRedesSociales, $telefono, $direccion, $estado)
  {
    $args = new \MailerServer_insertTemplate_args();
    $args->nombre = $nombre;
    $args->asunto = $asunto;
    $args->descripcion1 = $descripcion1;
    $args->descripcion2 = $descripcion2;
    $args->descripcion3 = $descripcion3;
    $args->imagen = $imagen;
    $args->enlaceRedesSociales = $enlaceRedesSociales;
    $args->telefono = $telefono;
    $args->direccion = $direccion;
    $args->estado = $estado;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertTemplate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertTemplate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertTemplate()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\MailerServer_insertTemplate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \MailerServer_insertTemplate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertTemplate failed: unknown result");
  }

  public function updateTemplate($idPlantillaCorreo, $nombre, $asunto, $descripcion1, $descripcion2, $descripcion3, $imagen, $enlaceRedesSociales, $telefono, $direccion, $estado)
  {
    $this->send_updateTemplate($idPlantillaCorreo, $nombre, $asunto, $descripcion1, $descripcion2, $descripcion3, $imagen, $enlaceRedesSociales, $telefono, $direccion, $estado);
    return $this->recv_updateTemplate();
  }

  public function send_updateTemplate($idPlantillaCorreo, $nombre, $asunto, $descripcion1, $descripcion2, $descripcion3, $imagen, $enlaceRedesSociales, $telefono, $direccion, $estado)
  {
    $args = new \MailerServer_updateTemplate_args();
    $args->idPlantillaCorreo = $idPlantillaCorreo;
    $args->nombre = $nombre;
    $args->asunto = $asunto;
    $args->descripcion1 = $descripcion1;
    $args->descripcion2 = $descripcion2;
    $args->descripcion3 = $descripcion3;
    $args->imagen = $imagen;
    $args->enlaceRedesSociales = $enlaceRedesSociales;
    $args->telefono = $telefono;
    $args->direccion = $direccion;
    $args->estado = $estado;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateTemplate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateTemplate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateTemplate()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\MailerServer_updateTemplate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \MailerServer_updateTemplate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateTemplate failed: unknown result");
  }

}


// HELPER FUNCTIONS AND STRUCTURES

class MailerServer_sendMail_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idPlantillaCorreo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'destinatario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'idTicket',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'codigo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idPlantillaCorreo = null;
  /**
   * @var string
   */
  public $destinatario = null;
  /**
   * @var string
   */
  public $idTicket = null;
  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $codigo = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idPlantillaCorreo'])) {
        $this->idPlantillaCorreo = $vals['idPlantillaCorreo'];
      }
      if (isset($vals['destinatario'])) {
        $this->destinatario = $vals['destinatario'];
      }
      if (isset($vals['idTicket'])) {
        $this->idTicket = $vals['idTicket'];
      }
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['codigo'])) {
        $this->codigo = $vals['codigo'];
      }
    }
  }

  public function getName() {
    return 'MailerServer_sendMail_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idPlantillaCorreo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->destinatario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idTicket);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->codigo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MailerServer_sendMail_args');
    if ($this->idPlantillaCorreo !== null) {
      $xfer += $output->writeFieldBegin('idPlantillaCorreo', TType::STRING, 1);
      $xfer += $output->writeString($this->idPlantillaCorreo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->destinatario !== null) {
      $xfer += $output->writeFieldBegin('destinatario', TType::STRING, 2);
      $xfer += $output->writeString($this->destinatario);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idTicket !== null) {
      $xfer += $output->writeFieldBegin('idTicket', TType::STRING, 3);
      $xfer += $output->writeString($this->idTicket);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 4);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->codigo !== null) {
      $xfer += $output->writeFieldBegin('codigo', TType::STRING, 5);
      $xfer += $output->writeString($this->codigo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MailerServer_sendMail_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MailerServer_sendMail_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MailerServer_sendMail_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MailerServer_sendMail1_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idPlantillaCorreo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'destinatario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'idTicket',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'codigo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idPlantillaCorreo = null;
  /**
   * @var string
   */
  public $destinatario = null;
  /**
   * @var string
   */
  public $idTicket = null;
  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $codigo = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idPlantillaCorreo'])) {
        $this->idPlantillaCorreo = $vals['idPlantillaCorreo'];
      }
      if (isset($vals['destinatario'])) {
        $this->destinatario = $vals['destinatario'];
      }
      if (isset($vals['idTicket'])) {
        $this->idTicket = $vals['idTicket'];
      }
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['codigo'])) {
        $this->codigo = $vals['codigo'];
      }
    }
  }

  public function getName() {
    return 'MailerServer_sendMail1_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idPlantillaCorreo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->destinatario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idTicket);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->codigo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MailerServer_sendMail1_args');
    if ($this->idPlantillaCorreo !== null) {
      $xfer += $output->writeFieldBegin('idPlantillaCorreo', TType::STRING, 1);
      $xfer += $output->writeString($this->idPlantillaCorreo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->destinatario !== null) {
      $xfer += $output->writeFieldBegin('destinatario', TType::STRING, 2);
      $xfer += $output->writeString($this->destinatario);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idTicket !== null) {
      $xfer += $output->writeFieldBegin('idTicket', TType::STRING, 3);
      $xfer += $output->writeString($this->idTicket);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 4);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->codigo !== null) {
      $xfer += $output->writeFieldBegin('codigo', TType::STRING, 5);
      $xfer += $output->writeString($this->codigo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MailerServer_getTemplate_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idPlantillaCorreo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idPlantillaCorreo = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idPlantillaCorreo'])) {
        $this->idPlantillaCorreo = $vals['idPlantillaCorreo'];
      }
    }
  }

  public function getName() {
    return 'MailerServer_getTemplate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idPlantillaCorreo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MailerServer_getTemplate_args');
    if ($this->idPlantillaCorreo !== null) {
      $xfer += $output->writeFieldBegin('idPlantillaCorreo', TType::STRING, 1);
      $xfer += $output->writeString($this->idPlantillaCorreo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MailerServer_getTemplate_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MailerServer_getTemplate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MailerServer_getTemplate_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MailerServer_getTemplates_args {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'MailerServer_getTemplates_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MailerServer_getTemplates_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MailerServer_getTemplates_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MailerServer_getTemplates_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MailerServer_getTemplates_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MailerServer_insertTemplate_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'asunto',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'descripcion1',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'descripcion2',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'descripcion3',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'imagen',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'enlaceRedesSociales',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'telefono',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'direccion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    10 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $asunto = null;
  /**
   * @var string
   */
  public $descripcion1 = null;
  /**
   * @var string
   */
  public $descripcion2 = null;
  /**
   * @var string
   */
  public $descripcion3 = null;
  /**
   * @var string
   */
  public $imagen = null;
  /**
   * @var string
   */
  public $enlaceRedesSociales = null;
  /**
   * @var string
   */
  public $telefono = null;
  /**
   * @var string
   */
  public $direccion = null;
  /**
   * @var string
   */
  public $estado = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['asunto'])) {
        $this->asunto = $vals['asunto'];
      }
      if (isset($vals['descripcion1'])) {
        $this->descripcion1 = $vals['descripcion1'];
      }
      if (isset($vals['descripcion2'])) {
        $this->descripcion2 = $vals['descripcion2'];
      }
      if (isset($vals['descripcion3'])) {
        $this->descripcion3 = $vals['descripcion3'];
      }
      if (isset($vals['imagen'])) {
        $this->imagen = $vals['imagen'];
      }
      if (isset($vals['enlaceRedesSociales'])) {
        $this->enlaceRedesSociales = $vals['enlaceRedesSociales'];
      }
      if (isset($vals['telefono'])) {
        $this->telefono = $vals['telefono'];
      }
      if (isset($vals['direccion'])) {
        $this->direccion = $vals['direccion'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
    }
  }

  public function getName() {
    return 'MailerServer_insertTemplate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->asunto);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descripcion1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descripcion2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descripcion3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->imagen);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->enlaceRedesSociales);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->telefono);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->direccion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MailerServer_insertTemplate_args');
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 1);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->asunto !== null) {
      $xfer += $output->writeFieldBegin('asunto', TType::STRING, 2);
      $xfer += $output->writeString($this->asunto);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descripcion1 !== null) {
      $xfer += $output->writeFieldBegin('descripcion1', TType::STRING, 3);
      $xfer += $output->writeString($this->descripcion1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descripcion2 !== null) {
      $xfer += $output->writeFieldBegin('descripcion2', TType::STRING, 4);
      $xfer += $output->writeString($this->descripcion2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descripcion3 !== null) {
      $xfer += $output->writeFieldBegin('descripcion3', TType::STRING, 5);
      $xfer += $output->writeString($this->descripcion3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->imagen !== null) {
      $xfer += $output->writeFieldBegin('imagen', TType::STRING, 6);
      $xfer += $output->writeString($this->imagen);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->enlaceRedesSociales !== null) {
      $xfer += $output->writeFieldBegin('enlaceRedesSociales', TType::STRING, 7);
      $xfer += $output->writeString($this->enlaceRedesSociales);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->telefono !== null) {
      $xfer += $output->writeFieldBegin('telefono', TType::STRING, 8);
      $xfer += $output->writeString($this->telefono);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->direccion !== null) {
      $xfer += $output->writeFieldBegin('direccion', TType::STRING, 9);
      $xfer += $output->writeString($this->direccion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 10);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MailerServer_insertTemplate_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MailerServer_insertTemplate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MailerServer_insertTemplate_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MailerServer_updateTemplate_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idPlantillaCorreo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'asunto',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'descripcion1',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'descripcion2',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'descripcion3',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'imagen',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'enlaceRedesSociales',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'telefono',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    10 => array(
      'var' => 'direccion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    11 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $idPlantillaCorreo = null;
  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $asunto = null;
  /**
   * @var string
   */
  public $descripcion1 = null;
  /**
   * @var string
   */
  public $descripcion2 = null;
  /**
   * @var string
   */
  public $descripcion3 = null;
  /**
   * @var string
   */
  public $imagen = null;
  /**
   * @var string
   */
  public $enlaceRedesSociales = null;
  /**
   * @var string
   */
  public $telefono = null;
  /**
   * @var string
   */
  public $direccion = null;
  /**
   * @var string
   */
  public $estado = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idPlantillaCorreo'])) {
        $this->idPlantillaCorreo = $vals['idPlantillaCorreo'];
      }
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['asunto'])) {
        $this->asunto = $vals['asunto'];
      }
      if (isset($vals['descripcion1'])) {
        $this->descripcion1 = $vals['descripcion1'];
      }
      if (isset($vals['descripcion2'])) {
        $this->descripcion2 = $vals['descripcion2'];
      }
      if (isset($vals['descripcion3'])) {
        $this->descripcion3 = $vals['descripcion3'];
      }
      if (isset($vals['imagen'])) {
        $this->imagen = $vals['imagen'];
      }
      if (isset($vals['enlaceRedesSociales'])) {
        $this->enlaceRedesSociales = $vals['enlaceRedesSociales'];
      }
      if (isset($vals['telefono'])) {
        $this->telefono = $vals['telefono'];
      }
      if (isset($vals['direccion'])) {
        $this->direccion = $vals['direccion'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
    }
  }

  public function getName() {
    return 'MailerServer_updateTemplate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idPlantillaCorreo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->asunto);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descripcion1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descripcion2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descripcion3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->imagen);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->enlaceRedesSociales);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->telefono);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->direccion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MailerServer_updateTemplate_args');
    if ($this->idPlantillaCorreo !== null) {
      $xfer += $output->writeFieldBegin('idPlantillaCorreo', TType::STRING, 1);
      $xfer += $output->writeString($this->idPlantillaCorreo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 2);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->asunto !== null) {
      $xfer += $output->writeFieldBegin('asunto', TType::STRING, 3);
      $xfer += $output->writeString($this->asunto);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descripcion1 !== null) {
      $xfer += $output->writeFieldBegin('descripcion1', TType::STRING, 4);
      $xfer += $output->writeString($this->descripcion1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descripcion2 !== null) {
      $xfer += $output->writeFieldBegin('descripcion2', TType::STRING, 5);
      $xfer += $output->writeString($this->descripcion2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descripcion3 !== null) {
      $xfer += $output->writeFieldBegin('descripcion3', TType::STRING, 6);
      $xfer += $output->writeString($this->descripcion3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->imagen !== null) {
      $xfer += $output->writeFieldBegin('imagen', TType::STRING, 7);
      $xfer += $output->writeString($this->imagen);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->enlaceRedesSociales !== null) {
      $xfer += $output->writeFieldBegin('enlaceRedesSociales', TType::STRING, 8);
      $xfer += $output->writeString($this->enlaceRedesSociales);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->telefono !== null) {
      $xfer += $output->writeFieldBegin('telefono', TType::STRING, 9);
      $xfer += $output->writeString($this->telefono);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->direccion !== null) {
      $xfer += $output->writeFieldBegin('direccion', TType::STRING, 10);
      $xfer += $output->writeString($this->direccion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 11);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MailerServer_updateTemplate_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MailerServer_updateTemplate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MailerServer_updateTemplate_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


