<?php
/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface DASHServerIf {
  /**
   * @param string $tipo
   * @return string
   */
  public function getGeneral($tipo);
  /**
   * @param string $tipo
   * @param string $tipo2
   * @return string
   */
  public function getGeneral2($tipo, $tipo2);
  /**
   * @param string $tipo
   * @param string $tipo2
   * @param string $tipo3
   * @return string
   */
  public function getGeneral3($tipo, $tipo2, $tipo3);
  /**
   * @param string $tipo
   * @param string $tipo2
   * @param string $tipo3
   * @param string $tipo4
   * @return string
   */
  public function getGeneral4($tipo, $tipo2, $tipo3, $tipo4);
  /**
   * @param string $tipo
   * @param string $tipo2
   * @param string $tipo3
   * @param string $tipo4
   * @param string $tipo5
   * @return string
   */
  public function getGeneral5($tipo, $tipo2, $tipo3, $tipo4, $tipo5);
  /**
   * @param string $tipo
   * @param string $tipo2
   * @param string $tipo3
   * @param string $tipo4
   * @param string $tipo5
   * @param string $tipo6
   * @return string
   */
  public function getGeneral6($tipo, $tipo2, $tipo3, $tipo4, $tipo5, $tipo6);
  /**
   * @param string $tipo
   * @param string $tipo2
   * @param string $destinatario
   * @param string $titulo
   * @param string $descripcion
   * @param string $idEvento
   * @param string $fecha
   * @param string $estado
   * @param string $usuario_modificacion
   * @return string
   */
  public function notificacion($tipo, $tipo2, $destinatario, $titulo, $descripcion, $idEvento, $fecha, $estado, $usuario_modificacion);
}


class DASHServerClient implements \DASHServerIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function getGeneral($tipo)
  {
    $this->send_getGeneral($tipo);
    return $this->recv_getGeneral();
  }

  public function send_getGeneral($tipo)
  {
    $args = new \DASHServer_getGeneral_args();
    $args->tipo = $tipo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getGeneral', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getGeneral', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getGeneral()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\DASHServer_getGeneral_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \DASHServer_getGeneral_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getGeneral failed: unknown result");
  }

  public function getGeneral2($tipo, $tipo2)
  {
    $this->send_getGeneral2($tipo, $tipo2);
    return $this->recv_getGeneral2();
  }

  public function send_getGeneral2($tipo, $tipo2)
  {
    $args = new \DASHServer_getGeneral2_args();
    $args->tipo = $tipo;
    $args->tipo2 = $tipo2;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getGeneral2', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getGeneral2', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getGeneral2()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\DASHServer_getGeneral2_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \DASHServer_getGeneral2_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getGeneral2 failed: unknown result");
  }

  public function getGeneral3($tipo, $tipo2, $tipo3)
  {
    $this->send_getGeneral3($tipo, $tipo2, $tipo3);
    return $this->recv_getGeneral3();
  }

  public function send_getGeneral3($tipo, $tipo2, $tipo3)
  {
    $args = new \DASHServer_getGeneral3_args();
    $args->tipo = $tipo;
    $args->tipo2 = $tipo2;
    $args->tipo3 = $tipo3;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getGeneral3', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getGeneral3', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getGeneral3()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\DASHServer_getGeneral3_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \DASHServer_getGeneral3_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getGeneral3 failed: unknown result");
  }

  public function getGeneral4($tipo, $tipo2, $tipo3, $tipo4)
  {
    $this->send_getGeneral4($tipo, $tipo2, $tipo3, $tipo4);
    return $this->recv_getGeneral4();
  }

  public function send_getGeneral4($tipo, $tipo2, $tipo3, $tipo4)
  {
    $args = new \DASHServer_getGeneral4_args();
    $args->tipo = $tipo;
    $args->tipo2 = $tipo2;
    $args->tipo3 = $tipo3;
    $args->tipo4 = $tipo4;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getGeneral4', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getGeneral4', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getGeneral4()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\DASHServer_getGeneral4_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \DASHServer_getGeneral4_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getGeneral4 failed: unknown result");
  }

  public function getGeneral5($tipo, $tipo2, $tipo3, $tipo4, $tipo5)
  {
    $this->send_getGeneral5($tipo, $tipo2, $tipo3, $tipo4, $tipo5);
    return $this->recv_getGeneral5();
  }

  public function send_getGeneral5($tipo, $tipo2, $tipo3, $tipo4, $tipo5)
  {
    $args = new \DASHServer_getGeneral5_args();
    $args->tipo = $tipo;
    $args->tipo2 = $tipo2;
    $args->tipo3 = $tipo3;
    $args->tipo4 = $tipo4;
    $args->tipo5 = $tipo5;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getGeneral5', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getGeneral5', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getGeneral5()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\DASHServer_getGeneral5_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \DASHServer_getGeneral5_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getGeneral5 failed: unknown result");
  }

  public function getGeneral6($tipo, $tipo2, $tipo3, $tipo4, $tipo5, $tipo6)
  {
    $this->send_getGeneral6($tipo, $tipo2, $tipo3, $tipo4, $tipo5, $tipo6);
    return $this->recv_getGeneral6();
  }

  public function send_getGeneral6($tipo, $tipo2, $tipo3, $tipo4, $tipo5, $tipo6)
  {
    $args = new \DASHServer_getGeneral6_args();
    $args->tipo = $tipo;
    $args->tipo2 = $tipo2;
    $args->tipo3 = $tipo3;
    $args->tipo4 = $tipo4;
    $args->tipo5 = $tipo5;
    $args->tipo6 = $tipo6;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getGeneral6', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getGeneral6', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getGeneral6()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\DASHServer_getGeneral6_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \DASHServer_getGeneral6_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getGeneral6 failed: unknown result");
  }

  public function notificacion($tipo, $tipo2, $destinatario, $titulo, $descripcion, $idEvento, $fecha, $estado, $usuario_modificacion)
  {
    $this->send_notificacion($tipo, $tipo2, $destinatario, $titulo, $descripcion, $idEvento, $fecha, $estado, $usuario_modificacion);
    return $this->recv_notificacion();
  }

  public function send_notificacion($tipo, $tipo2, $destinatario, $titulo, $descripcion, $idEvento, $fecha, $estado, $usuario_modificacion)
  {
    $args = new \DASHServer_notificacion_args();
    $args->tipo = $tipo;
    $args->tipo2 = $tipo2;
    $args->destinatario = $destinatario;
    $args->titulo = $titulo;
    $args->descripcion = $descripcion;
    $args->idEvento = $idEvento;
    $args->fecha = $fecha;
    $args->estado = $estado;
    $args->usuario_modificacion = $usuario_modificacion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'notificacion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('notificacion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_notificacion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\DASHServer_notificacion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \DASHServer_notificacion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("notificacion failed: unknown result");
  }

}


// HELPER FUNCTIONS AND STRUCTURES

class DASHServer_getGeneral_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'tipo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $tipo = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['tipo'])) {
        $this->tipo = $vals['tipo'];
      }
    }
  }

  public function getName() {
    return 'DASHServer_getGeneral_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DASHServer_getGeneral_args');
    if ($this->tipo !== null) {
      $xfer += $output->writeFieldBegin('tipo', TType::STRING, 1);
      $xfer += $output->writeString($this->tipo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DASHServer_getGeneral_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'DASHServer_getGeneral_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DASHServer_getGeneral_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DASHServer_getGeneral2_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'tipo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'tipo2',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $tipo = null;
  /**
   * @var string
   */
  public $tipo2 = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['tipo'])) {
        $this->tipo = $vals['tipo'];
      }
      if (isset($vals['tipo2'])) {
        $this->tipo2 = $vals['tipo2'];
      }
    }
  }

  public function getName() {
    return 'DASHServer_getGeneral2_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DASHServer_getGeneral2_args');
    if ($this->tipo !== null) {
      $xfer += $output->writeFieldBegin('tipo', TType::STRING, 1);
      $xfer += $output->writeString($this->tipo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipo2 !== null) {
      $xfer += $output->writeFieldBegin('tipo2', TType::STRING, 2);
      $xfer += $output->writeString($this->tipo2);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DASHServer_getGeneral2_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'DASHServer_getGeneral2_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DASHServer_getGeneral2_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DASHServer_getGeneral3_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'tipo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'tipo2',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'tipo3',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $tipo = null;
  /**
   * @var string
   */
  public $tipo2 = null;
  /**
   * @var string
   */
  public $tipo3 = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['tipo'])) {
        $this->tipo = $vals['tipo'];
      }
      if (isset($vals['tipo2'])) {
        $this->tipo2 = $vals['tipo2'];
      }
      if (isset($vals['tipo3'])) {
        $this->tipo3 = $vals['tipo3'];
      }
    }
  }

  public function getName() {
    return 'DASHServer_getGeneral3_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DASHServer_getGeneral3_args');
    if ($this->tipo !== null) {
      $xfer += $output->writeFieldBegin('tipo', TType::STRING, 1);
      $xfer += $output->writeString($this->tipo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipo2 !== null) {
      $xfer += $output->writeFieldBegin('tipo2', TType::STRING, 2);
      $xfer += $output->writeString($this->tipo2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipo3 !== null) {
      $xfer += $output->writeFieldBegin('tipo3', TType::STRING, 3);
      $xfer += $output->writeString($this->tipo3);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DASHServer_getGeneral3_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'DASHServer_getGeneral3_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DASHServer_getGeneral3_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DASHServer_getGeneral4_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'tipo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'tipo2',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'tipo3',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'tipo4',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $tipo = null;
  /**
   * @var string
   */
  public $tipo2 = null;
  /**
   * @var string
   */
  public $tipo3 = null;
  /**
   * @var string
   */
  public $tipo4 = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['tipo'])) {
        $this->tipo = $vals['tipo'];
      }
      if (isset($vals['tipo2'])) {
        $this->tipo2 = $vals['tipo2'];
      }
      if (isset($vals['tipo3'])) {
        $this->tipo3 = $vals['tipo3'];
      }
      if (isset($vals['tipo4'])) {
        $this->tipo4 = $vals['tipo4'];
      }
    }
  }

  public function getName() {
    return 'DASHServer_getGeneral4_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DASHServer_getGeneral4_args');
    if ($this->tipo !== null) {
      $xfer += $output->writeFieldBegin('tipo', TType::STRING, 1);
      $xfer += $output->writeString($this->tipo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipo2 !== null) {
      $xfer += $output->writeFieldBegin('tipo2', TType::STRING, 2);
      $xfer += $output->writeString($this->tipo2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipo3 !== null) {
      $xfer += $output->writeFieldBegin('tipo3', TType::STRING, 3);
      $xfer += $output->writeString($this->tipo3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipo4 !== null) {
      $xfer += $output->writeFieldBegin('tipo4', TType::STRING, 4);
      $xfer += $output->writeString($this->tipo4);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DASHServer_getGeneral4_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'DASHServer_getGeneral4_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DASHServer_getGeneral4_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DASHServer_getGeneral5_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'tipo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'tipo2',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'tipo3',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'tipo4',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'tipo5',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $tipo = null;
  /**
   * @var string
   */
  public $tipo2 = null;
  /**
   * @var string
   */
  public $tipo3 = null;
  /**
   * @var string
   */
  public $tipo4 = null;
  /**
   * @var string
   */
  public $tipo5 = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['tipo'])) {
        $this->tipo = $vals['tipo'];
      }
      if (isset($vals['tipo2'])) {
        $this->tipo2 = $vals['tipo2'];
      }
      if (isset($vals['tipo3'])) {
        $this->tipo3 = $vals['tipo3'];
      }
      if (isset($vals['tipo4'])) {
        $this->tipo4 = $vals['tipo4'];
      }
      if (isset($vals['tipo5'])) {
        $this->tipo5 = $vals['tipo5'];
      }
    }
  }

  public function getName() {
    return 'DASHServer_getGeneral5_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DASHServer_getGeneral5_args');
    if ($this->tipo !== null) {
      $xfer += $output->writeFieldBegin('tipo', TType::STRING, 1);
      $xfer += $output->writeString($this->tipo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipo2 !== null) {
      $xfer += $output->writeFieldBegin('tipo2', TType::STRING, 2);
      $xfer += $output->writeString($this->tipo2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipo3 !== null) {
      $xfer += $output->writeFieldBegin('tipo3', TType::STRING, 3);
      $xfer += $output->writeString($this->tipo3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipo4 !== null) {
      $xfer += $output->writeFieldBegin('tipo4', TType::STRING, 4);
      $xfer += $output->writeString($this->tipo4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipo5 !== null) {
      $xfer += $output->writeFieldBegin('tipo5', TType::STRING, 5);
      $xfer += $output->writeString($this->tipo5);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DASHServer_getGeneral5_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'DASHServer_getGeneral5_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DASHServer_getGeneral5_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DASHServer_getGeneral6_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'tipo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'tipo2',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'tipo3',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'tipo4',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'tipo5',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'tipo6',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $tipo = null;
  /**
   * @var string
   */
  public $tipo2 = null;
  /**
   * @var string
   */
  public $tipo3 = null;
  /**
   * @var string
   */
  public $tipo4 = null;
  /**
   * @var string
   */
  public $tipo5 = null;
  /**
   * @var string
   */
  public $tipo6 = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['tipo'])) {
        $this->tipo = $vals['tipo'];
      }
      if (isset($vals['tipo2'])) {
        $this->tipo2 = $vals['tipo2'];
      }
      if (isset($vals['tipo3'])) {
        $this->tipo3 = $vals['tipo3'];
      }
      if (isset($vals['tipo4'])) {
        $this->tipo4 = $vals['tipo4'];
      }
      if (isset($vals['tipo5'])) {
        $this->tipo5 = $vals['tipo5'];
      }
      if (isset($vals['tipo6'])) {
        $this->tipo6 = $vals['tipo6'];
      }
    }
  }

  public function getName() {
    return 'DASHServer_getGeneral6_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DASHServer_getGeneral6_args');
    if ($this->tipo !== null) {
      $xfer += $output->writeFieldBegin('tipo', TType::STRING, 1);
      $xfer += $output->writeString($this->tipo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipo2 !== null) {
      $xfer += $output->writeFieldBegin('tipo2', TType::STRING, 2);
      $xfer += $output->writeString($this->tipo2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipo3 !== null) {
      $xfer += $output->writeFieldBegin('tipo3', TType::STRING, 3);
      $xfer += $output->writeString($this->tipo3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipo4 !== null) {
      $xfer += $output->writeFieldBegin('tipo4', TType::STRING, 4);
      $xfer += $output->writeString($this->tipo4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipo5 !== null) {
      $xfer += $output->writeFieldBegin('tipo5', TType::STRING, 5);
      $xfer += $output->writeString($this->tipo5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipo6 !== null) {
      $xfer += $output->writeFieldBegin('tipo6', TType::STRING, 6);
      $xfer += $output->writeString($this->tipo6);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DASHServer_getGeneral6_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'DASHServer_getGeneral6_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DASHServer_getGeneral6_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DASHServer_notificacion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'tipo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'tipo2',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'destinatario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'titulo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'descripcion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'idEvento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'fecha',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $tipo = null;
  /**
   * @var string
   */
  public $tipo2 = null;
  /**
   * @var string
   */
  public $destinatario = null;
  /**
   * @var string
   */
  public $titulo = null;
  /**
   * @var string
   */
  public $descripcion = null;
  /**
   * @var string
   */
  public $idEvento = null;
  /**
   * @var string
   */
  public $fecha = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['tipo'])) {
        $this->tipo = $vals['tipo'];
      }
      if (isset($vals['tipo2'])) {
        $this->tipo2 = $vals['tipo2'];
      }
      if (isset($vals['destinatario'])) {
        $this->destinatario = $vals['destinatario'];
      }
      if (isset($vals['titulo'])) {
        $this->titulo = $vals['titulo'];
      }
      if (isset($vals['descripcion'])) {
        $this->descripcion = $vals['descripcion'];
      }
      if (isset($vals['idEvento'])) {
        $this->idEvento = $vals['idEvento'];
      }
      if (isset($vals['fecha'])) {
        $this->fecha = $vals['fecha'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'DASHServer_notificacion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->destinatario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->titulo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descripcion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idEvento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fecha);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DASHServer_notificacion_args');
    if ($this->tipo !== null) {
      $xfer += $output->writeFieldBegin('tipo', TType::STRING, 1);
      $xfer += $output->writeString($this->tipo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipo2 !== null) {
      $xfer += $output->writeFieldBegin('tipo2', TType::STRING, 2);
      $xfer += $output->writeString($this->tipo2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->destinatario !== null) {
      $xfer += $output->writeFieldBegin('destinatario', TType::STRING, 3);
      $xfer += $output->writeString($this->destinatario);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->titulo !== null) {
      $xfer += $output->writeFieldBegin('titulo', TType::STRING, 4);
      $xfer += $output->writeString($this->titulo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descripcion !== null) {
      $xfer += $output->writeFieldBegin('descripcion', TType::STRING, 5);
      $xfer += $output->writeString($this->descripcion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idEvento !== null) {
      $xfer += $output->writeFieldBegin('idEvento', TType::STRING, 6);
      $xfer += $output->writeString($this->idEvento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fecha !== null) {
      $xfer += $output->writeFieldBegin('fecha', TType::STRING, 7);
      $xfer += $output->writeString($this->fecha);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 8);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 9);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DASHServer_notificacion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'DASHServer_notificacion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DASHServer_notificacion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


